import cmath
from math import atan
from numpy.random import rand
import numpy as np
import scipy.signal as signal
import random
import matplotlib.pyplot as plt
import scipy.special as bessel
import functions
import QPSK_generator
import plotly.express as px
import plotly.io as pio
import channel_calculation
import plotly.graph_objects as go
import datetime
import plotly
import QAM_generator

pio.renderers.default = "browser"

'''definitions'''
M = 256
message_bits = np.array(
    [1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1])
signal_wave = QAM_generator.create_QAM_signal(message_bits, 64)
# noise v:
# noise = np.random.normal(0, np.sqrt(0.5), (M,len(signal_wave))) + 1j * np.random.normal(0, np.sqrt(0.5), (M,len(signal_wave)))
# noise x:
noise = None
S = 100  # aantal scatterers
C = 10  # aantal clusters
r_c = 5  # straal cluster
c = round(S/C)  # aantal scatterers per cluster
dM = 0.5
resolution = 0.1
titel = '--M=' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_C=' + str(C)  + '_resolution=' + str(
    resolution) + '_noise-x__pathloss_random_fase'
header = '(' + datetime.datetime.now().strftime("%Y-%m-%d_%H:%M") + ')' + titel
print(header)

# place antennas (line @ x=0)
y_setup = list(range(40000 - int(dM * 100 * M / 2), 40000 - int(dM * 100 * M / 2) + int(dM * 100 * M), int(dM * 100)))
y_setup = [i * 0.010 for i in y_setup]
x_setup = list([0 for i in y_setup])
'''random scatt setup'''
# place scatterers (random)
randis_x = []
randis_y = []
for i in range(C):
    mother_x = random.randint(100, 800000) / 1000
    randis_x.append(mother_x)
    mother_y = random.randint(0, 800000) / 1000
    randis_y.append(mother_y)
    x_setup.append(mother_x)
    y_setup.append(mother_y)
    for j in range(c-1):
        randi = random.randint(0, 2 * r_c *1000)/1000 - r_c + mother_x
        while randi in randis_x:
            randi = random.randint(0, 2 * r_c*1000)/1000 - r_c + mother_x
        x_setup.append(randi)
        randis_x.append(randi)
        randi = random.randint(0, 2 * r_c*1000)/1000 - r_c + mother_y
        while randi in randis_y:
            randi = random.randint(0, 2 * r_c*1000)/1000 - r_c + mother_y
        y_setup.append(randi)
        randis_y.append(randi)
    
# place UE
# x_setup.append(random.randint(100000, 600000) / 1000)
# y_setup.append(random.randint(100000, 600000) / 1000)
# random_phases = np.random.random(S)

'''fixed scatt setup'''
# place scatterers (fixed)

random_phases = [0.05611822, 0.43566513, 0.83744167, 0.7805519, 0.58480271, 0.98632399, 0.21289288, 0.88825089, 0.89471252, 0.83427997,0.78845038, 0.3128224, 0.13673235, 0.70392962, 0.10676477,0.92804575, 0.77477041, 0.69204264, 0.30840359, 0.70426323,0.99239314, 0.12830945, 0.02303761, 0.59198878, 0.0139303,0.67193313, 0.42960773, 0.73948876, 0.10265943, 0.71412981,0.58715803, 0.64117483, 0.98987275, 0.52638028, 0.19009048,0.85406847, 0.99697084, 0.91986392, 0.69590401, 0.78741582,0.55262245, 0.66993345, 0.46476929, 0.07975967, 0.68366236,0.65341863, 0.99545799, 0.73923697, 0.49663295, 0.14540705,0.94225074, 0.91629562, 0.06163607, 0.31173731, 0.38404732,0.42920858, 0.08568909, 0.63929926, 0.69571079, 0.35679112,0.33732748, 0.93427738, 0.08720886, 0.07489865, 0.38708205,0.20333509, 0.30598261, 0.43755, 0.52126149, 0.12248786,0.82630353, 0.04486331, 0.67329838, 0.19651202, 0.81702925,0.40643033, 0.45756734, 0.3546435, 0.83290001, 0.64115585,0.4128956, 0.16231792, 0.55293031, 0.07936797, 0.57266972,0.43556995, 0.88779605, 0.38416812, 0.55177933, 0.80134576,0.96120955, 0.39598014, 0.55703053, 0.31715457, 0.2755024,0.27465744, 0.57144621, 0.03680888, 0.77858364, 0.6445758,0.48576065, 0.85279218, 0.71343879, 0.06143578, 0.79698416,0.70499022, 0.7346376, 0.9808139, 0.8419244, 0.60356538,0.14659023, 0.55406393, 0.51747776, 0.06492984, 0.97759453,0.88470716, 0.66790477, 0.86871431, 0.3098369, 0.01732207,0.832486, 0.02195267, 0.45787201, 0.25457237, 0.87317976,0.48113053, 0.07728467, 0.53516176, 0.87691402, 0.31901427,0.9606729, 0.87093124, 0.82599772, 0.31238568, 0.86188987,0.41232429, 0.51346025, 0.69290827, 0.589703, 0.11602877,0.9376607, 0.09355357, 0.82709098, 0.35494112, 0.8535295,0.20976736, 0.43236686, 0.31192189, 0.0583658, 0.60092217,0.81329817, 0.88703335, 0.24310225, 0.95820501, 0.41391461,0.8309761, 0.49493163, 0.91180181, 0.25513225, 0.04288238,0.00213658, 0.13087853, 0.62489146, 0.32371426, 0.32092686,0.62078732, 0.10494032, 0.52122615, 0.7044578, 0.93632871,0.9037106, 0.45444446, 0.57071333, 0.46483063, 0.69386835,0.70043527, 0.05344983, 0.78680448, 0.08645273, 0.80106818,0.82550493, 0.63075509, 0.06808681, 0.29092075, 0.24740294,0.12848159, 0.88660763, 0.98017541, 0.94921247, 0.96629287,0.93816554, 0.97465697, 0.11063612, 0.72420847, 0.11098571,0.72285507, 0.83547351, 0.60094248, 0.28714812, 0.73278494,0.857276, 0.29242465, 0.48172037, 0.24735069, 0.28198754,0.7659901, 0.61708581, 0.3613735, 0.31247919, 0.15172179,0.36109169, 0.82181439, 0.8820665, 0.26325453, 0.47604018,0.01715241, 0.11457832, 0.87180942, 0.92391596, 0.12604755,0.0154288, 0.0333111, 0.44527411, 0.83457362, 0.66590078,0.18068308, 0.44856497, 0.25636334, 0.95386726, 0.68062703,0.12190918, 0.21707271, 0.62101185, 0.83495504, 0.11588408,0.20640155, 0.88978372, 0.98453291, 0.80785746, 0.08982229,0.34786718, 0.23378679, 0.88423865, 0.6179368, 0.96592027,0.76899012, 0.06609793, 0.68894801, 0.41538421, 0.38487572,0.70489309, 0.81126274, 0.48585147, 0.45915551, 0.10114399,0.10895441, 0.88529921, 0.11736701, 0.63088306, 0.81568947,0.09062932, 0.00106475, 0.02809005, 0.14078203, 0.13141917,0.75838919, 0.91332812, 0.13895342, 0.61410345, 0.32567558,0.35655016, 0.25029589, 0.39117783, 0.04437546, 0.04992325,0.8946942, 0.59456985, 0.21362942, 0.56280241, 0.71469092,0.73335919, 0.26542184, 0.16973036, 0.25235402, 0.2688513,0.94527344, 0.09027511, 0.23025038, 0.20549277, 0.40235719,0.28249545, 0.06480564, 0.85117662, 0.94550364, 0.16250687,0.55976546, 0.30699317, 0.23435153, 0.02915379, 0.61969999,0.38458318, 0.78422174, 0.76516972, 0.23238107, 0.88784612,0.04542595, 0.92319375, 0.55200017, 0.06190055, 0.09290128,0.91389614, 0.0779164, 0.86325163, 0.38036505, 0.53532355,0.3342375, 0.64427826, 0.74732689, 0.6755753, 0.49869146,0.97704051, 0.43253489, 0.8519127, 0.87235818, 0.51242127,0.81040613, 0.78042298, 0.50744561, 0.88145647, 0.35865041,0.13974482, 0.93329779, 0.92599387, 0.96258815, 0.0621183,0.29128182, 0.24511147, 0.07127766, 0.76886231, 0.84594537,0.33681244, 0.65399569, 0.39017183, 0.77869056, 0.82948547,0.14085059, 0.890259, 0.60774298, 0.63867083, 0.06097369,0.75476028, 0.78400877, 0.76913773, 0.74738697, 0.26637277,0.02179153, 0.93286018, 0.70352748, 0.22910974, 0.8072704,0.60586787, 0.03828207, 0.29505837, 0.36617541, 0.79187773,0.60592106, 0.96204551, 0.10583225, 0.3580479, 0.69148724,0.09760451, 0.7581941, 0.84901651, 0.64277722, 0.24965145,0.26092441, 0.50821415, 0.57247826, 0.52401868, 0.58181735,0.52856102, 0.10293431, 0.37763806, 0.69900297, 0.31664085,0.84217329, 0.27563615, 0.76612871, 0.12964449, 0.92044335,0.96391533, 0.51248181, 0.49852073, 0.95636256, 0.51138358,0.2967324, 0.48251211, 0.71593555, 0.07290982, 0.25604541,0.89645711, 0.67102453, 0.54045457, 0.32209054, 0.31752937,0.86501375, 0.77783593, 0.1000935, 0.44627097, 0.65351275,0.68886045, 0.26337907, 0.74935341, 0.67293962, 0.72822559,0.35091786, 0.38834607, 0.26251485, 0.73681474, 0.97876088,0.62012634, 0.67017218, 0.73238011, 0.26732551, 0.60998608,0.09416289, 0.0110021, 0.59937587, 0.70054669, 0.86908333,0.34424995, 0.93067555, 0.0567276, 0.04695297, 0.35450995,0.77996842, 0.36385496, 0.76475693, 0.64965367, 0.44279724,0.38486247, 0.68087067, 0.4309681, 0.35455598, 0.80248598,0.09458051, 0.68946495, 0.96590717, 0.66792569, 0.61045951,0.45191071, 0.44436617, 0.04003207, 0.63754697, 0.54064487,0.21850368, 0.21898398, 0.04014468, 0.7034162, 0.88302645,0.98486437, 0.49786268, 0.51285835, 0.6612078, 0.56787794,0.50721287, 0.19623022, 0.85638691, 0.48618063, 0.18567521,0.88913021, 0.69431064, 0.93382358, 0.67276692, 0.54863178,0.10579433, 0.98286348, 0.35165917, 0.23448677, 0.29648935,0.10789598, 0.49998013, 0.9361374, 0.75317386, 0.43486342,0.80769953, 0.80769388, 0.21807574, 0.71065728, 0.3145199,0.79944788, 0.21436976, 0.35762031, 0.63259239, 0.75828958,0.30457232, 0.80409679, 0.12772526, 0.72852189, 0.28531995,0.53809075, 0.47077106, 0.89844192, 0.09151948, 0.295896,0.06608217, 0.30041084, 0.59264558, 0.18278274, 0.71481017,0.73349423, 0.63910004, 0.1805668, 0.42794294, 0.66640813,0.10011759, 0.8339105, 0.8899515, 0.0204903, 0.83082925,0.16167859, 0.1084775, 0.08764648, 0.04283319, 0.56168718,0.43839174, 0.15378577, 0.57894303, 0.83412371, 0.58554079,0.91285869, 0.45343813, 0.85329645, 0.14302656, 0.44988433,0.4867622, 0.75357062, 0.52176103, 0.5133726, 0.54499947,0.43504809, 0.96107981, 0.04417711, 0.0196092, 0.04109383,0.91570491, 0.12355498, 0.88152901, 0.93166203, 0.63297712,0.79772019, 0.97490328, 0.2464527, 0.51604591, 0.92894091,0.19861353, 0.20755704, 0.40625624, 0.149168, 0.65593418,0.63324095, 0.78998202, 0.75051485, 0.95123914, 0.98196199,0.10278053, 0.94190426, 0.39202465, 0.13520592, 0.22943996,0.94270704, 0.15075147, 0.09564103, 0.20092092, 0.85197965,0.03444406, 0.57425419, 0.57448874, 0.16407501, 0.15468137,0.25195424, 0.67207395, 0.800639, 0.04468875, 0.48668077,0.17931205, 0.68098846, 0.55465569, 0.9636188, 0.00599194,0.34384027, 0.57827374, 0.44672864, 0.01466208, 0.20334486,0.67275521, 0.76163738, 0.32195608, 0.76153517, 0.50600079,0.66014634, 0.85756731, 0.00880733, 0.53660297, 0.87123867,0.76698165, 0.37767577, 0.12434351, 0.70947366, 0.447271,0.50821025, 0.38097231, 0.18152706, 0.68665406, 0.23880804,0.96308565, 0.72520924, 0.1737433, 0.01994009, 0.1577575,0.18259209, 0.71655753, 0.64810776, 0.63843428, 0.68178466,0.753073, 0.69394075, 0.49173586, 0.32589758, 0.09060427,0.61753279, 0.78069734, 0.49450112, 0.25198521, 0.62895277,0.72597254, 0.15455332, 0.7629433, 0.64734588, 0.02746217,0.65400266, 0.61574595, 0.39878742, 0.87404372, 0.06047545,0.81364147, 0.22731861, 0.54995966, 0.5464821, 0.39880774,0.87581717, 0.7005408, 0.17580463, 0.09108557, 0.0336918,0.9846965, 0.80366572, 0.10035151, 0.79445293, 0.50296493,0.71829074, 0.5501811, 0.79924048, 0.91471644, 0.23099974,0.43072984, 0.48501412, 0.97965602, 0.88924545, 0.16575459,0.03751874, 0.69501708, 0.66029445, 0.81478184, 0.45586818,0.18003628, 0.06104158, 0.32815579, 0.88370892, 0.96455002,0.08106909, 0.84131613, 0.95851956, 0.47861126, 0.92377012,0.85697714, 0.82688812, 0.46059535, 0.38269515, 0.53414566,0.4760256, 0.48677947, 0.10277641, 0.77431705, 0.80602077,0.90776698, 0.62437249, 0.59837936, 0.92187428, 0.48972624,0.16347325, 0.93239288, 0.53436321, 0.03909544, 0.90356093,0.00774696, 0.21666649, 0.86130809, 0.42251302, 0.99055218,0.46499285, 0.99107892, 0.79661965, 0.61018298, 0.22696277,0.69064048, 0.17174502, 0.4961765, 0.44929922, 0.79849536,0.61248404, 0.86047777, 0.68834671, 0.17931166, 0.92406998,0.39958129, 0.93410612, 0.27276475, 0.75163789, 0.97138383,0.74627357, 0.17079248, 0.73871989, 0.19846399, 0.52292325,0.0415924, 0.26602402, 0.77551567, 0.84184039, 0.08523323,0.42592545, 0.72509303, 0.24813498, 0.09179675, 0.76155025,0.65764071, 0.67482113, 0.03272824, 0.35398294, 0.16924,0.04916538, 0.76769245, 0.06525553, 0.58112895, 0.41867716,0.04979241, 0.06988181, 0.05894481, 0.13637996, 0.50749872,0.00940988, 0.80220146, 0.49887682, 0.17726638, 0.09781269,0.57137226, 0.21282434, 0.27603366, 0.77620504, 0.53885572,0.98861534, 0.82557043, 0.5237719, 0.72022446, 0.22037382,0.47258302, 0.66282524, 0.72964467, 0.51333454, 0.07664327,0.37108997, 0.02126258, 0.04058917, 0.59714924, 0.62505442,0.52552823, 0.54585957, 0.93317525, 0.7100171, 0.93445153,0.82041482, 0.14225715, 0.97646703, 0.94574407, 0.58013258,0.51736752, 0.34482379, 0.26229635, 0.51470439, 0.85833731,0.24655619, 0.46533712, 0.60916171, 0.51632035, 0.18256433,0.7156256, 0.14056041, 0.47904028, 0.5763794, 0.18573646,0.52828844, 0.93624931, 0.42419151, 0.24382162, 0.10944037,0.37008104, 0.5616106, 0.27581531, 0.76099978, 0.66894628,0.8842965, 0.14958691, 0.77373654, 0.2517328, 0.26487687,0.55077701, 0.48165848, 0.85195934, 0.73442066, 0.42230052,0.87511656, 0.34075427, 0.4925237, 0.71458593, 0.97897412,0.69462974, 0.34151298, 0.35481361, 0.49598947, 0.47202382,0.09774096, 0.18349441, 0.94370245, 0.16848197, 0.08303336,0.64810464, 0.08522701, 0.96265614, 0.01826388, 0.26638955,0.42397384, 0.10592166, 0.57162147, 0.85385624, 0.38289491,0.86274392, 0.25124653, 0.4680087, 0.87085298, 0.01686595,0.62129529, 0.66308038, 0.33846333, 0.69674805, 0.79185675,0.30016012, 0.16582154, 0.34177384, 0.40474822, 0.49714666,0.80699811, 0.5563824, 0.37214899, 0.50430101, 0.73890402,0.0705279, 0.06801757, 0.13410333, 0.65426585, 0.26184745,0.64352034, 0.68305314, 0.04878884, 0.55690808, 0.56699659,0.0372055, 0.13669784, 0.11101834, 0.6909448, 0.06476246,0.97896648, 0.86929492, 0.90931257, 0.57458791, 0.46857193,0.47629876, 0.86039506, 0.51384766, 0.44522409, 0.5639341,0.35592567, 0.39538816, 0.03529208, 0.99023117, 0.10400348,0.51528757, 0.28200507, 0.94161392, 0.73880338, 0.48316527,0.07540438, 0.95638918, 0.14419264, 0.58273835, 0.47633381,0.73750443, 0.61880078, 0.90648933, 0.64564645, 0.06578072,0.75440533, 0.39847912, 0.10303061, 0.81765643, 0.4790099,0.95168607, 0.97719257, 0.64634273, 0.50895458, 0.77893902,0.85570102, 0.23378162, 0.33881269, 0.13095033, 0.93301721,0.62221854, 0.94964839, 0.41096772, 0.17313391, 0.88002917,0.98883134, 0.77868551, 0.28025805, 0.97088778, 0.57959198,0.05787205, 0.50273291, 0.58342041, 0.49323071, 0.73930361,0.32270789, 0.65256522, 0.74109516, 0.75797009, 0.86178508,0.31012871, 0.62488681, 0.03420799, 0.15500381, 0.69907781,0.69203918, 0.05427405, 0.78071248, 0.24478402, 0.0563356,0.6802985, 0.20879766, 0.05472069, 0.98882771, 0.84603348,0.37740309, 0.13827439, 0.09748393, 0.58234602, 0.81766767,0.39610266, 0.19033774, 0.164036, 0.55009339, 0.84050821,0.33580653, 0.29146687, 0.81807037, 0.73472149, 0.80353965,0.34402355, 0.59605975, 0.28211565, 0.98811327, 0.05237239,0.36194079, 0.2451181, 0.29940091, 0.98936832, 0.11020516,0.42140878, 0.86783424, 0.46474922, 0.78143151, 0.22720845]
random_phases = [i*2*np.pi for i in random_phases]

'''fixed UE setup'''
            #    MO     RB       LB      LO       RO      RM      MM       MB      LM
plaatsen_x = [362.319, 595.7, 157.456, 75.149, 635.127, 545.75, 354.62, 365.751, 60.452]
plaatsen_y = [177.642, 559.248, 607.732, 49.53, 99.452, 390.91, 403.956, 617.03, 396.547]
plaatsnaam = ['MO', 'RB', 'LB', 'LO', 'RO', 'RM', 'MM', 'MB', 'LM']
plek = -3
x_setup.append(plaatsen_x[plek])
y_setup.append(plaatsen_y[plek])


'''fixed UE setup'''
# x_setup.extend([184.75, 362.147, 478.3])
# y_setup.extend([148.16, 568.29, 400.6])

'''plotting setup...'''
plt.scatter(x_setup[:-1], y_setup[:-1])
plt.scatter(x_setup[-1], y_setup[-1], color='red')
plt.title(header)
plt.show()

# calculate distances (a: BS -> scatt; b: scatt -> UE)
distances_a = []  # staat vast, dus moet niet op voorhand gegenereerd worden
for m in range(M):
    distances_a_i = []
    for s in range(S):
        z = s + 2
        distances_a_i.append(np.sqrt((x_setup[m] - x_setup[-z]) ** 2 + (y_setup[m] - y_setup[-z]) ** 2))
    distances_a.append(distances_a_i)
# calc channel vector for UE @original place
h = []
for m in range(M):
    contribution = []
    for s in range(S):
        dist_b = np.sqrt((x_setup[-1] - x_setup[-(s + 2)]) ** 2 + (y_setup[-1] - y_setup[-(s + 2)]) ** 2)
        dist = distances_a[m][s] + dist_b
        pathloss = 1/(16 * np.pi**2 * dist)
        phaseshift = 2 * np.pi * ((dist % 1) + random_phases[s])
        contribution.append(pathloss * np.exp(-1j * phaseshift))
    h.append(sum(contribution))
h = np.array(h)
wH = h.conj().T

'''raster'''
y1 = list(range(-100, 105, 10))
x1 = list(range(-100, 105, 10))
y2 = list(range(-500, -100, 10))
x2 = list(range(-500, -100, 10))
y3 = list(range(110, 510, 10))
x3 = list(range(110, 510, 10))
y2.extend(y1)
y2.extend(y3)
x2.extend(x1)
x2.extend(x3)
y = [item * resolution / 10 + y_setup[-1] for item in y2]
x = [item * resolution / 10 + x_setup[-1] for item in x2]
'''centrale plaats antenne: x[int(len(x)/2)], y[int(len(y)/2)]'''
# plt.scatter(x, y)
# plt.scatter(x_setup[-1], y_setup[-1], color='red')
# plt.title(header)
# plt.show()

ampl = np.zeros(shape=(len(x), len(y)))
for a in range(len(x)):
    for b in range(len(y)):
        hdx = []
        for m in range(M):
            contribution = []
            for s in range(S):
                dist_b = np.sqrt((x[b] - x_setup[-(s + 2)]) ** 2 + (y[a] - y_setup[-(s + 2)]) ** 2)
                dist = distances_a[m][s] + dist_b
                pathloss = 1 / (16 * np.pi ** 2 * dist)
                phaseshift = 2 * np.pi * ((dist % 1) + random_phases[s])
                contribution.append(pathloss * np.exp(-1j * phaseshift))
            hdx.append(sum(contribution))
        desired_signal = np.matmul(wH, hdx) / np.sqrt(M)
        #                  * signal_wave
        # sr = [cmath.polar(i) for i in desired_signal]
        # amplitudes = [item[0] if int(item[1]) == 0 else -item[0] for item in sr]
        # ratio_out_vs_rt_ampl = amplitudes[int(len(amplitudes) / 2) + 1] / signal_wave[int(len(signal_wave) / 2) + 1]
        # if ratio_out_vs_rt_ampl < 0:(
        #     ampl[a, b] = -270
        # else:
        ampl[a, b] = abs(desired_signal)
    print(a)

# plt.plot(signal_wave.real)
# plt.plot(amplitudes)
# plt.title('--M=' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(1))
# plt.show()
# # fig = px.imshow(z=ampl, x=x, y=y, color_continuous_scale=px.colors.diverging.Portland)

ma = max([max(i) for i in ampl])
amplis = [20 * np.log10(i/ma) for i in ampl]
mi = -5
fig = go.Figure(data=go.Heatmap(
    z=amplis,
    x=x,
    y=y,
    colorscale='Jet'
    # zmin=-15,
    # zmax=ma
))

fig.add_trace(go.Scatter(
    x=x_setup[M:-1],
    y=y_setup[M:-1],
    mode='markers',
    name='scatterers',
    marker_color='blue',
    marker=dict(size=3)
))

fig.add_trace(go.Scatter(
    x=[x_setup[-1]],
    y=[y_setup[-1]],
    name='antenna',
    mode='markers',
    marker_color='red'
    # text=str(max([max(i) for i in ampl]))
))
fig.add_trace(go.Scatter(
    x=x_setup[:M],
    y=y_setup[:M],
    name='BS',
    mode='markers',
    marker_color='red',
    marker=dict(size=3)
))

fig.update_layout(autosize=False,
                  width=850,
                  height=800,
                  title=header,
                  font=dict(size=10))

plotly.offline.plot(fig,
                    filename='C:/Users/margo/OneDrive/Documenten/Masterproef/simulation/result plots/' + '(' + datetime.datetime.now().strftime(
                        "%Y-%m-%d_%H-%M") + ')-geo_model_clusters--' + titel + '.html')
fig.show()
