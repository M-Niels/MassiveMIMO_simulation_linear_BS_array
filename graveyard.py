import cmath
import datetime
from math import atan
from numpy.random import rand
import numpy as np
import scipy.signal as signal
import random
import matplotlib.pyplot as plt
import scipy.special as bessel
import QAM_generator
import channel_calculation
import plotly.express as px
import functions
import QPSK_generator
import plotly.graph_objects as go
import plotly.io as pio
import plotly


pio.renderers.default = "browser"

M = 100000
dx = 0.01
x = np.array([1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0])
s = QPSK_generator.create_QPSK_signal(x)
f_c = 6 * 10 ** 9
c = 2.9979 * 10 ** 8
lamda = c/f_c
aantal_scatterers = 500
header = 'M='+str(M)+'; #scatt='+str(aantal_scatterers)+'   ('+datetime.datetime.now().strftime("%d-%m-%Y %H:%M")+')'


def rho(x):
    return bessel.j0(2 * np.pi * x)  # Bessel function 1st kind, 0th order


def hd(dx, h):
    e = 0.2 * rand(1)[0] + 0.9  # innovation factor
    return rho(dx) * h + (np.sqrt(1 - (abs(rho(dx))) ** 2) * e)

'''backup plotter'''




'''statinfo & hist'''
# jos = np.array([diepte_gems[i] for i in np.nonzero(diepte_gems)[0]])
# jos_vars = np.array([diepte_varsies[i] for i in np.nonzero(diepte_gems)[0]])
# print(np.average(diepte_gems), np.average(jos), np.var(diepte_gems), np.var(jos), np.average(diepte_varsies), np.average(jos_vars), np.var(diepte_varsies), np.var(jos_vars))

# josfin = np.array([grootte_gems[i] for i in np.nonzero(grootte_gems)[0]])
# josfin_vars = np.array([grootte_varsies[i] for i in np.nonzero(grootte_gems)[0]])
# print(np.average(grootte_gems), np.average(josfin), np.var(grootte_gems), np.var(josfin), np.average(grootte_varsies), np.average(josfin_vars), np.var(grootte_varsies), np.var(josfin_vars))


# count = 0
# for i in josfin:
#     if i<0.3:
#         count +=1
# print(count)


# Bins = plt.hist(diepte_gems,10)
# figtitle = './result plots/' + '(' + datetime.datetime.now().strftime(
#                         "%Y-%m-%d_%H-%M") + ')-geo_model--M=' + str(M) + '_resolution=' + str(
#                         resolution) + '.png'
# plt.ylabel("incidence")
# plt.xlabel("difference in power compared to the centre")
# plt.title(M)
# plt.savefig(figtitle)
# plt.show()


# Bins = plt.hist(grootte_gems,10)
# figtitle = './result plots/' + '(' + datetime.datetime.now().strftime(
#                         "%Y-%m-%d_%H-%M") + ')-geo_model--M=' + str(M) + '_resolution=' + str(
#                         resolution) + '.png'
# plt.ylabel("incidence")
# plt.xlabel("$\Delta$x")
# plt.title(M)
# plt.savefig(figtitle)
# plt.show()

# def stats(ampl,resolution, UE_x, UE_y):
#     UE = ampl[UE_y][UE_x]
#     amplis = [20 * np.log10(i / UE) for i in ampl]
#     '''bubble'''
#     waardes_rand_bubble = []
#     afstand_per_hoek = []
#     for i in range(0, 360):
#         hoek = i * np.pi / 180
#         x_step = np.cos(hoek)
#         # print(x_step)
#         y_step = np.sin(hoek)
#         ix = UE_x
#         ij = UE_y
#         # print(ix, ij)
#         inter = amplis[ij][ix]
#         vorige_waarde = inter
#         afstand = 0
#         while vorige_waarde >= inter:
#             vorige_waarde = inter
#             ix += x_step
#             ij += y_step
#             if ix % 1 != 0 and ij % 1 != 0:
#                 x1 = int(ix)
#                 x2 = x1 + 1
#                 y1 = int(ij)
#                 y2 = y1 + 1
#                 dx = abs(ix - x1)
#                 inter1 = amplis[y1][x1] * (1 - dx) + dx * amplis[y1][x2]
#                 inter2 = amplis[y2][x1] * (1 - dx) + dx * amplis[y2][x2]
#                 dy = abs(ij - y1)
#                 inter = inter1 * (1 - dy) + inter2 * dy
#                 # print('1')
#             elif ix % 1 == 0 and ij % 1 != 0:
#                 y1 = int(ij)
#                 y2 = y1 + 1
#                 dy = abs(ij - y1)
#                 inter = amplis[y1][int(ix)] * (1 - dy) + amplis[y2][int(ix)] * dy
#                 # print('2')
#             elif ij % 1 == 0 and ix % 1 != 0:
#                 x1 = int(ix)
#                 x2 = x1 + 1
#                 dx = abs(ix - x1)
#                 inter = amplis[int(ij)][x1] * (1 - dx) + dx * amplis[int(ij)][x2]
#                 # print('3')
#             else:
#                 inter = amplis[int(ij)][int(ix)]
#             #     print('4')
#             # print(inter)
#             afstand += resolution
#         afstand -= resolution
#         afstand_per_hoek.append(afstand)
#         waardes_rand_bubble.append(vorige_waarde)
#     return ([np.var(afstand_per_hoek), np.average(afstand_per_hoek), np.var(waardes_rand_bubble),np.average(waardes_rand_bubble)])

# aantal_runs = 1000
# for r in range(aantal_runs):
#     UE_x = np.random.randint(10, len(x)-10)
#     UE_y = np.random.randint(10, len(y)-10)
#     print(r,UE_x,UE_y)
#     hq = np.array(HDX[UE_y * len(y) + UE_x])
#     x_setup.append(x[UE_x])
#     y_setup.append(y[UE_y])
#     wHq = hq.conj().T
#     ampl2 = np.zeros(shape=(len(x), len(y)))
#     for a in range(len(y)):
#         for b in range(len(x)):
#             Hdx = np.array(HDX[a * len(y) + b])
#             desired_signal = np.matmul(wHq, Hdx) / np.sqrt(M)
#             ampl2[a, b] = abs(desired_signal)
#     try:
#         grootte_vars, grootte_gem, diepte_vars, diepte_gem = stats(ampl2,resolution, UE_x, UE_y)
#         grootte_varsies.append(grootte_vars)
#         grootte_gems.append(grootte_gem)
#         diepte_varsies.append(diepte_vars)
#         diepte_gems.append(diepte_gem)
#     except IndexError as e:
#         print('FOUT')























































































'''backup geo_model'''
# '''definitions'''
# M = 16
# message_bits = np.array(
#     [1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1])
# signal_wave = QAM_generator.create_QAM_signal(message_bits, 64)
# # noise v:
# # noise = np.random.normal(0, np.sqrt(0.5), (M,len(signal_wave))) + 1j * np.random.normal(0, np.sqrt(0.5), (M,len(signal_wave)))
# # noise x:
# noise = None
# S = 500
# dM = 0.5
# resolution = 0.1
# header = '(' + datetime.datetime.now().strftime("%Y-%m-%d_%H:%M") + ')--M=' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(1) + '_resolution=' + str(
#     resolution)
# print(header)
# opmerking = '(+of-_+)'
#
# # place antennas (line @ x=0)
# y_setup = list(range(40000 - int(dM * 100 * M / 2), 40000 - int(dM * 100 * M / 2) + int(dM * 100 * M), int(dM * 100)))
# y_setup = [i * 0.010 for i in y_setup]
# x_setup = list([0 for i in y_setup])
#
# '''random scatt setup'''
# # # place scatterers (random)
# # x_setup.extend(np.random.randint(250000, 450000, S) / 1000)
# # y_setup.extend(np.random.randint(300000, 500000, S) / 1000)
# # # random phase
# # random_phases = np.random.random(S) * 2 * np.pi
#
# '''a fixed scatt setup'''
# # place scatterers (fixed)
# x_setup.extend(
#     [136.904, 324.208, 372.304, 212.753, 616.319, 513.373, 589.705, 525.047, 484.864, 538.594, 499.258, 110.835,
#       115.315, 236.064, 544.383, 66.021, 272.965, 669.449, 122.29, 566.642, 295.405, 114.352, 259.209, 612.662, 203.166,
#       90.857, 18.275, 206.37, 231.526, 216.672, 174.079, 242.721, 331.709, 239.248, 122.876, 433.624, 417.855, 585.446,
#       682.424, 651.79, 169.733, 284.347, 416.862, 168.557, 328.092, 28.119, 45.147, 617.275, 90.954, 646.08, 337.969,
#       471.871, 698.868, 546.794, 274.186, 387.491, 451.741, 88.846, 589.791, 18.122, 356.255, 54.018, 584.868, 337.57,
#       434.171, 333.598, 393.49, 269.702, 267.907, 510.373, 112.775, 119.559, 445.755, 519.162, 130.22, 588.997, 520.714,
#       454.781, 458.637, 642.786, 325.952, 57.881, 507.118, 247.208, 495.825, 671.144, 40.248, 323.388, 1.025, 221.4,
#       447.64, 327.338, 605.968, 371.518, 496.838, 227.601, 647.208, 622.315, 517.802, 63.759, 19.094, 385.701, 549.413,
#       570.511, 515.346, 235.257, 137.867, 638.515, 331.698, 680.446, 645.178, 304.417, 680.154, 110.715, 286.047,
#       486.166, 487.974, 135.729, 604.651, 568.487, 212.926, 17.506, 271.266, 219.229, 570.959, 596.891, 13.415, 684.413,
#       214.72, 563.859, 577.021, 249.689, 321.701, 10.718, 610.002, 353.747, 593.27, 392.984, 388.873, 380.876, 600.803,
#       263.679, 325.251, 60.873, 439.202, 400.512, 580.556, 391.437, 549.887, 86.23, 166.866, 515.734, 253.437, 152.785,
#       489.748, 694.288, 532.801, 317.6, 50.193, 685.889, 560.875, 161.76, 422.744, 364.383, 554.391, 447.738, 129.043,
#       577.847, 689.983, 8.836, 428.706, 335.81, 105.527, 97.203, 571.981, 671.844, 562.973, 221.606, 636.106, 110.035,
#       699.176, 277.163, 222.081, 325.943, 285.411, 636.263, 197.87, 416.336, 67.464, 415.67, 291.013, 33.061, 8.918,
#       49.858, 328.564, 54.573, 4.344, 50.347, 51.743, 496.179, 367.074, 64.579, 333.207, 656.409, 27.387, 47.638,
#       532.379, 165.86, 215.765, 91.726, 135.333, 228.438, 604.363, 134.16, 72.727, 633.675, 272.935, 563.061, 104.248,
#       635.887, 2.446, 535.386, 438.3, 194.888, 42.854, 409.752, 329.598, 360.081, 490.211, 231.422, 337.353, 201.797,
#       661.326, 40.502, 372.725, 205.558, 554.416, 625.857, 90.783, 596.917, 566.918, 124.526, 550.8, 338.193, 42.292,
#       88.566, 573.769, 68.553, 112.874, 97.028, 466.31, 200.83, 18.976, 545.632, 45.346, 0.094, 282.81, 447.611, 316.319,
#       560.398, 235.53, 240.622, 566.873, 289.45, 40.713, 28.413, 25.137, 458.19, 404.477, 323.798, 474.824, 215.766,
#       13.485, 462.984, 78.914, 118.746, 601.227, 43.007, 501.819, 471.749, 35.439, 87.112, 693.91, 502.595, 462.05,
#       172.686, 618.918, 484.401, 62.131, 439.691, 543.779, 322.187, 516.889, 159.758, 393.162, 678.431, 474.206, 348.753,
#       258.891, 671.065, 552.634, 441.636, 596.079, 98.259, 37.101, 488.444, 325.822, 626.88, 389.8, 548.068, 659.083,
#       146.503, 313.935, 30.201, 393.431, 455.945, 192.804, 125.254, 541.352, 12.559, 84.726, 587.429, 184.954, 401.679,
#       97.143, 651.125, 674.624, 209.206, 628.735, 671.423, 458.045, 249.327, 81.821, 144.69, 51.464, 30.813, 534.918,
#       228.721, 95.974, 175.725, 522.205, 351.513, 535.366, 624.434, 568.804, 296.052, 97.85, 237.518, 375.766, 682.837,
#       240.971, 81.808, 691.311, 617.623, 461.701, 545.279, 433.362, 318.413, 40.574, 627.943, 493.492, 59.65, 402.257,
#       474.253, 196.94, 48.395, 574.78, 225.859, 354.207, 47.021, 470.63, 308.343, 671.506, 496.394, 238.423, 119.999,
#       427.714, 89.063, 278.972, 574.778, 376.375, 607.685, 622.338, 235.663, 149.953, 69.949, 386.778, 297.638, 255.017,
#       387.466, 459.045, 635.096, 655.183, 338.452, 455.4, 137.018, 545.425, 449.75, 517.021, 43.893, 108.885, 152.785,
#       493.993, 537.661, 559.509, 358.183, 516.634, 107.621, 346.359, 435.643, 210.503, 313.497, 460.402, 427.947,
#       229.205, 595.543, 176.33, 280.388, 591.397, 486.547, 650.703, 440.446, 135.665, 245.497, 125.99, 591.799, 163.427,
#       363.518, 31.023, 386.795, 34.271, 157.464, 259.414, 649.807, 440.04, 654.22, 679.197, 624.405, 118.158, 259.204,
#       589.181, 261.432, 651.433, 454.975, 248.654, 409.516, 405.541, 362.911, 141.79, 646.825, 553.163, 176.27, 338.022,
#       174.474, 62.466, 80.166, 1.662, 541.685, 382.686, 652.131, 86.854, 648.679, 253.423, 614.786, 5.51, 460.175,
#       469.066, 58.409, 386.246, 463.714, 86.54, 460.672, 548.995, 63.607, 221.624, 493.55, 204.84, 679.582, 269.726,
#       347.996, 568.991, 698.238, 380.927, 696.539, 534.114, 76.426, 496.234, 433.766, 468.687, 269.405, 368.645, 342.771,
#       123.369, 362.986, 237.484, 39.134, 523.858, 563.845, 226.828, 152.131, 410.704, 465.316, 610.336, 1.643, 159.716,
#       269.198, 451.924, 274.02, 208.46, 463.127, 620.05, 82.754, 235.556, 545.612, 692.432, 525.942, 567.515, 628.756,
#       142.38, 416.931, 9.682, 355.944, 452.317, 213.84, 96.103, 28.68, 294.57, 202.264, 372.823, 26.168, 682.238,
#       636.673, 651.951, 611.198, 637.095, 668.506, 364.819, 244.448, 169.986, 302.057, 328.655, 137.511, 544.487, 42.146,
#       671.245, 598.855, 519.906, 165.888, 449.657, 478.559, 346.12, 312.175, 674.873, 397.358, 202.93, 149.896, 560.757,
#       669.873, 277.636, 429.665, 51.083, 64.401, 523.109, 494.169, 238.109, 278.305, 686.836, 525.911, 525.992, 530.726,
#       348.717, 698.055, 55.839, 582.527, 532.197, 632.384, 688.333, 584.233, 256.479, 451.483, 440.962, 459.016, 8.501,
#       37.502, 2.647, 625.91, 80.601, 534.618, 519.635, 642.368, 152.239, 491.556, 428.26, 132.554, 535.144, 506.652,
#       125.692, 332.832, 9.003, 378.662, 665.133, 327.107, 572.812, 491.72, 81.959, 441.653, 342.855, 7.299, 367.383,
#       627.269, 8.868, 223.148, 569.975, 211.76, 324.491, 193.638, 571.227, 457.913, 205.653, 445.799, 514.183, 519.01,
#       633.577, 376.101, 563.672, 340.407, 367.397, 95.848, 495.849, 20.059, 442.913, 677.953, 162.668, 24.494, 535.09,
#       88.732, 507.225, 441.898, 68.511, 143.923, 92.602, 221.153, 406.081, 175.983, 176.566, 97.574, 296.727, 249.642,
#       17.155, 656.574, 568.765, 589.541, 327.271, 428.389, 156.569, 429.165, 177.847, 647.341, 99.391, 653.927, 566.099,
#       388.814, 450.418, 298.141, 291.211, 177.135, 149.652, 365.211, 201.896, 383.144, 215.076, 150.205, 577.629,
#       333.259, 98.335, 434.655, 268.387, 94.523, 336.506, 663.641, 570.508, 520.647, 280.629, 62.942, 92.925, 189.531,
#       323.336, 519.824, 565.311, 158.403, 288.919, 203.967, 313.376, 204.614, 656.43, 204.489, 656.561, 600.304, 495.457,
#       236.736, 197.117, 320.082, 266.24, 554.2, 6.103, 244.102, 503.773, 430.264, 22.478, 344.352, 376.68, 519.669,
#       142.939, 480.018, 531.688, 436.421, 546.312, 239.544, 692.279, 117.822, 87.983, 146.069, 440.225, 453.301, 282.141,
#       676.628, 35.22, 625.437, 551.434, 276.971, 634.743, 33.651, 57.985, 394.06, 130.541, 562.422, 421.139, 111.001,
#       381.333, 193.494, 421.124, 433.224, 140.294, 674.34, 27.941, 491.561, 467.725, 493.485, 19.771, 27.666, 516.795,
#       248.895, 401.39, 429.439, 446.837, 277.137, 125.778, 207.169, 47.774, 333.502, 546.037, 564.353, 133.296, 454.95,
#       308.004, 237.793, 101.503, 181.689, 223.549, 176.617, 689.084, 249.535, 626.393, 487.154, 167.202, 320.73, 633.807,
#       464.109, 699.312, 631.309, 604.249, 33.871, 515.503, 80.52, 323.995, 192.843, 67.155, 13.507, 68.424, 389.838,
#       679.387, 89.367, 168.668, 498.603, 9.498, 206.07, 425.562, 76.794, 424.529, 44.945, 139.041, 474.713, 398.466,
#       323.289, 664.261, 534.917, 666.815, 110.289, 543.128, 450.485, 44.323, 640.996, 463.487, 313.09, 468.197, 137.509,
#       32.85, 523.862, 397.745, 227.004, 158.747, 385.42, 599.902, 400.779, 231.802, 560.686, 654.022, 307.869, 499.214,
#       87.033, 127.571, 484.315, 38.523, 445.737, 220.621, 625.33, 16.318, 24.76, 68.171, 108.338, 102.19, 664.794,
#       513.747, 365.313, 445.555, 678.058, 116.667, 264.229, 156.195, 561.312, 548.94, 577.315, 498.289, 312.723, 390.411,
#       221.441, 295.409, 160.44, 179.505, 114.77, 544.35, 200.441, 621.258, 85.22, 54.08, 510.711, 111.263, 9.019, 82.333,
#       627.064, 508.22, 574.094, 492.062, 305.345, 639.357, 407.679, 585.032, 626.526, 667.121, 238.953, 362.581, 130.56,
#       341.909, 17.85, 421.641, 77.899, 692.01, 504.924, 536.67, 499.769, 72.747, 502.766, 75.354, 84.953, 458.402,
#       54.036, 151.316, 329.756, 169.11, 553.856, 358.488, 215.333, 198.327, 674.727, 54.952, 341.97, 548.606, 361.305,
#       680.474, 293.118, 680.06, 28.598, 181.564, 593.949, 147.439, 398.383, 166.511, 285.656, 19.724, 401.01, 585.226,
#       223.169, 104.77, 418.563, 365.063, 214.693, 43.265, 394.913, 539.453, 372.103, 329.001, 626.524, 588.682, 569.43,
#       695.742, 650.405, 601.469, 587.919, 295.834, 43.625, 248.535, 642.28, 654.939, 621.497, 168.8, 117.214, 313.133,
#       251.267, 264.042, 664.738, 518.861, 275.06, 360.41, 524.216, 524.857, 482.086, 186.342, 201.422, 581.64, 357.524,
#       144.191, 69.787, 72.581, 34.855, 147.679, 19.97, 136.061, 477.243, 310.467, 538.869, 255.994, 33.232, 107.357,
#       656.498, 61.484, 161.413, 384.746, 339.392, 413.717, 97.307, 329.677, 569.769, 396.569, 307.58, 578.766, 198.618,
#       178.094, 453.233, 87.481, 350.801, 300.544, 333.179, 246.252, 46.208, 536.706, 116.112, 236.724, 114.908, 102.1,
#       403.057, 261.319])
# y_setup.extend(
#     [379.033, 672.871, 455.867, 680.98, 42.134, 188.184, 504.89, 634.655, 496.932, 623.65, 247.083, 405.661, 622.491,
#       674.211, 86.786, 350.438, 295.366, 460.69, 87.577, 676.61, 179.927, 493.366, 574.442, 574.976, 33.43, 279.476,
#       26.987, 479.001, 12.423, 340.564, 586.854, 78.247, 454.672, 177.2, 389.305, 693.428, 123.316, 592.967, 243.087,
#       301.146, 162.686, 330.611, 527.285, 397.695, 204.971, 683.649, 514.546, 179.83, 527.03, 644.308, 610.485, 517.692,
#       668.405, 247.895, 650.694, 370.607, 468.195, 644.474, 66.135, 578.946, 317.854, 331.506, 2.938, 365.347, 397.012,
#       189.649, 351.617, 282.849, 401.48, 422.254, 358.637, 287.527, 201.885, 534.421, 44.407, 611.717, 615.968, 450.467,
#       248.975, 273.296, 412.916, 668.351, 391.159, 575.022, 697.618, 250.063, 276.567, 190.568, 479.276, 357.103,
#       247.927, 174.511, 670.961, 445.223, 689.219, 543.402, 136.566, 430.415, 617.528, 301.942, 323.91, 558.82, 549.423,
#       305.65, 602.868, 327.84, 120.067, 391.551, 210.804, 35.33, 77.674, 277.867, 75.804, 114.333, 687.547, 414.774,
#       236.302, 173.579, 243.879, 76.618, 692.939, 177.783, 645.156, 162.495, 498.337, 484.882, 249.909, 0.711, 60.548,
#       600.432, 453.15, 399.295, 652.835, 535.07, 642.857, 298.112, 537.415, 409.941, 125.536, 253.23, 515.893, 169.161,
#       222.255, 695.336, 81.799, 326.909, 587.759, 79.285, 212.4, 404.79, 673.727, 209.2, 227.512, 245.297, 570.671,
#       651.903, 79.56, 321.161, 517.679, 319.292, 545.777, 222.357, 381.239, 522.329, 645.768, 422.09, 122.665, 256.376,
#       274.461, 210.604, 11.145, 454.262, 418.332, 614.248, 313.489, 343.883, 5.971, 211.166, 522.504, 103.409, 99.575,
#       119.153, 214.799, 6.18, 377.24, 356.881, 615.988, 255.747, 672.505, 358.376, 404.408, 83.711, 655.327, 109.08,
#       324.029, 429.56, 683.366, 566.195, 681.026, 286.642, 337.29, 451.697, 665.891, 11.395, 589.074, 509.933, 691.602,
#       338.413, 5.855, 543.778, 151.951, 422.031, 442.924, 70.074, 95.297, 603.647, 513.541, 329.0, 564.043, 632.274,
#       333.051, 417.54, 685.776, 685.387, 672.418, 403.283, 365.772, 527.438, 459.674, 618.45, 238.611, 18.642, 561.086,
#       106.523, 584.787, 243.109, 199.735, 170.417, 91.419, 328.411, 659.457, 138.692, 369.508, 493.629, 696.762, 135.578,
#       124.632, 625.847, 257.897, 76.164, 474.704, 224.14, 158.454, 120.834, 301.485, 365.632, 663.201, 428.086, 23.432,
#       188.455, 160.51, 639.933, 411.996, 425.464, 20.699, 137.854, 204.234, 82.259, 139.64, 256.857, 95.097, 278.059,
#       442.337, 610.335, 354.722, 169.793, 88.636, 398.601, 403.099, 247.207, 297.641, 361.797, 601.661, 412.736, 287.935,
#       388.207, 354.615, 467.562, 91.671, 317.675, 5.22, 546.958, 376.913, 292.864, 412.894, 341.552, 589.625, 683.455,
#       548.555, 273.375, 508.066, 286.43, 290.563, 218.282, 236.061, 640.923, 671.102, 382.945, 455.867, 117.961, 587.143,
#       45.198, 283.656, 625.75, 295.095, 32.268, 574.117, 78.412, 83.288, 255.547, 77.542, 331.729, 120.961, 257.22,
#       281.792, 542.58, 72.426, 699.335, 390.324, 575.764, 220.938, 645.482, 390.762, 420.104, 445.308, 422.458, 375.051,
#       12.944, 1.284, 197.622, 287.571, 21.117, 585.958, 361.325, 569.287, 172.38, 49.639, 110.89, 572.498, 110.322,
#       71.093, 164.27, 225.194, 390.711, 241.713, 670.169, 282.385, 227.257, 167.624, 572.737, 508.877, 179.737, 542.489,
#       299.881, 485.292, 342.351, 426.795, 420.921, 244.375, 138.856, 146.126, 505.455, 620.853, 698.542, 465.568,
#       518.723, 693.901, 279.365, 441.73, 641.033, 508.19, 590.668, 217.423, 242.385, 233.04, 264.126, 178.144, 313.869,
#       25.689, 63.96, 317.551, 189.522, 266.201, 337.021, 552.873, 399.102, 81.933, 588.723, 217.604, 353.474, 368.767,
#       573.271, 574.342, 29.681, 96.087, 76.105, 533.156, 161.447, 261.603, 154.78, 4.014, 125.576, 685.963, 173.883,
#       175.491, 294.369, 219.493, 209.778, 187.958, 590.472, 567.581, 315.81, 250.341, 185.713, 152.66, 490.621, 487.255,
#       674.074, 325.406, 203.521, 89.187, 344.601, 586.892, 40.293, 670.319, 94.169, 691.157, 77.85, 9.144, 151.599,
#       499.457, 181.051, 175.801, 69.329, 605.603, 31.039, 555.259, 54.798, 677.438, 123.852, 323.816, 658.617, 100.836,
#       588.684, 85.805, 676.345, 216.419, 91.81, 653.208, 260.716, 233.886, 518.327, 193.179, 580.948, 629.847, 649.552,
#       377.485, 461.47, 671.851, 347.296, 566.963, 7.269, 296.904, 512.672, 699.289, 236.318, 430.323, 254.619, 401.38,
#       234.203, 599.45, 54.813, 667.576, 170.736, 666.918, 446.696, 484.019, 220.415, 524.829, 650.434, 406.922, 464.303,
#       648.955, 219.873, 165.524, 388.819, 285.492, 339.886, 178.905, 388.693, 25.404, 227.41, 277.031, 2.179, 304.443,
#       365.354, 26.589, 81.233, 683.861, 468.41, 132.489, 372.229, 227.045, 613.419, 439.864, 431.27, 151.778, 407.153,
#       423.587, 321.873, 429.841, 289.826, 534.041, 71.045, 664.191, 568.8, 588.603, 609.669, 414.091, 398.59, 353.325,
#       642.232, 598.551, 641.154, 438.924, 457.433, 476.993, 3.516, 626.86, 277.667, 526.699, 662.568, 220.757, 13.956,
#       315.561, 199.543, 257.348, 570.886, 569.193, 503.752, 645.551, 261.713, 138.453, 251.815, 641.276, 420.998,
#       367.472, 213.933, 505.425, 478.826, 618.737, 84.676, 518.992, 61.545, 400.936, 109.091, 336.456, 616.477, 613.228,
#       628.439, 51.506, 516.635, 176.583, 262.667, 647.305, 542.458, 567.849, 164.832, 690.385, 398.428, 392.08, 154.69,
#       277.992, 691.458, 259.604, 338.931, 290.851, 34.903, 227.043, 37.821, 620.799, 341.729, 505.215, 93.689, 312.42,
#       406.645, 183.08, 534.457, 17.891, 296.079, 604.503, 460.578, 250.744, 1.187, 614.587, 526.034, 325.663, 412.263,
#       69.153, 318.731, 288.575, 331.601, 615.532, 691.539, 375.523, 259.617, 334.199, 365.063, 403.853, 288.016, 227.18,
#       199.978, 432.645, 594.095, 598.482, 450.012, 397.57, 43.755, 174.535, 493.791, 496.013, 262.961, 584.911, 44.731,
#       126.6, 25.924, 387.995, 626.333, 511.526, 326.147, 267.118, 555.579, 518.326, 169.681, 215.309, 73.13, 590.239,
#       251.118, 376.469, 104.71, 673.334, 455.786, 204.115, 451.908, 483.034, 696.651, 248.963, 510.048, 100.353, 594.959,
#       606.561, 299.865, 185.248, 433.199, 462.139, 189.405, 510.681, 637.618, 139.669, 279.819, 24.886, 573.645, 79.358,
#       541.197, 26.14, 167.643, 4.973, 499.77, 572.238, 43.604, 241.965, 488.882, 112.385, 215.375, 513.111, 601.035,
#       392.227, 126.215, 425.436, 432.649, 264.531, 596.101, 477.794, 142.671, 69.408, 538.077, 657.089, 123.505, 236.113,
#       55.033, 526.907, 452.199, 515.517, 542.594, 463.98, 577.251, 236.88, 232.652, 591.296, 67.925, 311.334, 491.839,
#       366.169, 419.6, 648.651, 61.084, 345.916, 127.665, 182.819, 145.699, 594.986, 415.486, 214.448, 266.579, 234.294,
#       98.067, 591.626, 259.93, 578.894, 666.208, 24.531, 200.317, 611.611, 402.054, 55.641, 639.078, 438.677, 696.168,
#       347.291, 186.57, 289.453, 76.392, 361.514, 450.209, 296.281, 642.921, 427.9, 255.155, 370.034, 528.403, 430.76,
#       652.924, 604.128, 463.518, 127.647, 101.106, 5.306, 16.512, 432.963, 323.501, 307.036, 663.089, 132.679, 200.948,
#       489.765, 410.46, 219.36, 402.406, 679.422, 115.289, 387.936, 226.686, 580.627, 357.337, 637.371, 274.783, 518.625,
#       328.152, 94.184, 579.439, 686.824, 377.449, 88.837, 570.82, 531.459, 119.388, 207.512, 696.68, 668.176, 308.43,
#       124.058, 465.204, 414.581, 93.088, 359.083, 103.52, 331.486, 511.771, 203.223, 418.745, 474.226, 25.203, 338.822,
#       676.44, 575.479, 479.964, 227.907, 666.351, 433.131, 581.641, 0.74, 414.752, 558.96, 345.206, 179.388, 350.544,
#       541.547, 60.693, 416.726, 630.949, 163.756, 247.959, 593.454, 601.335, 171.198, 506.955, 358.644, 503.247, 122.846,
#       435.054, 656.795, 75.284, 40.506, 303.291, 635.08, 407.682, 533.631, 4.482, 357.788, 440.869, 646.69, 117.445,
#       217.118, 268.667, 439.498, 440.381, 163.107, 46.658, 625.538, 82.437, 673.081, 246.818, 274.749, 539.186, 422.519,
#       320.578, 612.736, 295.54, 157.775, 254.45, 278.485, 356.627, 468.356, 314.242, 140.312, 526.852, 115.408, 358.416,
#       164.696, 466.19, 343.57, 190.226, 73.626, 591.026, 306.666, 105.166, 599.374, 433.018, 511.643, 425.292, 431.143,
#       57.027, 31.216, 105.378, 210.894, 618.592, 42.89, 691.146, 599.061, 7.324, 327.25, 287.594, 655.648, 535.092,
#       424.668, 385.188, 273.684, 477.785, 543.363, 44.104, 104.879, 546.391, 519.753, 470.535, 160.682, 503.698, 170.607,
#       300.36, 20.448, 630.564, 35.45, 169.14, 668.574, 585.276, 672.214, 157.892, 235.547, 479.29, 356.535, 426.157,
#       295.532, 651.864, 50.638, 423.855, 384.811, 59.757, 74.069, 395.489, 665.722, 364.454, 675.94, 484.997, 610.04,
#       317.067, 265.523, 205.517, 290.653, 150.417, 269.099, 238.041, 576.853, 636.151, 537.983, 639.838, 273.692, 275.23,
#       272.056, 225.07, 219.352, 666.58, 425.324, 206.241, 137.564, 432.85, 454.144, 646.294, 295.266, 35.531, 523.965,
#       123.428, 559.091, 2.843, 264.27, 387.754, 427.313, 599.264, 165.599, 478.212, 235.026, 73.152, 377.291, 394.087,
#       507.458, 499.123, 465.485, 263.652, 356.482, 218.142, 0.226, 343.272, 473.894, 573.173, 325.75, 675.782, 274.672,
#       628.342, 322.077, 21.873, 142.144, 20.643, 548.869, 356.868, 148.416, 372.402, 495.626, 58.299, 651.793, 497.18,
#       211.462, 43.906, 214.642])
# random_phases = [0.05611822, 0.43566513, 0.83744167, 0.7805519, 0.58480271, 0.98632399, 0.21289288, 0.88825089, 0.89471252, 0.83427997,0.78845038, 0.3128224, 0.13673235, 0.70392962, 0.10676477,0.92804575, 0.77477041, 0.69204264, 0.30840359, 0.70426323,0.99239314, 0.12830945, 0.02303761, 0.59198878, 0.0139303,0.67193313, 0.42960773, 0.73948876, 0.10265943, 0.71412981,0.58715803, 0.64117483, 0.98987275, 0.52638028, 0.19009048,0.85406847, 0.99697084, 0.91986392, 0.69590401, 0.78741582,0.55262245, 0.66993345, 0.46476929, 0.07975967, 0.68366236,0.65341863, 0.99545799, 0.73923697, 0.49663295, 0.14540705,0.94225074, 0.91629562, 0.06163607, 0.31173731, 0.38404732,0.42920858, 0.08568909, 0.63929926, 0.69571079, 0.35679112,0.33732748, 0.93427738, 0.08720886, 0.07489865, 0.38708205,0.20333509, 0.30598261, 0.43755, 0.52126149, 0.12248786,0.82630353, 0.04486331, 0.67329838, 0.19651202, 0.81702925,0.40643033, 0.45756734, 0.3546435, 0.83290001, 0.64115585,0.4128956, 0.16231792, 0.55293031, 0.07936797, 0.57266972,0.43556995, 0.88779605, 0.38416812, 0.55177933, 0.80134576,0.96120955, 0.39598014, 0.55703053, 0.31715457, 0.2755024,0.27465744, 0.57144621, 0.03680888, 0.77858364, 0.6445758,0.48576065, 0.85279218, 0.71343879, 0.06143578, 0.79698416,0.70499022, 0.7346376, 0.9808139, 0.8419244, 0.60356538,0.14659023, 0.55406393, 0.51747776, 0.06492984, 0.97759453,0.88470716, 0.66790477, 0.86871431, 0.3098369, 0.01732207,0.832486, 0.02195267, 0.45787201, 0.25457237, 0.87317976,0.48113053, 0.07728467, 0.53516176, 0.87691402, 0.31901427,0.9606729, 0.87093124, 0.82599772, 0.31238568, 0.86188987,0.41232429, 0.51346025, 0.69290827, 0.589703, 0.11602877,0.9376607, 0.09355357, 0.82709098, 0.35494112, 0.8535295,0.20976736, 0.43236686, 0.31192189, 0.0583658, 0.60092217,0.81329817, 0.88703335, 0.24310225, 0.95820501, 0.41391461,0.8309761, 0.49493163, 0.91180181, 0.25513225, 0.04288238,0.00213658, 0.13087853, 0.62489146, 0.32371426, 0.32092686,0.62078732, 0.10494032, 0.52122615, 0.7044578, 0.93632871,0.9037106, 0.45444446, 0.57071333, 0.46483063, 0.69386835,0.70043527, 0.05344983, 0.78680448, 0.08645273, 0.80106818,0.82550493, 0.63075509, 0.06808681, 0.29092075, 0.24740294,0.12848159, 0.88660763, 0.98017541, 0.94921247, 0.96629287,0.93816554, 0.97465697, 0.11063612, 0.72420847, 0.11098571,0.72285507, 0.83547351, 0.60094248, 0.28714812, 0.73278494,0.857276, 0.29242465, 0.48172037, 0.24735069, 0.28198754,0.7659901, 0.61708581, 0.3613735, 0.31247919, 0.15172179,0.36109169, 0.82181439, 0.8820665, 0.26325453, 0.47604018,0.01715241, 0.11457832, 0.87180942, 0.92391596, 0.12604755,0.0154288, 0.0333111, 0.44527411, 0.83457362, 0.66590078,0.18068308, 0.44856497, 0.25636334, 0.95386726, 0.68062703,0.12190918, 0.21707271, 0.62101185, 0.83495504, 0.11588408,0.20640155, 0.88978372, 0.98453291, 0.80785746, 0.08982229,0.34786718, 0.23378679, 0.88423865, 0.6179368, 0.96592027,0.76899012, 0.06609793, 0.68894801, 0.41538421, 0.38487572,0.70489309, 0.81126274, 0.48585147, 0.45915551, 0.10114399,0.10895441, 0.88529921, 0.11736701, 0.63088306, 0.81568947,0.09062932, 0.00106475, 0.02809005, 0.14078203, 0.13141917,0.75838919, 0.91332812, 0.13895342, 0.61410345, 0.32567558,0.35655016, 0.25029589, 0.39117783, 0.04437546, 0.04992325,0.8946942, 0.59456985, 0.21362942, 0.56280241, 0.71469092,0.73335919, 0.26542184, 0.16973036, 0.25235402, 0.2688513,0.94527344, 0.09027511, 0.23025038, 0.20549277, 0.40235719,0.28249545, 0.06480564, 0.85117662, 0.94550364, 0.16250687,0.55976546, 0.30699317, 0.23435153, 0.02915379, 0.61969999,0.38458318, 0.78422174, 0.76516972, 0.23238107, 0.88784612,0.04542595, 0.92319375, 0.55200017, 0.06190055, 0.09290128,0.91389614, 0.0779164, 0.86325163, 0.38036505, 0.53532355,0.3342375, 0.64427826, 0.74732689, 0.6755753, 0.49869146,0.97704051, 0.43253489, 0.8519127, 0.87235818, 0.51242127,0.81040613, 0.78042298, 0.50744561, 0.88145647, 0.35865041,0.13974482, 0.93329779, 0.92599387, 0.96258815, 0.0621183,0.29128182, 0.24511147, 0.07127766, 0.76886231, 0.84594537,0.33681244, 0.65399569, 0.39017183, 0.77869056, 0.82948547,0.14085059, 0.890259, 0.60774298, 0.63867083, 0.06097369,0.75476028, 0.78400877, 0.76913773, 0.74738697, 0.26637277,0.02179153, 0.93286018, 0.70352748, 0.22910974, 0.8072704,0.60586787, 0.03828207, 0.29505837, 0.36617541, 0.79187773,0.60592106, 0.96204551, 0.10583225, 0.3580479, 0.69148724,0.09760451, 0.7581941, 0.84901651, 0.64277722, 0.24965145,0.26092441, 0.50821415, 0.57247826, 0.52401868, 0.58181735,0.52856102, 0.10293431, 0.37763806, 0.69900297, 0.31664085,0.84217329, 0.27563615, 0.76612871, 0.12964449, 0.92044335,0.96391533, 0.51248181, 0.49852073, 0.95636256, 0.51138358,0.2967324, 0.48251211, 0.71593555, 0.07290982, 0.25604541,0.89645711, 0.67102453, 0.54045457, 0.32209054, 0.31752937,0.86501375, 0.77783593, 0.1000935, 0.44627097, 0.65351275,0.68886045, 0.26337907, 0.74935341, 0.67293962, 0.72822559,0.35091786, 0.38834607, 0.26251485, 0.73681474, 0.97876088,0.62012634, 0.67017218, 0.73238011, 0.26732551, 0.60998608,0.09416289, 0.0110021, 0.59937587, 0.70054669, 0.86908333,0.34424995, 0.93067555, 0.0567276, 0.04695297, 0.35450995,0.77996842, 0.36385496, 0.76475693, 0.64965367, 0.44279724,0.38486247, 0.68087067, 0.4309681, 0.35455598, 0.80248598,0.09458051, 0.68946495, 0.96590717, 0.66792569, 0.61045951,0.45191071, 0.44436617, 0.04003207, 0.63754697, 0.54064487,0.21850368, 0.21898398, 0.04014468, 0.7034162, 0.88302645,0.98486437, 0.49786268, 0.51285835, 0.6612078, 0.56787794,0.50721287, 0.19623022, 0.85638691, 0.48618063, 0.18567521,0.88913021, 0.69431064, 0.93382358, 0.67276692, 0.54863178,0.10579433, 0.98286348, 0.35165917, 0.23448677, 0.29648935,0.10789598, 0.49998013, 0.9361374, 0.75317386, 0.43486342,0.80769953, 0.80769388, 0.21807574, 0.71065728, 0.3145199,0.79944788, 0.21436976, 0.35762031, 0.63259239, 0.75828958,0.30457232, 0.80409679, 0.12772526, 0.72852189, 0.28531995,0.53809075, 0.47077106, 0.89844192, 0.09151948, 0.295896,0.06608217, 0.30041084, 0.59264558, 0.18278274, 0.71481017,0.73349423, 0.63910004, 0.1805668, 0.42794294, 0.66640813,0.10011759, 0.8339105, 0.8899515, 0.0204903, 0.83082925,0.16167859, 0.1084775, 0.08764648, 0.04283319, 0.56168718,0.43839174, 0.15378577, 0.57894303, 0.83412371, 0.58554079,0.91285869, 0.45343813, 0.85329645, 0.14302656, 0.44988433,0.4867622, 0.75357062, 0.52176103, 0.5133726, 0.54499947,0.43504809, 0.96107981, 0.04417711, 0.0196092, 0.04109383,0.91570491, 0.12355498, 0.88152901, 0.93166203, 0.63297712,0.79772019, 0.97490328, 0.2464527, 0.51604591, 0.92894091,0.19861353, 0.20755704, 0.40625624, 0.149168, 0.65593418,0.63324095, 0.78998202, 0.75051485, 0.95123914, 0.98196199,0.10278053, 0.94190426, 0.39202465, 0.13520592, 0.22943996,0.94270704, 0.15075147, 0.09564103, 0.20092092, 0.85197965,0.03444406, 0.57425419, 0.57448874, 0.16407501, 0.15468137,0.25195424, 0.67207395, 0.800639, 0.04468875, 0.48668077,0.17931205, 0.68098846, 0.55465569, 0.9636188, 0.00599194,0.34384027, 0.57827374, 0.44672864, 0.01466208, 0.20334486,0.67275521, 0.76163738, 0.32195608, 0.76153517, 0.50600079,0.66014634, 0.85756731, 0.00880733, 0.53660297, 0.87123867,0.76698165, 0.37767577, 0.12434351, 0.70947366, 0.447271,0.50821025, 0.38097231, 0.18152706, 0.68665406, 0.23880804,0.96308565, 0.72520924, 0.1737433, 0.01994009, 0.1577575,0.18259209, 0.71655753, 0.64810776, 0.63843428, 0.68178466,0.753073, 0.69394075, 0.49173586, 0.32589758, 0.09060427,0.61753279, 0.78069734, 0.49450112, 0.25198521, 0.62895277,0.72597254, 0.15455332, 0.7629433, 0.64734588, 0.02746217,0.65400266, 0.61574595, 0.39878742, 0.87404372, 0.06047545,0.81364147, 0.22731861, 0.54995966, 0.5464821, 0.39880774,0.87581717, 0.7005408, 0.17580463, 0.09108557, 0.0336918,0.9846965, 0.80366572, 0.10035151, 0.79445293, 0.50296493,0.71829074, 0.5501811, 0.79924048, 0.91471644, 0.23099974,0.43072984, 0.48501412, 0.97965602, 0.88924545, 0.16575459,0.03751874, 0.69501708, 0.66029445, 0.81478184, 0.45586818,0.18003628, 0.06104158, 0.32815579, 0.88370892, 0.96455002,0.08106909, 0.84131613, 0.95851956, 0.47861126, 0.92377012,0.85697714, 0.82688812, 0.46059535, 0.38269515, 0.53414566,0.4760256, 0.48677947, 0.10277641, 0.77431705, 0.80602077,0.90776698, 0.62437249, 0.59837936, 0.92187428, 0.48972624,0.16347325, 0.93239288, 0.53436321, 0.03909544, 0.90356093,0.00774696, 0.21666649, 0.86130809, 0.42251302, 0.99055218,0.46499285, 0.99107892, 0.79661965, 0.61018298, 0.22696277,0.69064048, 0.17174502, 0.4961765, 0.44929922, 0.79849536,0.61248404, 0.86047777, 0.68834671, 0.17931166, 0.92406998,0.39958129, 0.93410612, 0.27276475, 0.75163789, 0.97138383,0.74627357, 0.17079248, 0.73871989, 0.19846399, 0.52292325,0.0415924, 0.26602402, 0.77551567, 0.84184039, 0.08523323,0.42592545, 0.72509303, 0.24813498, 0.09179675, 0.76155025,0.65764071, 0.67482113, 0.03272824, 0.35398294, 0.16924,0.04916538, 0.76769245, 0.06525553, 0.58112895, 0.41867716,0.04979241, 0.06988181, 0.05894481, 0.13637996, 0.50749872,0.00940988, 0.80220146, 0.49887682, 0.17726638, 0.09781269,0.57137226, 0.21282434, 0.27603366, 0.77620504, 0.53885572,0.98861534, 0.82557043, 0.5237719, 0.72022446, 0.22037382,0.47258302, 0.66282524, 0.72964467, 0.51333454, 0.07664327,0.37108997, 0.02126258, 0.04058917, 0.59714924, 0.62505442,0.52552823, 0.54585957, 0.93317525, 0.7100171, 0.93445153,0.82041482, 0.14225715, 0.97646703, 0.94574407, 0.58013258,0.51736752, 0.34482379, 0.26229635, 0.51470439, 0.85833731,0.24655619, 0.46533712, 0.60916171, 0.51632035, 0.18256433,0.7156256, 0.14056041, 0.47904028, 0.5763794, 0.18573646,0.52828844, 0.93624931, 0.42419151, 0.24382162, 0.10944037,0.37008104, 0.5616106, 0.27581531, 0.76099978, 0.66894628,0.8842965, 0.14958691, 0.77373654, 0.2517328, 0.26487687,0.55077701, 0.48165848, 0.85195934, 0.73442066, 0.42230052,0.87511656, 0.34075427, 0.4925237, 0.71458593, 0.97897412,0.69462974, 0.34151298, 0.35481361, 0.49598947, 0.47202382,0.09774096, 0.18349441, 0.94370245, 0.16848197, 0.08303336,0.64810464, 0.08522701, 0.96265614, 0.01826388, 0.26638955,0.42397384, 0.10592166, 0.57162147, 0.85385624, 0.38289491,0.86274392, 0.25124653, 0.4680087, 0.87085298, 0.01686595,0.62129529, 0.66308038, 0.33846333, 0.69674805, 0.79185675,0.30016012, 0.16582154, 0.34177384, 0.40474822, 0.49714666,0.80699811, 0.5563824, 0.37214899, 0.50430101, 0.73890402,0.0705279, 0.06801757, 0.13410333, 0.65426585, 0.26184745,0.64352034, 0.68305314, 0.04878884, 0.55690808, 0.56699659,0.0372055, 0.13669784, 0.11101834, 0.6909448, 0.06476246,0.97896648, 0.86929492, 0.90931257, 0.57458791, 0.46857193,0.47629876, 0.86039506, 0.51384766, 0.44522409, 0.5639341,0.35592567, 0.39538816, 0.03529208, 0.99023117, 0.10400348,0.51528757, 0.28200507, 0.94161392, 0.73880338, 0.48316527,0.07540438, 0.95638918, 0.14419264, 0.58273835, 0.47633381,0.73750443, 0.61880078, 0.90648933, 0.64564645, 0.06578072,0.75440533, 0.39847912, 0.10303061, 0.81765643, 0.4790099,0.95168607, 0.97719257, 0.64634273, 0.50895458, 0.77893902,0.85570102, 0.23378162, 0.33881269, 0.13095033, 0.93301721,0.62221854, 0.94964839, 0.41096772, 0.17313391, 0.88002917,0.98883134, 0.77868551, 0.28025805, 0.97088778, 0.57959198,0.05787205, 0.50273291, 0.58342041, 0.49323071, 0.73930361,0.32270789, 0.65256522, 0.74109516, 0.75797009, 0.86178508,0.31012871, 0.62488681, 0.03420799, 0.15500381, 0.69907781,0.69203918, 0.05427405, 0.78071248, 0.24478402, 0.0563356,0.6802985, 0.20879766, 0.05472069, 0.98882771, 0.84603348,0.37740309, 0.13827439, 0.09748393, 0.58234602, 0.81766767,0.39610266, 0.19033774, 0.164036, 0.55009339, 0.84050821,0.33580653, 0.29146687, 0.81807037, 0.73472149, 0.80353965,0.34402355, 0.59605975, 0.28211565, 0.98811327, 0.05237239,0.36194079, 0.2451181, 0.29940091, 0.98936832, 0.11020516,0.42140878, 0.86783424, 0.46474922, 0.78143151, 0.22720845]
# random_phases = [i*2*np.pi for i in random_phases]

# '''fixed UE setup'''
#             #    MO     RB       LB      LO       RO      RM      MM       MB      LM
# plaatsen_x = [362.319, 595.7, 157.456, 75.149, 635.127, 545.75, 354.62, 365.751, 60.452]
# plaatsen_y = [177.642, 559.248, 607.732, 49.53, 99.452, 390.91, 403.956, 617.03, 396.547]
# plaatsnaam = ['MO', 'RB', 'LB', 'LO', 'RO', 'RM', 'MM', 'MB', 'LM']
# plek = -3
# x_setup.append(plaatsen_x[plek])  #355.52 daar waar pwr groot was (als je alles met juiste w doet)
# y_setup.append(plaatsen_y[plek]) #404.456
# # x_setup.append(496.713)
# # y_setup.append(201.42)
#
#
# '''fixed UE setup'''
# # x_setup.extend([184.75, 362.147, 478.3])
# # y_setup.extend([148.16, 568.29, 400.6])
#
# '''plotting setup...'''
# plt.scatter(x_setup[:-1], y_setup[:-1])
# plt.scatter(x_setup[-1], y_setup[-1], color='red')
# plt.title(header)
# plt.show()
#
# # calculate distances (a: BS -> scatt; b: scatt -> UE)
# distances_a = []  # staat vast, dus moet niet op voorhand gegenereerd worden
# for m in range(M):
#     distances_a_i = []
#     for s in range(S):
#         z = s + 2
#         distances_a_i.append(np.sqrt((x_setup[m] - x_setup[-z]) ** 2 + (y_setup[m] - y_setup[-z]) ** 2))
#     distances_a.append(distances_a_i)
# # calc channel vector for UE @original place
# h = []
# for m in range(M):
#     contribution = []
#     # los_dist = np.sqrt((x_setup[-1] - x_setup[m]) ** 2 + (y_setup[-1] - x_setup[m]) ** 2)
#     # pathloss = 1 / (4 * np.pi * los_dist)
#     # phaseshift = 2 * np.pi * (los_dist % 1)
#     # contribution.append(pathloss * np.exp(1j * phaseshift))
#     for s in range(S):
#         dist_b = np.sqrt((x_setup[-1] - x_setup[-(s + 2)]) ** 2 + (y_setup[-1] - y_setup[-(s + 2)]) ** 2)
#         pathloss = 1/(distances_a[m][s]**2 * dist_b**2)
#         phaseshift = 2 * np.pi * (((distances_a[m][s] + dist_b) % 1) + random_phases[s])
#         contribution.append(pathloss * np.exp(-1j * phaseshift))
#     h.append((1/(256 * np.pi**4)) * sum(contribution))
# h = np.array(h)
# wH = h.conj().T
#
# '''raster'''
# y1 = list(range(-100, 105, 10))
# x1 = list(range(-100, 105, 10))
# y2 = list(range(-200, -100, 10))
# x2 = list(range(-200, -100, 10))
# y3 = list(range(110, 210, 10))
# x3 = list(range(110, 210, 10))
# y2.extend(y1)
# y2.extend(y3)
# x2.extend(x1)
# x2.extend(x3)
# y = [item * resolution / 10 + y_setup[-1] for item in y2]
# x = [item * resolution / 10 + x_setup[-1] for item in x2]
# '''centrale plaats antenne: x[int(len(x)/2)], y[int(len(y)/2)]'''
# # plt.scatter(x, y)
# # plt.scatter(x_setup[-1], y_setup[-1], color='red')
# # plt.title(header)
# # plt.show()
# HDX = []
# ampl = np.zeros(shape=(len(x), len(y)))
# for a in range(len(y)):
#     for b in range(len(x)):
#         hdx = []
#         for m in range(M):
#             contribution = []
#             # los_dist = np.sqrt((x[b] - x_setup[m]) ** 2 + (y[a] - x_setup[m]) ** 2)
#             # pathloss = 1 / (4 * np.pi * los_dist)**2
#             # phaseshift = 2 * np.pi * (los_dist % 1)
#             # contribution.append(pathloss * np.exp(1j * phaseshift))
#             for s in range(S):
#                 dist_b = np.sqrt((x[b] - x_setup[-(s + 2)]) ** 2 + (y[a] - y_setup[-(s + 2)]) ** 2)
#                 dist = distances_a[m][s] + dist_b
#                 pathloss = 1 / (distances_a[m][s]**2 * dist_b**2)
#                 phaseshift = 2 * np.pi * ((dist % 1) + random_phases[s])
#                 contribution.append(pathloss * np.exp(-1j * phaseshift))
#             hdx.append((1/(256 * np.pi**4)) * sum(contribution))
#         HDX.append(hdx)
#         desired_signal = np.matmul(wH, hdx) / np.sqrt(M)
#         #                  * signal_wave
#         # sr = [cmath.polar(i) for i in desired_signal]
#         # amplitudes = [item[0] if int(item[1]) == 0 else -item[0] for item in sr]
#         # ratio_out_vs_rt_ampl = amplitudes[int(len(amplitudes) / 2) + 1] / signal_wave[int(len(signal_wave) / 2) + 1]
#         # if ratio_out_vs_rt_ampl < 0:
#         #     ampl[a, b] = -270
#         # else:
#         ampl[a, b] = abs(desired_signal)
#     print(a)
#
# # plt.plot(signal_wave.real)
# # plt.plot(amplitudes)
# # plt.title('--M=' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(1))
# # plt.show()
# # # fig = px.imshow(z=ampl, x=x, y=y, colour_continuous_scale=px.colors.diverging.Portland)
# pl = ' (' + plaatsnaam[plek] + ')'
# title = './result plots/' + '(' + datetime.datetime.now().strftime(
#                         "%Y-%m-%d_%H-%M") + ')-geo_model--M=' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(1) + '_resolution=' + str(
#                         resolution) + opmerking + '.html'
# UE_x = int(len(ampl) / 2)
# UE_y = int(len(ampl[0]) / 2)
# grootte_vars, grootte_gem, diepte_vars, diepte_gem = functions.plotter(ampl, title, header, pl, resolution, S, M, x_setup, y_setup, UE_x, UE_y, x, y, wH, all_in=True)













































'''stats'''
# def stats(ampl,resolution, UE_x, UE_y):
#     UE = ampl[UE_y][UE_x]
#     amplis = [20 * np.log10(i / UE) for i in ampl]
#     '''bubble'''
#     waardes_rand_bubble = []
#     afstand_per_hoek = []
#     for i in range(0, 360):
#         hoek = i * np.pi / 180
#         x_step = np.cos(hoek)
#         # print(x_step)
#         y_step = np.sin(hoek)
#         ix = int(len(amplis) / 2)
#         ij = int(len(amplis) / 2)
#         # print(ix, ij)
#         inter = amplis[ij][ix]
#         vorige_waarde = inter
#         afstand = 0
#         while vorige_waarde >= inter:
#             vorige_waarde = inter
#             ix += x_step
#             ij += y_step
#             if ix % 1 != 0 and ij % 1 != 0:
#                 x1 = int(ix)
#                 x2 = x1 + 1
#                 y1 = int(ij)
#                 y2 = y1 + 1
#                 dx = abs(ix - x1)
#                 inter1 = amplis[y1][x1] * (1 - dx) + dx * amplis[y1][x2]
#                 inter2 = amplis[y2][x1] * (1 - dx) + dx * amplis[y2][x2]
#                 dy = abs(ij - y1)
#                 inter = inter1 * (1 - dy) + inter2 * dy
#                 # print('1')
#             elif ix % 1 == 0 and ij % 1 != 0:
#                 y1 = int(ij)
#                 y2 = y1 + 1
#                 dy = abs(ij - y1)
#                 inter = amplis[y1][int(ix)] * (1 - dy) + amplis[y2][int(ix)] * dy
#                 # print('2')
#             elif ij % 1 == 0 and ix % 1 != 0:
#                 x1 = int(ix)
#                 x2 = x1 + 1
#                 dx = abs(ix - x1)
#                 inter = amplis[int(ij)][x1] * (1 - dx) + dx * amplis[int(ij)][x2]
#                 # print('3')
#             else:
#                 inter = amplis[int(ij)][int(ix)]
#             #     print('4')
#             # print(inter)
#             afstand += resolution
#         afstand -= resolution
#         afstand_per_hoek.append(afstand)
#         waardes_rand_bubble.append(vorige_waarde)
#     return ([np.var(afstand_per_hoek), np.average(afstand_per_hoek), np.var(waardes_rand_bubble),np.average(waardes_rand_bubble)])
#
# aantal_runs = 1000
# grootte_varsies = []
# grootte_gems = []
# diepte_varsies = []
# diepte_gems = []
# for r in range(aantal_runs):
#     UE_x = np.random.randint(10, len(x)-10)
#     UE_y = np.random.randint(10, len(y)-10)
#     print(r,UE_x,UE_y)
#     hq = np.array(HDX[UE_y * len(y) + UE_x])
#     x_setup.append(x[UE_x])
#     y_setup.append(y[UE_y])
#     wHq = hq.conj().T
#     ampl2 = np.zeros(shape=(len(x), len(y)))
#     for a in range(len(y)):
#         for b in range(len(x)):
#             Hdx = np.array(HDX[a * len(y) + b])
#             desired_signal = np.matmul(wHq, Hdx) / np.sqrt(M)
#             ampl2[a, b] = abs(desired_signal)
#     try:
#         grootte_vars, grootte_gem, diepte_vars, diepte_gem = stats(ampl2,resolution, UE_x, UE_y)
#         grootte_varsies.append(grootte_vars)
#         grootte_gems.append(grootte_gem)
#         diepte_varsies.append(diepte_vars)
#         diepte_gems.append(diepte_gem)
#     except IndexError as e:
#         print('FOUT')

















































'''plotter'''
# def plotter(ampl, file_name, fig_header, pl, resolution, S, M, x_setup, y_setup, UE_x, UE_y, x, y, wH=None, all_in=True,
#             mini=None,
#             maxi=None):
#     UE = ampl[UE_y][UE_x]
#     amplis = [20 * np.log10(i / UE) for i in ampl]
#     if mini is not None and maxi is None:
#         maxi = max([max(i) for i in ampl])
#     elif maxi is not None and mini is None:
#         mini = min([min(i) for i in ampl])
#
#     '''bubble'''
#     waardes_rand_bubble = []
#     afstand_per_hoek = []
#     for i in range(0, 360):
#         hoek = i * np.pi / 180
#         x_step = np.cos(hoek)
#         # print(x_step)
#         y_step = np.sin(hoek)
#         ix = int(len(amplis) / 2)
#         ij = int(len(amplis) / 2)
#         # print(ix, ij)
#         inter = [amplis[ij][ix]]
#         vorige_waarde = inter
#         afstand = 0
#         while vorige_waarde >= inter:
#             vorige_waarde = inter
#             ix += x_step
#             ij += y_step
#             if ix % 1 != 0 and ij % 1 != 0:
#                 x1 = int(ix)
#                 x2 = x1 + 1
#                 y1 = int(ij)
#                 y2 = y1 + 1
#                 dx = abs(ix - x1)
#                 inter1 = amplis[y1][x1] * (1 - dx) + dx * amplis[y1][x2]
#                 inter2 = amplis[y2][x1] * (1 - dx) + dx * amplis[y2][x2]
#                 dy = abs(ij - y1)
#                 inter = inter1 * (1 - dy) + inter2 * dy
#                 # print('1')
#             elif ix % 1 == 0 and ij % 1 != 0:
#                 y1 = int(ij)
#                 y2 = y1 + 1
#                 dy = abs(ij - y1)
#                 inter = amplis[y1][int(ix)] * (1 - dy) + amplis[y2][int(ix)] * dy
#                 # print('2')
#             elif ij % 1 == 0 and ix % 1 != 0:
#                 x1 = int(ix)
#                 x2 = x1 + 1
#                 dx = abs(ix - x1)
#                 inter = amplis[int(ij)][x1] * (1 - dx) + dx * amplis[int(ij)][x2]
#                 # print('3')
#             else:
#                 inter = amplis[int(ij)][int(ix)]
#             #     print('4')
#             # print(inter)
#             afstand += resolution
#         afstand -= resolution
#         afstand_per_hoek.append(afstand)
#         waardes_rand_bubble.append(vorige_waarde)
#
#     if all_in:
#         '''Gem doorsnede'''
#         tot = amplis[int(len(x) / 2)][int(len(y) / 2):]
#         for i in range(1, 360):
#             hoek = i * np.pi / 180
#             x_step = np.cos(hoek)
#             y_step = np.sin(hoek)
#             ix = int(len(amplis) / 2)
#             ij = int(len(amplis) / 2)
#             grafiek = [amplis[ij][ix]]
#             for j in range(int(len(amplis) / 2)):
#                 ix += x_step
#                 ij += y_step
#                 if ix % 1 != 0 and ij % 1 != 0:
#                     x1 = int(ix)
#                     x2 = x1 + 1
#                     y1 = int(ij)
#                     y2 = y1 + 1
#                     dx = abs(ix - x1)
#                     inter1 = amplis[y1][x1] * (1 - dx) + dx * amplis[y1][x2]
#                     inter2 = amplis[y2][x1] * (1 - dx) + dx * amplis[y2][x2]
#                     dy = abs(ij - y1)
#                     inter = inter1 * (1 - dy) + inter2 * dy
#                     grafiek.append(inter)
#                 elif ix % 1 == 0 and ij % 1 != 0:
#                     y1 = int(ij)
#                     y2 = y1 + 1
#                     dy = abs(ij - y1)
#                     inter = amplis[y1][int(ix)] * (1 - dy) + amplis[y2][int(ix)] * dy
#                     grafiek.append(inter)
#                 elif ij % 1 == 0 and ix % 1 != 0:
#                     x1 = int(ix)
#                     x2 = x1 + 1
#                     dx = abs(ix - x1)
#                     inter = amplis[int(ij)][x1] * (1 - dx) + dx * amplis[int(ij)][x2]
#                     grafiek.append(inter)
#                 else:
#                     inter = amplis[int(ij)][int(ix)]
#                     grafiek.append(inter)
#             tot = tot + grafiek
#         tot = tot / 360
#
#         '''radi pat'''
#         tp = np.linspace(-180, 180 + 0.01, num=10000)
#         t = np.linspace(-np.pi, np.pi + 0.01, num=10000)
#         temp = [cmath.polar(i) for i in wH]  # wH = antenna weights
#         amplitude = [i[0] for i in temp]
#         phase = [i[1] for i in temp]
#         rad_pat = []
#         for i in range(len(wH)):
#             rad_pat.append(amplitude[i] * np.exp(1j * (phase[i])) * np.exp(1j * i * np.pi * np.cos(t - np.pi / 2)))
#         radi_pattern = sum(rad_pat)
#
#         '''angular pwr'''
#         jos = ad.weighted_power(S, M, x_setup, y_setup, pl, 16, 'jos', plotter='plotly')
#
#         w = np.linspace(0, int(len(amplis) / 2) + 0.01, num=1000)
#         w = w * resolution
#         fig = make_subplots(rows=2, cols=4, column_widths=[250, 250, 250, 850],
#                             specs=[[{"colspan": 3}, None, None, {"rowspan": 2}],
#                                    [{"type": "polar"}, {"type": "Barpolar"}, {"type": "polar"}, None]])
#         fig.add_trace(go.Scatter(x=w, y=20 * np.log10(abs(bessel.j0(2 * np.pi * w))), showlegend=False), row=1,
#                       col=1)
#         fig.add_trace(go.Scatter(x=(np.linspace(0, int(len(amplis) / 2) + 0.01, num=len(tot))) * resolution, y=tot,
#                                  showlegend=False), row=1, col=1)
#         fig.add_trace(jos, row=2, col=2)
#         fig.add_trace(go.Scatterpolar(theta=tp, r=abs(radi_pattern), mode='lines', showlegend=False), row=2, col=1)
#         fig.add_trace(
#             go.Scatterpolar(theta=np.linspace(0, 360, 360), r=afstand_per_hoek, mode='lines', showlegend=False),
#             row=2, col=3)
#
#         fig.add_trace(go.Heatmap(
#             z=amplis,
#             x=x,
#             y=y,
#             colorscale='Jet',
#             zmin=mini,
#             zmax=maxi
#         ), row=1, col=4)
#         fig.add_trace(go.Scatter(
#             x=x_setup[-1 - S:-1],
#             y=y_setup[-1 - S:-1],
#             mode='markers',
#             name='scatterers',
#             marker_color='blue',
#             marker=dict(size=3)
#         ), row=1, col=4)
#         fig.add_trace(go.Scatter(
#             x=[x_setup[-1]],
#             y=[y_setup[-1]],
#             name='antenna',
#             mode='markers',
#             text=str(ampl[int(len(ampl) / 2)][int(len(ampl[0]) / 2)]),
#             marker_symbol="circle-x",
#             marker_color="red",
#             marker_line_color="white",
#             marker_line_width=0.5,
#             marker_size=5
#         ), row=1, col=4)
#         fig.add_trace(go.Scatter(
#             x=x_setup[:M],
#             y=y_setup[:M],
#             name='BS',
#             mode='markers',
#             marker_color='red',
#             marker=dict(size=3)
#         ), row=1, col=4)
#         fig.add_trace(go.Scatter(
#             x=[0, 800],
#             y=[0, 800],
#             mode='markers',
#             name='dom',
#             opacity=1,
#             marker_color='white',
#             marker=dict(size=3)
#         ), row=1, col=4)
#         fig.update_layout(autosize=False,
#                           width=1550,
#                           height=800,
#                           title=fig_header,
#                           font=dict(size=10),
#                           polar=dict(radialaxis=dict(visible=False)),
#                           polar2=dict(radialaxis=dict(visible=False)))
#         plotly.offline.plot(fig, filename=file_name)
#         fig.show()
#     else:
#         fig = go.Figure(data=go.Heatmap(
#             z=amplis,
#             x=x,
#             y=y,
#             colorscale='Jet',
#             zmin=mini,
#             zmax=maxi
#         ))
#
#         fig.add_trace(go.Scatter(
#             x=x_setup[-S - 1:-1],
#             y=y_setup[-S - 1:-1],
#             mode='markers',
#             name='scatterers',
#             marker_color='blue',
#             marker=dict(size=3)
#         ))
#
#         fig.add_trace(go.Scatter(
#             x=[x_setup[-1]],
#             y=[y_setup[-1]],
#             name='antenna',
#             mode='markers',
#             marker_symbol="y-down",
#             marker_line_color="red",
#             marker_line_width=2,
#             marker_size=5,
#             text=str(ampl[int(len(ampl) / 2)][int(len(ampl[0]) / 2)])
#         ))
#         fig.add_trace(go.Scatter(
#             x=x_setup[:M],
#             y=y_setup[:M],
#             name='BS',
#             mode='markers',
#             marker_color='red',
#             marker=dict(size=3)
#         ))
#         fig.add_trace(go.Scatter(
#             x=[0, 800],
#             y=[0, 800],
#             mode='markers',
#             name='dom',
#             opacity=1,
#             marker_color='white',
#             marker=dict(size=3)
#         ))
#         fig.update_layout(autosize=False,
#                           width=850,
#                           height=800,
#                           title=fig_header,
#                           font=dict(size=10))
#         plotly.offline.plot(fig, filename=file_name)
#         fig.show()
#     return([np.var(afstand_per_hoek)[0], np.average(afstand_per_hoek)[0], np.var(waardes_rand_bubble)[0], np.average(waardes_rand_bubble)[0]])


'''plotter vr gems'''
# def gem_plotter(ampl, file_name, fig_header, pl, resolution, S, M, x_setup, y_setup, x, y, wH=None, all_in=True, mini=None,
#             maxi=None):
#     UE = ampl[int(len(ampl) / 2)][int(len(ampl[0]) / 2)]
#     amplis = [20 * np.log10(i / UE) for i in ampl]
#     if mini is not None and maxi is None:
#         maxi = max([max(i) for i in ampl])
#     elif maxi is not None and mini is None:
#         mini = min([min(i) for i in ampl])
#     '''bubble'''
#     waardes_rand_bubble = []
#     afstand_per_hoek = []
#     for i in range(0, 360):
#         hoek = i * np.pi / 180
#         x_step = np.cos(hoek)
#         # print(x_step)
#         y_step = np.sin(hoek)
#         ix = int(len(amplis) / 2)
#         ij = int(len(amplis) / 2)
#         # print(ix, ij)
#         inter = [amplis[ij][ix]]
#         vorige_waarde = inter
#         afstand = 0
#         while vorige_waarde >= inter:
#             vorige_waarde = inter
#             ix += x_step
#             ij += y_step
#             if ix % 1 != 0 and ij % 1 != 0:
#                 x1 = int(ix)
#                 x2 = x1 + 1
#                 y1 = int(ij)
#                 y2 = y1 + 1
#                 dx = abs(ix - x1)
#                 inter1 = amplis[y1][x1] * (1 - dx) + dx * amplis[y1][x2]
#                 inter2 = amplis[y2][x1] * (1 - dx) + dx * amplis[y2][x2]
#                 dy = abs(ij - y1)
#                 inter = inter1 * (1 - dy) + inter2 * dy
#                 # print('1')
#             elif ix % 1 == 0 and ij % 1 != 0:
#                 y1 = int(ij)
#                 y2 = y1 + 1
#                 dy = abs(ij - y1)
#                 inter = amplis[y1][int(ix)] * (1 - dy) + amplis[y2][int(ix)] * dy
#                 # print('2')
#             elif ij % 1 == 0 and ix % 1 != 0:
#                 x1 = int(ix)
#                 x2 = x1 + 1
#                 dx = abs(ix - x1)
#                 inter = amplis[int(ij)][x1] * (1 - dx) + dx * amplis[int(ij)][x2]
#                 # print('3')
#             else:
#                 inter = amplis[int(ij)][int(ix)]
#             #     print('4')
#             # print(inter)
#             afstand += resolution
#         afstand -= resolution
#         afstand_per_hoek.append(afstand)
#         waardes_rand_bubble.append(vorige_waarde)
#     if all_in:
#         '''Gem doorsnede'''
#         tot = amplis[int(len(x) / 2)][int(len(y) / 2):]
#         for i in range(1, 360):
#             hoek = i
#             x_step = np.cos(hoek)
#             y_step = np.sin(hoek)
#             ix = int(len(amplis) / 2)
#             ij = int(len(amplis) / 2)
#             grafiek = [amplis[ix][ij]]
#             for j in range(int(len(amplis) / 2)):
#                 ix += x_step
#                 ij += y_step
#                 if ix % 1 != 0 and ij % 1 != 0:
#                     x1 = int(ix)
#                     x2 = x1 + 1
#                     y1 = int(ij)
#                     y2 = y1 + 1
#                     dx = abs(ix - x1)
#                     inter1 = amplis[x1][y1] * (1 - dx) + dx * amplis[x2][y1]
#                     inter2 = amplis[x1][y2] * (1 - dx) + dx * amplis[x2][y2]
#                     dy = abs(ij - y1)
#                     inter = inter1 * (1 - dy) + inter2 * dy
#                     grafiek.append(inter)
#                 elif ix % 1 == 0:
#                     y1 = int(ij)
#                     y2 = y1 + 1
#                     dy = abs(ij - y1)
#                     inter = amplis[int(ix)][y1] * (1 - dy) + amplis[int(ix)][y2] * dy
#                     grafiek.append(inter)
#                 elif ij % 1 == 0:
#                     x1 = int(ix)
#                     x2 = x1 + 1
#                     dx = abs(ix - x1)
#                     inter = amplis[x1][int(ij)] * (1 - dx) + dx * amplis[x2][int(ij)]
#                     grafiek.append(inter)
#             tot = tot + grafiek
#         tot = tot / 360
#         w = np.linspace(0, int(len(amplis) / 2) + 0.01, num=1000)
#         w = w * resolution
#         fig = make_subplots(rows=2, cols=2, column_widths=[700, 850],
#                             specs=[[{}, {"rowspan": 2}],
#                                    [{"type": "polar"}, None]]
#                             )
#         fig.add_trace(go.Scatter(x=w, y=20 * np.log10(abs(bessel.j0(2 * np.pi * w))), showlegend=False), row=1,
#                       col=1)
#         fig.add_trace(go.Scatter(x=(np.linspace(0, int(len(amplis) / 2) + 0.01, num=len(tot))) * resolution, y=tot,
#                                  showlegend=False), row=1, col=1)
#         fig.add_trace(go.Scatterpolar(theta=np.linspace(0, 360, 360), r=afstand_per_hoek, mode='lines', showlegend=False),
#             row=2, col=1)
#         fig.add_trace(go.Heatmap(
#             z=amplis,
#             x=x,
#             y=y,
#             colorscale='Jet',
#             zmin=mini,
#             zmax=maxi
#         ), row=1, col=2)
#         fig.add_trace(go.Scatter(
#             x=x_setup[-1 - S:-1],
#             y=y_setup[-1 - S:-1],
#             mode='markers',
#             name='scatterers',
#             marker_color='blue',
#             marker=dict(size=3)
#         ), row=1, col=2)
#         fig.add_trace(go.Scatter(
#             x=[x_setup[-1]],
#             y=[y_setup[-1]],
#             name='antenna',
#             mode='markers',
#             text=str(ampl[int(len(ampl) / 2)][int(len(ampl[0]) / 2)]),
#             marker_symbol="circle-x",
#             marker_color="red",
#             marker_line_color="white",
#             marker_line_width=0.5,
#             marker_size=5
#         ), row=1, col=2)
#         fig.add_trace(go.Scatter(
#             x=x_setup[:M],
#             y=y_setup[:M],
#             name='BS',
#             mode='markers',
#             marker_color='red',
#             marker=dict(size=3)
#         ), row=1, col=2)
#         fig.add_trace(go.Scatter(
#             x=[0, 800],
#             y=[0, 800],
#             mode='markers',
#             name='dom',
#             opacity=1,
#             marker_color='white',
#             marker=dict(size=3)
#         ), row=1, col=2)
#         fig.update_layout(autosize=False,
#                           width=1550,
#                           height=800,
#                           title=fig_header,
#                           font=dict(size=10),
#                           polar=dict(radialaxis=dict(visible=False)),
#                           polar2=dict(radialaxis=dict(visible=False)))
#         plotly.offline.plot(fig, filename=file_name)
#         fig.show()
#     else:
#         fig = go.Figure(data=go.Heatmap(
#             z=amplis,
#             x=x,
#             y=y,
#             colorscale='Jet',
#             zmin=mini,
#             zmax=maxi
#         ))
#         fig.add_trace(go.Scatter(
#             x=x_setup[-S - 1:-1],
#             y=y_setup[-S - 1:-1],
#             mode='markers',
#             name='scatterers',
#             marker_color='blue',
#             marker=dict(size=3)
#         ))
#         fig.add_trace(go.Scatter(
#             x=[x_setup[-1]],
#             y=[y_setup[-1]],
#             name='antenna',
#             mode='markers',
#             marker_symbol="y-down",
#             marker_line_color="red",
#             marker_line_width=2,
#             marker_size=5,
#             text=str(ampl[int(len(ampl) / 2)][int(len(ampl[0]) / 2)])
#         ))
#         fig.add_trace(go.Scatter(
#             x=x_setup[:M],
#             y=y_setup[:M],
#             name='BS',
#             mode='markers',
#             marker_color='red',
#             marker=dict(size=3)
#         ))
#         fig.add_trace(go.Scatter(
#             x=[0, 800],
#             y=[0, 800],
#             mode='markers',
#             name='dom',
#             opacity=1,
#             marker_color='white',
#             marker=dict(size=3)
#         ))
#         fig.update_layout(autosize=False,
#                           width=850,
#                           height=800,
#                           title=fig_header,
#                           font=dict(size=10))
#         plotly.offline.plot(fig, filename=file_name)
#         fig.show()
#     return([np.var(afstand_per_hoek)[0], np.average(afstand_per_hoek)[0], np.var(waardes_rand_bubble)[0], np.average(waardes_rand_bubble)[0]])




'''gemiddelde over 4 quadranten (werkt alleen met een HDX'''
# aantal_runs = 4
# UE_quad_x = [np.random.randint(int(len(x)/2), len(x)),
#              np.random.randint(0, int(len(x)/2)),
#              np.random.randint(0, int(len(x)/2)),
#              np.random.randint(int(len(x)/2), len(x))]
# UE_quad_y = [np.random.randint(int(len(y)/2), len(y)),
#              np.random.randint(int(len(y)/2), len(y)),
#              np.random.randint(0, int(len(y)/2)),
#              np.random.randint(0, int(len(y)/2))]
# gem_ampli = ampl/5
# grootte_varsies = []
# grootte_gems = []
# diepte_varsies = []
# diepte_gems = []
# for r in range(aantal_runs):
#     hq = np.array(HDX[UE_quad_y[r] * len(y) + UE_quad_x[r]])
#     x_setup.append(x[UE_quad_x[r]])
#     y_setup.append(y[UE_quad_y[r]])
#     wHq = hq.conj().T
#     ampl2 = np.zeros(shape=(len(x), len(y)))
#     for a in range(len(y)):
#         for b in range(len(x)):
#             Hdx = np.array(HDX[a * len(y) + b])
#             desired_signal = np.matmul(wHq, Hdx) / np.sqrt(M)
#             ampl2[a, b] = abs(desired_signal)
#         # print(str(r+1)+'-'+str(a))
#     title = './result plots/' + '(' + datetime.datetime.now().strftime(
#         "%Y-%m-%d_%H-%M") + ')-geo_model--M=' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(
#         1) + '_resolution=' + str(resolution) + '_q' + str(r+1) + '.html'
#     grootte_vars, grootte_gem, diepte_vars, diepte_gem = plotter(ampl2, title, header+'_q'+str(r+1), pl, resolution, S, M, x_setup, y_setup, UE_quad_x[r], UE_quad_y[r], x, y, wHq, all_in=True)
#     grootte_varsies.append(grootte_vars)
#     grootte_gems.append(grootte_gem)
#     diepte_varsies.append(diepte_vars)
#     diepte_gems.append(diepte_gem)
#     gem_ampli = gem_ampli + ampl2/5
# title = './result plots/' + '(' + datetime.datetime.now().strftime("%Y-%m-%d_%H-%M") + ')-geo_model_gem_quad--' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(
#         1) + '_resolution=' + str(resolution) + '_gem.html'
# #ziet dat ge hier de juiste setups meegeeft
# grootte_vars, grootte_gem, diepte_vars, diepte_gem = gem_plotter(gem_ampli, title, header+'_gem', pl, resolution, S, M, x_setup[:-4], y_setup[:-4], x, y, all_in=True)














'''Bubbel in beeld'''
# afstand_per_hoek = []
# for i in range(0, 360):
#     UE = ampl[int(len(ampl) / 2)][int(len(ampl[0]) / 2)]
#     amplis = [20 * np.log10(i / UE) for i in ampl]
#     hoek = i*np.pi/180
#     x_step = np.cos(hoek)
#     # print(x_step)
#     y_step = np.sin(hoek)
#     ix = int(len(amplis) / 2)
#     ij = int(len(amplis) / 2)
#     # print(ix, ij)
#     inter = [amplis[ij][ix]]
#     vorige_waarde = inter
#     afstand = 0
#     while vorige_waarde >= inter:
#         vorige_waarde = inter
#         ix += x_step
#         ij += y_step
#         if ix % 1 != 0 and ij % 1 != 0:
#             x1 = int(ix)
#             x2 = x1 + 1
#             y1 = int(ij)
#             y2 = y1 + 1
#             dx = abs(ix - x1)
#             inter1 = amplis[y1][x1] * (1 - dx) + dx * amplis[y1][x2]
#             inter2 = amplis[y2][x1] * (1 - dx) + dx * amplis[y2][x2]
#             dy = abs(ij - y1)
#             inter = inter1 * (1 - dy) + inter2 * dy
#             # print('1')
#         elif ix % 1 == 0 and ij % 1 != 0:
#             y1 = int(ij)
#             y2 = y1 + 1
#             dy = abs(ij - y1)
#             inter = amplis[y1][int(ix)] * (1 - dy) + amplis[y2][int(ix)] * dy
#             # print('2')
#         elif ij % 1 == 0 and ix % 1 != 0:
#             x1 = int(ix)
#             x2 = x1 + 1
#             dx = abs(ix - x1)
#             inter = amplis[int(ij)][x1] * (1 - dx) + dx * amplis[int(ij)][x2]
#             # print('3')
#         else:
#             inter = amplis[int(ij)][int(ix)]
#         #     print('4')
#         # print(inter)
#         afstand += resolution
#     afstand -= resolution
#     afstand_per_hoek.append(afstand)

























































'''plotter voor gemiddelde'''
# def plotter(ampl, file_name, fig_header, pl, resolution, S, M, x_setup, y_setup, x, y, wH=None, all_in=True, mini=None,
#             maxi=None):
#     UE = ampl[int(len(ampl) / 2)][int(len(ampl[0]) / 2)]
#     amplis = [20 * np.log10(i / UE) for i in ampl]
#     if mini is not None and maxi is None:
#         maxi = max([max(i) for i in ampl])
#     elif maxi is not None and mini is None:
#         mini = min([min(i) for i in ampl])
#     if all_in:
#         '''Gem doorsnede'''
#         tot = amplis[int(len(x) / 2)][int(len(y) / 2):]
#         for i in range(1, 360):
#             hoek = i
#             x_step = np.cos(hoek)
#             y_step = np.sin(hoek)
#             ix = int(len(amplis) / 2)
#             ij = int(len(amplis) / 2)
#             grafiek = [amplis[ix][ij]]
#             for j in range(int(len(amplis) / 2)):
#                 ix += x_step
#                 ij += y_step
#                 if ix % 1 != 0 and ij % 1 != 0:
#                     x1 = int(ix)
#                     x2 = x1 + 1
#                     y1 = int(ij)
#                     y2 = y1 + 1
#                     dx = abs(ix - x1)
#                     inter1 = amplis[x1][y1] * (1 - dx) + dx * amplis[x2][y1]
#                     inter2 = amplis[x1][y2] * (1 - dx) + dx * amplis[x2][y2]
#                     dy = abs(ij - y1)
#                     inter = inter1 * (1 - dy) + inter2 * dy
#                     grafiek.append(inter)
#                 elif ix % 1 == 0:
#                     y1 = int(ij)
#                     y2 = y1 + 1
#                     dy = abs(ij - y1)
#                     inter = amplis[int(ix)][y1] * (1 - dy) + amplis[int(ix)][y2] * dy
#                     grafiek.append(inter)
#                 elif ij % 1 == 0:
#                     x1 = int(ix)
#                     x2 = x1 + 1
#                     dx = abs(ix - x1)
#                     inter = amplis[x1][int(ij)] * (1 - dx) + dx * amplis[x2][int(ij)]
#                     grafiek.append(inter)
#             tot = tot + grafiek
#         tot = tot / 360
#         w = np.linspace(0, int(len(amplis) / 2) + 0.01, num=1000)
#         w = w * resolution
#         fig = make_subplots(rows=1, cols=2, column_widths=[700, 850])
#         fig.add_trace(go.Scatter(x=w, y=20 * np.log10(abs(bessel.j0(2 * np.pi * w))), showlegend=False), row=1,
#                       col=1)
#         fig.add_trace(go.Scatter(x=(np.linspace(0, int(len(amplis) / 2) + 0.01, num=len(tot))) * resolution, y=tot,
#                                  showlegend=False), row=1, col=1)
#         fig.add_trace(go.Heatmap(
#             z=amplis,
#             x=x,
#             y=y,
#             colorscale='Jet',
#             zmin=mini,
#             zmax=maxi
#         ), row=1, col=2)
#         fig.add_trace(go.Scatter(
#             x=x_setup[-1 - S:-1],
#             y=y_setup[-1 - S:-1],
#             mode='markers',
#             name='scatterers',
#             marker_color='blue',
#             marker=dict(size=3)
#         ), row=1, col=2)
#         fig.add_trace(go.Scatter(
#             x=[x_setup[-1]],
#             y=[y_setup[-1]],
#             name='antenna',
#             mode='markers',
#             text=str(ampl[int(len(ampl) / 2)][int(len(ampl[0]) / 2)]),
#             marker_symbol="circle-x",
#             marker_color="red",
#             marker_line_color="white",
#             marker_line_width=0.5,
#             marker_size=5
#         ), row=1, col=2)
#         fig.add_trace(go.Scatter(
#             x=x_setup[:M],
#             y=y_setup[:M],
#             name='BS',
#             mode='markers',
#             marker_color='red',
#             marker=dict(size=3)
#         ), row=1, col=2)
#         fig.add_trace(go.Scatter(
#             x=[0, 800],
#             y=[0, 800],
#             mode='markers',
#             name='dom',
#             opacity=1,
#             marker_color='white',
#             marker=dict(size=3)
#         ), row=1, col=2)
#         fig.update_layout(autosize=False,
#                           width=1550,
#                           height=800,
#                           title=fig_header,
#                           font=dict(size=10),
#                           polar=dict(radialaxis=dict(visible=False)),
#                           polar2=dict(radialaxis=dict(visible=False)))
#         plotly.offline.plot(fig, filename=file_name)
#         fig.show()
#     else:
#         fig = go.Figure(data=go.Heatmap(
#             z=amplis,
#             x=x,
#             y=y,
#             colorscale='Jet',
#             zmin=mini,
#             zmax=maxi
#         ))
#
#         fig.add_trace(go.Scatter(
#             x=x_setup[-S - 1:-1],
#             y=y_setup[-S - 1:-1],
#             mode='markers',
#             name='scatterers',
#             marker_color='blue',
#             marker=dict(size=3)
#         ))
#
#         fig.add_trace(go.Scatter(
#             x=[x_setup[-1]],
#             y=[y_setup[-1]],
#             name='antenna',
#             mode='markers',
#             marker_symbol="y-down",
#             marker_line_color="red",
#             marker_line_width=2,
#             marker_size=5,
#             text=str(ampl[int(len(ampl) / 2)][int(len(ampl[0]) / 2)])
#         ))
#         fig.add_trace(go.Scatter(
#             x=x_setup[:M],
#             y=y_setup[:M],
#             name='BS',
#             mode='markers',
#             marker_color='red',
#             marker=dict(size=3)
#         ))
#         fig.add_trace(go.Scatter(
#             x=[0, 800],
#             y=[0, 800],
#             mode='markers',
#             name='dom',
#             opacity=1,
#             marker_color='white',
#             marker=dict(size=3)
#         ))
#         fig.update_layout(autosize=False,
#                           width=850,
#                           height=800,
#                           title=fig_header,
#                           font=dict(size=10))
#         plotly.offline.plot(fig, filename=file_name)
#         fig.show()















































'''gemiddelde over 4 quadranten (werkt alleen met een HDX'''
# aantal_runs = 4
# UE_quad_x = [np.random.randint(int(len(x)/2), len(x)),
#              np.random.randint(0, int(len(x)/2)),
#              np.random.randint(0, int(len(x)/2)),
#              np.random.randint(int(len(x)/2), len(x))]
# UE_quad_y = [np.random.randint(int(len(y)/2), len(y)),
#              np.random.randint(int(len(y)/2), len(y)),
#              np.random.randint(0, int(len(y)/2)),
#              np.random.randint(0, int(len(y)/2))]
# gem_ampli = ampl/5
# for r in range(aantal_runs):
#     hq = np.array(HDX[UE_quad_y[r] * len(y) + UE_quad_x[r]])
#     x_setup.append(x[UE_quad_x[r]])
#     y_setup.append(y[UE_quad_y[r]])
#     wHq = hq.conj().T
#     ampl2 = np.zeros(shape=(len(x), len(y)))
#     for a in range(len(y)):
#         for b in range(len(x)):
#             Hdx = np.array(HDX[a * len(y) + b])
#             desired_signal = np.matmul(wHq, Hdx) / np.sqrt(M)
#             #                  * signal_wave
#             # sr = [cmath.polar(i) for i in desired_signal]
#             # amplitudes = [item[0] if int(item[1]) == 0 else -item[0] for item in sr]
#             # ratio_out_vs_rt_ampl = amplitudes[int(len(amplitudes) / 2) + 1] / signal_wave[int(len(signal_wave) / 2) + 1]
#             # if ratio_out_vs_rt_ampl < 0:
#             #     ampl[a, b] = -270
#             # else:
#             ampl2[a, b] = abs(desired_signal)
#         # print(str(r+1)+'-'+str(a))
#     title = './result plots/' + '(' + datetime.datetime.now().strftime(
#         "%Y-%m-%d_%H-%M") + ')-geo_model--M=' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(
#         1) + '_resolution=' + str(resolution) + '_q' + str(r+1) + '.html'
#     plotter(ampl2, title, header+'_q'+str(r+1), pl, resolution, S, M, x_setup, y_setup, x, y, wHq, all_in=True)
#     gem_ampli = gem_ampli + ampl2/5
# title = './result plots/' + '(' + datetime.datetime.now().strftime("%Y-%m-%d_%H-%M") + ')-geo_model_gem_quad--' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(
#         1) + '_resolution=' + str(resolution) + '_gem.html'
# #ziet dat ge hier de juiste setups meegeeft
# plotter(gem_ampli, title, header+'_gem', pl, resolution, S, M, x_setup[:-4], y_setup[:-4], x, y, all_in=True)
# #!!!!!!!!!!!!!!!plotter hierboven gedefinieerd!!!!!!!!!!!!!!!!!






















































'''juiste wH voor iedere pxl'''
# ampl3 = np.zeros(shape=(len(x), len(y)))
# for a in range(len(y)):
#     for b in range(len(x)):
#         Hdx = np.array(HDX[a*len(y)+b])
#         wHdx = Hdx.conj().T
#         desired_signal = np.matmul(wHdx,Hdx) / np.sqrt(M)
#
#         ampl3[a, b] = abs(desired_signal)
# pl = ' (' + plaatsnaam[plek] + ')'
# title = './result plots/' + '(' + datetime.datetime.now().strftime("%Y-%m-%d_%H-%M") + ')-geo_model_gem_quad--M=' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(1) + '_resolution=' + str(
#                         resolution) + 'juiste_w.html'
# #ziet dat ge hier de juiste setups meegeeft
# functions.plotter(ampl3, title, header, pl, resolution, S, M, x_setup, y_setup, x, y, all_in=True)













































'''bepaalde waarde vinden in list van arrays'''
# jos = [0 if not np.where(i==0)[0] else np.where(i==0)[0][0]  for i in amplis]
# opl = np.where(np.array(jos) != 0)
# print(opl, jos[opl])























































'''geo meerdere UE's met waves en niet in de omgeving'''
# '''definitions'''
# M = 100
# message_bits = np.array(
#     [1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1])
# message_bits_UEs = np.array(
#     [[0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1],
#      [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1]])
# signal_wave = QAM_generator.create_QAM_signal(message_bits, 16)
# signal_waves_UEs = [QAM_generator.create_QAM_signal(i, 16) for i in message_bits_UEs]
# signal_waves_UEs[0] = np.append(signal_waves_UEs[0][7:],[0,0,0,0,0,0,0])
# signal_waves_UEs[1] = np.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],signal_waves_UEs[1][:-15])
# # noise v:
# # noise = np.random.normal(0, np.sqrt(0.5), (M,len(signal_wave))) + 1j * np.random.normal(0, np.sqrt(0.5), (M,len(signal_wave)))
# # noise x:
# noise = None
# S = 1000
# dM = 0.5
# resolution = 0.1
# K = 1
# titel = '--M=' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(K) + '_resolution=' + str(
#     resolution) + '_noise-x__zonder_min_max '
# header = '(' + datetime.datetime.now().strftime("%Y-%m-%d_%H:%M") + ')' + titel
# print(header)
#
# # place antennas (line @ x=0)
# y_setup = list(range(40000 - int(dM * 100 * M / 2), 40000 - int(dM * 100 * M / 2) + int(dM * 100 * M), int(dM * 100)))
# y_setup = [i * 0.010 for i in y_setup]
# x_setup = list([0 for i in y_setup])
#
# # '''random scatt setup'''
# for i in range(S):
#     x_setup.append(random.randint(100000, 700000) / 1000)
#     y_setup.append(random.randint(0, 700000) / 1000)
# # # place UE
# # x_setup.append(478.3)
# # y_setup.append(400.6)
# # place UE
# # x_setup.append(184.75)
# # y_setup.append(148.16)
# # place UE
# # x_setup.append(362.147)
# # y_setup.append(568.29)
#
# '''fixed scatt setup (S=1000)'''
# # x_setup.extend(
# #     [281.062, 626.684, 562.62, 579.471, 208.285, 690.277, 293.243, 513.707, 507.254, 166.815, 661.411, 441.793, 693.324,
# #      446.107, 388.934, 342.869, 614.232, 337.542, 574.243, 347.897, 313.528, 342.383, 333.716, 159.18, 695.068, 196.376,
# #      333.714, 233.883, 122.415, 256.936, 607.621, 285.498, 177.566, 237.904, 171.847, 355.869, 247.899, 593.18, 345.595,
# #      178.747, 310.219, 490.47, 185.268, 500.487, 664.966, 632.054, 437.436, 206.151, 361.217, 493.125, 211.581, 340.351,
# #      403.561, 607.775, 578.967, 244.713, 345.605, 174.334, 100.064, 139.366, 244.902, 179.192, 358.482, 687.93, 120.032,
# #      168.469, 597.173, 298.547, 250.987, 114.826, 480.657, 437.323, 523.365, 133.052, 413.767, 588.689, 115.112,
# #      111.552, 663.742, 207.176, 353.572, 129.085, 130.503, 419.036, 268.183, 251.541, 176.038, 686.883, 505.348,
# #      205.401, 684.113, 511.571, 603.329, 660.126, 670.484, 343.904, 201.54, 155.446, 412.437, 356.816, 173.43, 479.834,
# #      380.809, 654.446, 530.941, 186.993, 396.005, 200.206, 136.737, 436.056, 310.574, 410.448, 689.879, 588.915,
# #      151.681, 531.457, 633.965, 683.005, 699.15, 555.39, 338.356, 222.779, 665.531, 565.273, 555.803, 608.482, 143.587,
# #      551.188, 465.149, 317.834, 238.234, 137.681, 314.514, 350.296, 234.525, 213.849, 201.588, 642.759, 685.903,
# #      482.484, 251.624, 215.553, 687.025, 110.794, 346.406, 121.966, 523.737, 342.931, 589.571, 547.53, 346.802, 686.924,
# #      140.835, 623.355, 488.29, 217.071, 425.435, 422.279, 444.634, 119.699, 692.058, 266.332, 289.173, 107.046, 133.459,
# #      236.138, 417.519, 372.806, 414.709, 186.556, 685.557, 658.891, 237.243, 540.975, 440.211, 157.46, 561.903, 562.929,
# #      416.696, 583.078, 232.709, 458.503, 443.881, 637.825, 208.692, 353.004, 179.736, 539.653, 136.705, 227.649,
# #      202.994, 205.466, 195.673, 395.483, 539.148, 549.044, 670.215, 471.559, 161.259, 353.455, 289.194, 307.45, 212.797,
# #      392.365, 496.308, 428.642, 380.254, 265.535, 675.842, 662.877, 488.479, 398.656, 149.757, 482.448, 251.566,
# #      459.552, 350.937, 664.112, 650.372, 105.807, 607.333, 344.61, 624.895, 349.945, 254.798, 413.498, 114.224, 494.695,
# #      675.292, 194.467, 169.103, 211.421, 425.659, 583.314, 201.038, 516.212, 581.844, 435.095, 294.425, 498.369,
# #      497.206, 333.656, 143.223, 567.462, 480.547, 300.954, 185.943, 128.56, 124.841, 644.666, 244.121, 608.983, 353.688,
# #      114.26, 659.702, 432.436, 530.093, 278.96, 121.881, 659.126, 138.318, 643.968, 171.75, 223.389, 433.347, 143.019,
# #      347.935, 602.682, 669.198, 570.543, 244.745, 687.685, 637.24, 533.86, 383.256, 625.258, 498.024, 530.02, 188.459,
# #      276.387, 286.531, 665.589, 318.15, 224.704, 541.49, 178.605, 129.706, 324.68, 645.298, 630.068, 301.298, 200.661,
# #      663.624, 667.347, 690.598, 443.746, 445.961, 376.013, 410.198, 524.785, 595.524, 293.756, 621.9, 536.563, 486.674,
# #      557.414, 160.888, 254.489, 257.831, 169.947, 195.181, 344.326, 288.926, 652.444, 112.758, 123.881, 309.353,
# #      172.703, 490.659, 510.608, 215.304, 485.234, 305.759, 387.898, 240.646, 632.175, 518.984, 309.134, 588.222,
# #      641.498, 302.828, 400.785, 569.623, 281.019, 215.165, 563.618, 328.303, 572.357, 393.191, 391.347, 120.288,
# #      659.652, 310.932, 660.08, 417.169, 646.8, 167.672, 479.132, 156.422, 648.873, 312.819, 253.861, 335.565, 370.941,
# #      556.67, 447.963, 398.676, 476.273, 679.023, 243.157, 203.695, 136.641, 162.938, 615.802, 683.967, 518.321, 145.05,
# #      179.276, 231.073, 407.183, 460.007, 217.651, 320.322, 671.991, 524.276, 282.404, 117.414, 598.136, 119.925, 146.7,
# #      171.111, 665.998, 295.722, 368.118, 181.661, 365.58, 227.131, 394.847, 513.002, 109.558, 663.735, 467.002, 337.78,
# #      684.583, 656.044, 343.117, 282.315, 604.804, 603.78, 173.204, 667.57, 229.141, 215.935, 184.091, 138.719, 204.109,
# #      462.324, 529.637, 511.006, 607.25, 628.11, 438.566, 341.125, 366.814, 567.288, 118.933, 420.073, 649.637, 640.129,
# #      365.617, 515.928, 389.222, 199.887, 546.965, 560.831, 121.812, 297.675, 144.295, 253.249, 191.165, 509.027,
# #      675.872, 619.892, 643.439, 474.109, 517.173, 698.636, 446.126, 455.2, 367.74, 173.498, 492.161, 293.452, 671.508,
# #      142.297, 256.642, 315.801, 412.633, 688.751, 237.465, 395.791, 290.866, 328.062, 582.447, 473.694, 142.624,
# #      350.203, 644.419, 692.014, 501.85, 189.718, 418.411, 690.001, 136.958, 558.566, 337.945, 485.725, 599.567, 666.031,
# #      316.296, 263.905, 616.923, 244.275, 658.37, 638.66, 625.658, 623.387, 188.022, 514.955, 243.77, 379.573, 525.587,
# #      564.949, 447.115, 273.791, 221.044, 281.356, 636.792, 575.782, 356.322, 603.811, 309.86, 178.985, 542.196, 699.827,
# #      527.971, 426.112, 615.812, 286.994, 496.202, 493.473, 422.564, 378.653, 471.523, 131.545, 536.45, 348.278, 425.655,
# #      680.4, 243.666, 611.644, 439.987, 595.48, 158.141, 382.443, 300.894, 332.411, 578.154, 586.847, 518.781, 387.324,
# #      533.109, 147.831, 688.982, 426.605, 114.882, 457.042, 568.182, 185.232, 457.796, 189.045, 245.684, 632.01, 192.806,
# #      570.613, 284.114, 270.98, 388.564, 482.826, 590.691, 178.409, 287.26, 303.269, 420.38, 154.065, 325.94, 397.835,
# #      153.407, 622.059, 557.633, 190.66, 149.813, 231.978, 169.548, 236.559, 318.129, 384.697, 651.295, 639.874, 221.329,
# #      300.033, 170.315, 347.317, 350.289, 498.327, 157.395, 349.4, 281.06, 506.376, 284.909, 547.806, 219.649, 632.646,
# #      480.714, 142.242, 532.958, 474.065, 569.78, 126.513, 371.52, 225.045, 412.3, 697.379, 659.528, 509.195, 179.565,
# #      125.846, 216.863, 326.356, 649.709, 262.332, 113.972, 685.138, 253.226, 605.626, 280.859, 549.164, 301.431,
# #      263.891, 470.028, 103.297, 534.92, 392.732, 607.077, 604.512, 572.212, 445.412, 258.539, 407.927, 307.139, 117.195,
# #      472.31, 505.528, 539.784, 534.451, 502.87, 168.555, 364.887, 414.581, 456.54, 444.149, 262.996, 349.179, 185.774,
# #      631.001, 529.375, 656.968, 481.708, 484.888, 414.008, 124.279, 148.859, 484.622, 416.423, 523.989, 604.077,
# #      117.457, 244.607, 592.6, 480.969, 596.72, 195.635, 153.577, 421.723, 338.327, 480.485, 220.466, 263.416, 484.957,
# #      295.367, 197.177, 428.112, 500.145, 382.255, 135.403, 481.708, 385.318, 187.72, 421.181, 608.192, 152.749, 253.619,
# #      444.221, 524.177, 563.794, 225.251, 272.882, 175.659, 206.626, 521.084, 175.077, 674.958, 303.166, 498.357,
# #      408.286, 453.159, 402.46, 688.825, 128.735, 270.68, 422.76, 462.1, 311.055, 586.334, 341.001, 339.29, 457.687,
# #      465.993, 397.454, 368.852, 699.564, 513.549, 215.596, 387.693, 137.64, 536.734, 440.258, 688.796, 265.897, 303.118,
# #      229.878, 595.797, 312.819, 475.693, 649.837, 260.137, 617.973, 698.588, 379.282, 422.99, 408.621, 239.268, 649.922,
# #      395.528, 148.887, 549.452, 653.844, 249.609, 170.341, 470.379, 613.294, 365.464, 528.313, 155.558, 521.893,
# #      155.222, 481.16, 145.378, 183.122, 334.854, 176.363, 338.306, 621.053, 409.112, 298.535, 395.519, 279.91, 189.124,
# #      571.674, 431.599, 496.087, 392.591, 587.669, 547.536, 110.947, 324.046, 177.738, 508.366, 260.384, 241.872,
# #      308.217, 136.94, 307.369, 553.167, 554.914, 192.419, 420.415, 294.107, 217.589, 692.023, 473.032, 105.323, 606.55,
# #      639.627, 435.706, 170.91, 459.022, 250.66, 501.261, 366.466, 377.171, 429.418, 564.94, 229.695, 546.64, 561.047,
# #      181.901, 626.526, 147.102, 660.029, 349.311, 660.247, 430.769, 360.323, 313.614, 628.757, 311.015, 128.184,
# #      415.379, 646.721, 281.951, 360.501, 290.347, 517.757, 664.794, 681.265, 565.656, 698.674, 460.602, 152.034,
# #      442.409, 275.837, 135.387, 129.218, 351.624, 383.082, 645.515, 289.407, 669.774, 262.511, 498.04, 172.254, 130.168,
# #      450.653, 156.621, 116.443, 161.901, 397.044, 606.848, 639.945, 183.997, 280.839, 223.443, 261.847, 220.468,
# #      594.236, 568.99, 434.57, 479.659, 219.229, 404.354, 650.625, 479.509, 209.164, 460.074, 308.001, 202.479, 465.538,
# #      318.002, 414.398, 207.439, 517.465, 379.924, 406.289, 147.254, 432.013, 237.42, 504.671, 348.994, 323.333, 279.067,
# #      114.095, 604.383, 648.459, 280.838, 404.158, 336.924, 336.62, 108.171, 380.216, 484.792, 467.784, 265.179, 462.757,
# #      197.229, 486.306, 202.772, 340.053, 672.187, 235.696, 260.696, 158.054, 658.265, 138.417, 300.293, 642.366,
# #      390.303, 400.184, 222.741, 389.636, 301.409, 265.682, 104.948, 687.524, 417.769, 291.218, 552.776, 553.046,
# #      578.983, 108.877, 567.856, 373.813, 424.414, 243.171, 337.415, 431.634, 647.743, 678.324, 610.266, 381.86, 380.008,
# #      623.539, 171.194, 546.794, 640.408, 634.213, 599.491, 186.692, 575.07, 530.216, 689.079, 550.012, 546.853, 194.003,
# #      625.962, 682.644, 273.422, 596.562, 387.375, 477.353, 608.354, 119.266, 241.196, 137.307, 667.757, 513.438,
# #      338.069, 299.775, 291.435, 613.412, 116.387, 179.952, 378.876, 271.696, 415.171, 236.227, 367.065, 509.557,
# #      494.745, 423.239, 586.293, 246.697, 383.296, 686.45, 185.12, 255.65, 195.638, 166.39, 173.878, 152.838, 507.591,
# #      123.391, 499.618, 157.904, 577.092, 304.116, 422.64, 250.424, 696.983, 414.85, 189.478, 364.887, 466.21, 119.485,
# #      412.887, 586.218, 447.74, 183.552, 677.289, 223.45, 185.949, 533.777, 447.152, 564.584, 382.712, 426.871, 669.71,
# #      378.592, 238.398, 522.739, 666.389, 337.268, 339.416, 447.222, 558.713, 571.564, 591.821, 554.211, 696.286,
# #      128.969, 201.883, 409.106, 588.027, 470.924, 649.973, 522.456, 544.707, 561.075, 342.033, 336.406])
# # y_setup.extend(
# #     [309.622, 41.497, 590.12, 607.585, 643.853, 568.515, 676.947, 337.533, 102.452, 319.196, 303.585, 36.036, 47.49,
# #      306.554, 204.316, 150.153, 581.626, 177.356, 568.853, 11.763, 317.32, 522.371, 67.575, 279.964, 609.915, 379.256,
# #      351.055, 78.342, 180.828, 234.483, 448.13, 493.362, 114.964, 627.848, 635.749, 673.636, 536.482, 627.144, 42.207,
# #      298.907, 291.604, 43.256, 396.399, 613.853, 151.208, 520.581, 213.78, 587.97, 266.998, 6.949, 590.313, 75.494,
# #      86.722, 97.891, 316.631, 335.961, 504.29, 568.34, 693.597, 43.606, 221.278, 75.126, 379.873, 388.62, 145.586,
# #      594.967, 80.002, 401.744, 570.712, 33.507, 122.654, 457.233, 159.517, 435.405, 125.934, 166.519, 234.638, 453.441,
# #      406.716, 292.116, 397.569, 217.853, 649.593, 4.858, 59.299, 373.233, 77.303, 313.532, 34.719, 603.315, 615.736,
# #      352.164, 537.421, 28.048, 48.474, 607.895, 460.07, 321.066, 282.569, 494.39, 387.455, 258.518, 650.21, 84.92,
# #      644.419, 693.725, 605.331, 337.444, 462.573, 165.631, 75.366, 454.714, 424.846, 447.722, 341.35, 625.452, 314.213,
# #      33.051, 83.436, 523.636, 577.449, 660.846, 528.211, 174.652, 607.058, 124.651, 566.541, 229.936, 319.101, 306.412,
# #      85.977, 587.564, 472.056, 370.043, 498.597, 64.316, 512.221, 385.441, 577.954, 215.903, 151.251, 51.253, 693.117,
# #      81.005, 493.296, 611.41, 647.455, 554.668, 49.429, 406.145, 463.595, 33.528, 488.242, 674.321, 691.605, 140.373,
# #      622.705, 283.802, 114.251, 434.348, 561.142, 684.95, 21.633, 564.581, 577.978, 404.883, 520.247, 136.367, 286.98,
# #      412.5, 599.255, 337.11, 80.423, 294.758, 162.285, 637.777, 226.56, 191.172, 633.514, 350.562, 644.909, 366.707,
# #      194.606, 37.128, 160.141, 347.429, 384.034, 200.658, 393.975, 427.263, 37.069, 691.046, 204.835, 134.603, 300.57,
# #      23.004, 232.164, 447.989, 129.248, 493.83, 542.987, 78.971, 236.547, 219.346, 93.639, 231.467, 344.523, 589.362,
# #      474.731, 494.777, 128.499, 239.386, 197.311, 453.567, 261.226, 604.405, 232.581, 493.139, 376.533, 351.92, 22.014,
# #      242.484, 230.806, 105.438, 38.174, 457.302, 597.025, 476.049, 630.267, 445.201, 411.442, 522.127, 530.89, 410.671,
# #      272.98, 644.199, 209.356, 15.205, 580.102, 80.413, 195.759, 188.185, 484.282, 241.804, 602.525, 204.729, 686.136,
# #      79.258, 84.344, 497.932, 119.721, 67.345, 93.966, 105.97, 101.092, 412.535, 404.917, 656.757, 693.967, 163.579,
# #      248.672, 619.807, 599.396, 197.893, 636.164, 56.374, 110.773, 86.746, 487.088, 442.434, 371.841, 303.043, 110.06,
# #      282.735, 279.833, 559.13, 211.631, 26.278, 599.585, 361.187, 70.813, 513.594, 478.795, 240.045, 541.298, 84.043,
# #      61.655, 640.262, 507.252, 48.218, 330.504, 585.613, 464.698, 662.56, 492.231, 519.683, 27.71, 175.15, 501.42,
# #      353.157, 502.475, 254.178, 271.402, 265.131, 583.194, 517.668, 387.285, 660.632, 56.62, 125.687, 291.131, 674.06,
# #      388.194, 81.442, 354.472, 432.506, 610.206, 168.861, 514.866, 344.262, 478.756, 71.052, 94.28, 540.426, 454.888,
# #      202.671, 72.594, 155.99, 678.141, 63.028, 641.128, 698.145, 695.359, 282.584, 380.425, 166.224, 347.868, 654.145,
# #      350.821, 662.717, 222.424, 14.992, 566.571, 437.687, 679.999, 57.275, 178.3, 168.169, 189.656, 641.014, 211.026,
# #      301.612, 668.951, 614.781, 189.058, 43.39, 149.453, 496.865, 357.898, 300.394, 236.938, 174.04, 324.475, 679.098,
# #      208.221, 167.84, 131.431, 242.786, 87.654, 334.525, 62.668, 123.376, 54.155, 533.718, 297.887, 247.788, 544.826,
# #      223.462, 243.655, 38.212, 289.473, 81.604, 372.599, 496.048, 509.072, 448.468, 306.098, 471.42, 270.621, 300.98,
# #      457.94, 635.363, 433.869, 405.093, 575.065, 7.565, 491.698, 110.209, 92.381, 29.158, 668.469, 31.275, 350.355,
# #      459.198, 534.461, 417.166, 635.934, 462.82, 470.902, 631.685, 297.714, 439.96, 198.072, 287.621, 247.145, 317.915,
# #      45.807, 6.941, 570.827, 617.0, 97.696, 566.353, 239.932, 342.639, 23.752, 85.596, 478.251, 182.493, 105.575,
# #      329.537, 306.065, 567.311, 344.368, 435.264, 678.912, 415.861, 341.515, 609.749, 551.929, 521.07, 396.917, 209.884,
# #      112.865, 295.861, 578.955, 96.445, 698.503, 448.976, 12.027, 569.104, 560.832, 396.559, 260.597, 680.248, 324.195,
# #      576.07, 357.773, 338.462, 383.887, 307.084, 400.612, 113.252, 39.06, 178.65, 323.574, 11.312, 354.312, 98.134,
# #      250.935, 37.389, 423.789, 216.029, 47.996, 366.295, 529.149, 104.774, 414.605, 4.272, 289.076, 92.59, 555.825,
# #      171.885, 32.857, 585.654, 24.407, 646.933, 153.931, 637.848, 36.496, 529.137, 237.09, 673.122, 647.976, 100.021,
# #      338.527, 221.345, 145.159, 304.875, 340.484, 538.353, 337.721, 526.58, 280.334, 283.386, 40.645, 49.784, 164.194,
# #      565.714, 290.946, 619.681, 45.835, 192.779, 38.954, 121.185, 537.378, 674.473, 423.542, 298.244, 267.277, 458.909,
# #      370.037, 39.377, 411.748, 585.923, 182.344, 39.074, 649.597, 362.767, 10.046, 196.579, 411.047, 144.845, 158.578,
# #      646.17, 388.689, 113.203, 407.26, 333.547, 282.736, 64.983, 665.837, 169.483, 499.219, 391.283, 259.973, 186.096,
# #      309.208, 330.081, 396.974, 82.97, 62.766, 175.165, 694.227, 328.964, 512.443, 649.051, 16.565, 432.019, 457.647,
# #      610.419, 598.695, 664.526, 123.214, 344.362, 607.726, 504.793, 216.551, 358.169, 421.361, 144.199, 528.732,
# #      490.922, 293.244, 632.62, 284.285, 222.411, 547.978, 589.583, 670.225, 674.441, 95.152, 403.159, 567.721, 573.905,
# #      78.16, 239.605, 647.124, 466.818, 690.191, 42.073, 580.151, 141.267, 484.74, 337.831, 354.935, 660.176, 402.942,
# #      0.823, 307.218, 673.443, 647.875, 69.407, 448.994, 38.418, 340.572, 159.05, 427.564, 183.438, 450.794, 363.89,
# #      409.875, 529.659, 155.648, 344.385, 619.392, 165.511, 458.146, 646.35, 124.048, 365.984, 642.58, 80.513, 84.307,
# #      298.916, 445.391, 574.708, 309.369, 264.77, 254.152, 682.015, 295.187, 686.607, 524.786, 505.424, 186.012, 498.718,
# #      439.828, 602.156, 347.077, 193.546, 619.794, 521.621, 424.961, 453.926, 653.087, 669.602, 32.143, 479.123, 502.938,
# #      332.998, 179.664, 554.335, 249.966, 510.899, 68.444, 534.879, 6.645, 203.481, 589.658, 325.197, 533.249, 366.188,
# #      506.252, 675.632, 477.442, 458.908, 19.96, 498.681, 560.489, 42.001, 688.565, 629.939, 222.731, 274.854, 632.72,
# #      519.49, 43.005, 689.368, 194.466, 362.994, 78.006, 203.299, 657.146, 181.224, 548.652, 28.255, 272.666, 487.909,
# #      488.62, 239.265, 336.935, 695.498, 142.118, 31.022, 55.625, 690.277, 131.839, 249.052, 435.42, 153.525, 656.58,
# #      373.454, 291.346, 261.675, 480.192, 15.008, 209.864, 420.3, 514.783, 651.124, 308.105, 547.887, 516.159, 207.111,
# #      436.629, 604.441, 57.636, 625.214, 405.799, 463.403, 131.648, 305.976, 278.94, 592.752, 687.204, 52.932, 291.926,
# #      461.642, 218.701, 5.834, 27.296, 245.443, 358.228, 285.634, 305.65, 603.391, 551.838, 698.939, 485.476, 529.542,
# #      35.537, 454.491, 396.062, 1.344, 544.507, 390.86, 384.439, 538.664, 195.937, 156.389, 355.236, 473.471, 241.9,
# #      165.601, 378.713, 291.006, 116.014, 588.006, 528.262, 541.483, 125.27, 305.821, 308.729, 259.972, 268.517, 575.361,
# #      226.386, 613.002, 94.523, 74.819, 581.488, 517.508, 533.247, 201.738, 43.996, 201.82, 442.156, 403.544, 207.84,
# #      109.754, 491.323, 91.581, 380.175, 184.811, 370.887, 259.533, 191.208, 162.988, 485.357, 687.087, 127.791, 83.409,
# #      544.321, 59.404, 564.872, 476.233, 312.539, 237.956, 543.698, 620.556, 517.673, 382.196, 445.409, 478.536, 378.173,
# #      80.432, 386.597, 9.732, 91.632, 217.485, 644.892, 554.815, 612.976, 501.096, 586.205, 644.949, 102.678, 275.479,
# #      624.058, 404.256, 250.488, 529.405, 599.294, 637.772, 672.461, 209.135, 403.312, 681.965, 380.491, 159.154,
# #      419.056, 289.686, 352.147, 474.58, 58.547, 289.854, 244.524, 128.847, 173.251, 185.442, 606.39, 107.21, 445.015,
# #      255.805, 108.968, 494.214, 399.965, 533.867, 14.504, 649.659, 387.713, 226.146, 543.171, 489.651, 192.362, 268.46,
# #      683.196, 525.37, 283.302, 324.795, 696.408, 432.927, 265.568, 246.452, 264.809, 620.252, 255.75, 394.45, 33.115,
# #      391.264, 500.815, 657.721, 632.315, 263.093, 361.764, 62.391, 677.645, 397.825, 458.535, 419.069, 626.353, 354.065,
# #      436.867, 29.761, 75.764, 337.199, 639.456, 477.028, 100.372, 158.105, 509.405, 374.895, 123.904, 48.841, 53.11,
# #      78.189, 607.801, 552.845, 15.678, 307.098, 476.764, 364.347, 656.266, 79.65, 108.183, 115.455, 277.506, 396.329,
# #      399.457, 64.591, 311.779, 478.56, 9.585, 21.339, 432.088, 134.091, 137.516, 335.053, 48.239, 304.44, 82.151,
# #      218.047, 512.65, 76.545, 501.101, 53.525, 165.339, 627.804, 598.659, 200.989, 324.99, 290.437, 224.251, 340.854,
# #      644.502, 515.362, 285.878, 537.433, 556.724, 97.402, 302.995, 202.125, 262.254, 437.045, 354.286, 51.652, 491.208,
# #      108.86, 447.617, 245.651, 209.802, 389.767, 278.763, 249.467, 305.051, 73.656, 249.431, 271.923, 107.654, 270.681,
# #      544.164, 87.011, 536.9, 678.882, 114.048, 352.617, 618.448, 465.524, 69.472, 191.628, 562.259, 91.481, 61.164,
# #      423.114, 89.508, 531.427, 430.307, 43.133, 308.88, 195.97, 520.081, 373.642, 649.13, 426.715, 281.475, 65.61,
# #      133.215, 528.543, 585.684, 95.79, 509.569, 621.299, 239.6, 133.506, 254.233, 1.075, 558.4, 630.741, 170.124,
# #      114.015])
#
# '''fixed UE setup'''
# x_setup.extend([184.75, 362.147, 478.3])
# y_setup.extend([148.16, 568.29, 400.6])
#
# '''plotting setup...'''
# # plt.scatter(x_setup[:-K], y_setup[:-K])
# # for k in range(K):
# #     plt.scatter(x_setup[-1 - k], y_setup[-1 - k], color='red')
# # plt.title(header)
# # plt.show()
#
# '''calculate distances (a: BS -> scatt; b: scatt -> UE)'''
# distances_a = []  # staat vast, dus moet niet op voorhand gegenereerd worden
# for m in range(M):
#     distances_a_i = []
#     for s in range(S):
#         distances_a_i.append(
#           np.sqrt((x_setup[m] - x_setup[-(s + 1 + K)]) ** 2 + (y_setup[m] - y_setup[-(s + 1 + K)]) ** 2))
#     distances_a.append(distances_a_i)
#
# '''calc channel vector for UE @original place'''
# H = []
# wH = []
# for k in range(K):
#     h_k = []
#     for m in range(M):
#         strength = []
#         for s in range(S):
#             dist = distances_a[s][m] + np.sqrt(
#                 (x_setup[-1 - k] - x_setup[-(s + 1 + K)]) ** 2 + (y_setup[-1 - k] - y_setup[-(s + 1 + K)]) ** 2)
#             strength.append(np.exp(1j * 2 * np.pi * (dist % 1)))  # energieschaling is hier 1 op wortel M
#         h_k.append(sum(strength) / np.exp(np.pi))
#     h_k = np.array(h_k)
#     H.append(h_k)
# H = np.array(H)
# wH = H.conj().T
#
#
# '''raster'''
# y1 = list(range(-100, 105, 10))
# x1 = list(range(-100, 105, 10))
# y2 = list(range(-500, -100, 10))
# x2 = list(range(-500, -100, 10))
# y3 = list(range(110, 510, 10))
# x3 = list(range(110, 510, 10))
# y2.extend(y1)
# y2.extend(y3)
# x2.extend(x1)
# x2.extend(x3)
# y = [item * resolution / 10 + y_setup[-1] for item in y2]  # alleen laatste UE w basis UE (veld daar rond w berekend)
# x = [item * resolution / 10 + x_setup[-1] for item in x2]
# '''centrale plaats antenne: x[int(len(x)/2)], y[int(len(y)/2)]'''
# # plt.scatter(x, y)
# # plt.scatter(x_setup[-1], y_setup[-1], color='red')
# # plt.title(header)
# # plt.show()
#
# ampl = np.zeros(shape=(len(x), len(y)))
# # for a in range(len(x)):
# #     for b in range(len(y)):
# hdx = []
# for m in range(M):
#     strength = []
#     for s in range(S):
#         dist_b = np.sqrt((x[int(len(x) / 2)] - x_setup[-(s + K + 1)]) ** 2 + (y[int(len(x) / 2)] - y_setup[-(s + K + 1)]) ** 2)
#         dist = distances_a[s][m]
#         strength.append(np.exp(1j * 2 * np.pi * (dist % 1)))  # energieschaling is hier 1 op wortel M
#     hdx.append(sum(strength) / np.exp(np.pi))
#
# desired_signal = np.matmul(wH, hdx) / M * np.fft.fft(signal_wave)
# ici = []
# for k in range(K - 1):
#     ici.append(np.matmul(wH, H[k + 1]) / M * np.fft.fft(signal_waves_UEs[k]))
# intra_cell_interference = sum(ici)  # received signal
# if noise is not None:
#     received_noise = np.matmul(wH, noise) / M
#     yr = desired_signal + intra_cell_interference + received_noise
# else:
#     yr = desired_signal + intra_cell_interference
# sr = [cmath.polar(i) for i in yr]  # in polar coordinates
# amplitudes = [item[0] if int(item[1]) == 0 else -item[0] for item in sr]
# ratio_out_vs_rt_ampl = amplitudes[np.where(max(signal_wave) == signal_wave)[0][0]] / signal_wave[
#     np.where(max(signal_wave) == signal_wave)[0][0]]
# ratio_amplitudes_dB = 20 * np.log10(ratio_out_vs_rt_ampl)
# # print(a)
# plt.plot((np.fft.fft(signal_wave).real)[:100])
# plt.plot(amplitudes[:100])
# plt.title('--M=' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(K))
# plt.show()
# # plt.plot(signal_wave.real)
# # plt.plot(amplitudes)
# # plt.title('--M=' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(K))
# # plt.show()
#
# # # fig = px.imshow(z=ampl, x=x, y=y, color_continuous_scale=px.colors.diverging.Portland)
# # ma = max([max(l) for l in ampl])
# # mi = -5
# # fig = go.Figure(data=go.Heatmap(
# #     z=ampl,
# #     x=x,
# #     y=y,
# #     colorscale='Jet'
# #     # zmin=mi,
# #     # zmax=ma
# # ))
# #
# # fig.add_trace(go.Scatter(
# #     x=x_setup[:-1],
# #     y=y_setup[:-1],
# #     mode='markers',
# #     name='scatterers',
# #     marker_color='blue'
# # ))
# #
# # fig.add_trace(go.Scatter(
# #     x=[x_setup[-1]], y=[y_setup[-1]],
# #     name='antenna',
# #     mode='markers',
# #     marker_color='red',
# #     text=str(ma)
# # ))
# # fig.update_layout(autosize=False,
# #                   width=850,
# #                   height=800,
# #                   title=header,
# #                   font=dict(size = 10))
# # plotly.offline.plot(fig,
# #                     filename='C:/Users/margo/OneDrive/Documenten/Masterproef/simulation/result plots/geomodel---' + '(' + datetime.datetime.now().strftime("%d-%m-%Y_%H-%M") + ')' + titel + '.html')
# # fig.show()











































'''rings2'''
# ma = max([max(i) for i in ampl])
# amplis = [20 * np.log10(i / ma) for i in ampl]
# breedte_ring = 0.1
# aantal_steps_per_ring = 10
# overgangscirkel = [[int(len(amplis) / 2),int(len(amplis) / 2)] for i in range(0,360)]
# aantal_ringen = int(min((x[-1]-x[0]),(y[-1]-y[0]))/(2*breedte_ring))
# data =  [[] for i in range(aantal_ringen)]
# for k in range(aantal_ringen):
#     for i in range(0, 360):
#         hoek = i
#         x_step = breedte_ring*np.cos(hoek)/(resolution*aantal_steps_per_ring)
#         y_step = breedte_ring*np.sin(hoek)/(resolution*aantal_steps_per_ring)
#         grafiek = []
#         ix = overgangscirkel[i - 1][0]
#         ij = overgangscirkel[i - 1][1]
#         for j in range(aantal_steps_per_ring+1):
#             if ix < len(amplis)-1 and ij<  len(amplis[0])-1:
#                 if ix % 1 != 0 and ij % 1 != 0:
#                     x1 = int(ix)
#                     x2 = x1 + 1
#                     y1 = int(ij)
#                     y2 = y1 + 1
#                     dx = abs(ix - x1)
#                     inter1 = amplis[x1][y1] * (1 - dx) + dx * amplis[x2][y1]
#                     inter2 = amplis[x1][y2] * (1 - dx) + dx * amplis[x2][y2]
#                     dy = abs(ij - y1)
#                     inter = inter1 * (1 - dy) + inter2 * dy
#                     grafiek.append(inter)
#                 elif ix % 1 == 0:
#                     y1 = int(ij)
#                     y2 = y1 + 1
#                     dy = abs(ij - y1)
#                     inter = amplis[int(ix)][y1] * (1 - dy) + amplis[int(ix)][y2] * dy
#                     grafiek.append(inter)
#                 elif ij % 1 == 0:
#                     x1 = int(ix)
#                     x2 = x1 + 1
#                     dx = abs(ix - x1)
#                     inter = amplis[x1][int(ij)] * (1 - dx) + dx * amplis[x2][int(ij)]
#                     grafiek.append(inter)
#                 ix += x_step
#                 ij += y_step
#         overgangscirkel[i-1] = [ix, ij]
#         data[k].extend(grafiek)
# for i in range(len(data)):
#     print(functions.avg(data[i]),np.var(data[i]), np.sqrt(np.var(data[i]))) #avg, var, standard deviation
# jos = []
# for i in range(len(data)): #plt variance
#     jos.append(np.var(data[i]))
# plt.plot(jos)
# plt.show()
# '''cdf (cumulative distribution function'''
# for i in range(len(data)):
#     data_sorted = np.sort(data[i])
#     # calculate the proportional values of samples
#     p = 1. * np.arange(len(data[i])) / (len(data[i]) - 1)
#     # plot the sorted data:
#     fig = plt.figure()
#     ax1 = fig.add_subplot(121)
#     ax1.plot(p, data_sorted)
#     ax1.set_xlabel('$p$')
#     ax1.set_ylabel('$x$')
#     ax2 = fig.add_subplot(122)
#     ax2.plot(data_sorted, p)
#     ax2.set_xlabel('$x$')
#     ax2.set_ylabel('$p$')
#     plt.title(i)
#     plt.show()









































'''rings1'''
# ma = max([max(i) for i in ampl])
# amplis = [20 * np.log10(i / ma) for i in ampl]
# breedte_ring = 0.1
# aantal_steps_per_ring = 10
# data = []
# overgangscirkel = []
# for i in range(1, 360):
#     hoek = i
#     x_step = breedte_ring*np.cos(hoek)/(resolution*aantal_steps_per_ring)
#     y_step = breedte_ring*np.sin(hoek)/(resolution*aantal_steps_per_ring)
#     ix = int(len(amplis) / 2)
#     ij = int(len(amplis) / 2)
#     grafiek = [amplis[ix][ij]]
#     for j in range(aantal_steps_per_ring):
#         ix += x_step
#         ij += y_step
#         if ix % 1 != 0 and ij % 1 != 0:
#             x1 = int(ix)
#             x2 = x1 + 1
#             y1 = int(ij)
#             y2 = y1 + 1
#             dx = abs(ix - x1)
#             inter1 = amplis[x1][y1] * (1 - dx) + dx * amplis[x2][y1]
#             inter2 = amplis[x1][y2] * (1 - dx) + dx * amplis[x2][y2]
#             dy = abs(ij - y1)
#             inter = inter1 * (1 - dy) + inter2 * dy
#             grafiek.append(inter)
#         elif ix % 1 == 0:
#             y1 = int(ij)
#             y2 = y1 + 1
#             dy = abs(ij - y1)
#             inter = amplis[int(ix)][y1] * (1 - dy) + amplis[int(ix)][y2] * dy
#             grafiek.append(inter)
#         elif ij % 1 == 0:
#             x1 = int(ix)
#             x2 = x1 + 1
#             dx = abs(ix - x1)
#             inter = amplis[x1][int(ij)] * (1 - dx) + dx * amplis[x2][int(ij)]
#             grafiek.append(inter)
#     data.extend(grafiek)
# print(functions.avg(data))
# print(np.var(data))









































'''Jens approved pattern'''
# t = np.linspace(-np.pi, np.pi + 0.01, num=10000)
# temp = [cmath.polar(i) for i in wH] # wH = antenna weights
# amplitude = [i[0] for i in temp]
# phase = [i[1] for i in temp]
# rad_pat = []
# for i in range(len(wH)):
#     rad_pat.append(amplitude[i]*np.exp(1j*(phase[i]))*np.exp(1j*i*np.pi*np.cos(t-np.pi/2)))
# radi_pattern = sum(rad_pat)
# plt.polar(t,abs(radi_pattern))
# plt.show()



































'''most credible try patern'''
# wH_fft = np.fft.ifft(wH)
# t = np.linspace(-np.pi, np.pi + 0.01, num=10000)
# temp = [cmath.polar(i) for i in wH]
# amplitude = [i[0] for i in temp]
# phase = [i[1] for i in temp]
# rad_pat = []
# for i in range(len(wH)):
#     rad_pat.append(amplitude[i]*np.exp(1j*i*(phase[i]-phase[0]))*np.exp(1j*i*np.pi*np.cos(t)))
# radi_pate = sum(rad_pat)
# plt.polar(t,radi_pate.real)
# plt.polar(t,radi_pate.imag)
# plt.polar(t,abs(radi_pate))
# plt.show()




















































'''patern probeersel 3'''
# jep = np.fft.fft(wH)
# t = np.linspace(-np.pi/2, np.pi/2 + 0.01, num=M)
# gerard = [cmath.polar(i) for i in wH]
# ampi = [i[0] for i in gerard]
# fasse = [i[1] for i in gerard]
# Josfin = []
# for i in range(len(wH)):
#     Josfin.append(ampi[i]*np.exp(1j*(fasse[i]-fasse[0]))*np.exp(1j*np.pi*np.cos(t)))
# plt.polar(t,[abs(i) for i in Josfin])
# plt.show()









































'''gemiddelde doorsnede-algemener'''
# tot = amplis[int(len(y)/2)][int(len(amplis)/2):]
# for i in range(1, 360):
#     hoek = i
#     x_step = np.cos(hoek)
#     y_step = np.sin(hoek)
#     ix = int(len(amplis)/2)
#     ij = int(len(amplis)/2)
#     grafiek = [amplis[ix][ij]]
#     for j in range(int(len(amplis)/2)):
#         ix += x_step
#         ij += y_step
#         if ix % 1 != 0 and ij % 1 != 0:
#             x1 = int(ix)
#             x2 = x1 + 1
#             y1 = int(ij)
#             y2 = y1 + 1
#             dx = abs(ix - x1)
#             inter1 = amplis[x1][y1] * (1 - dx) + dx * amplis[x2][y1]
#             inter2 = amplis[x1][y2] * (1 - dx) + dx * amplis[x2][y2]
#             dy = abs(ij - y1)
#             inter = inter1 * (1 - dy) + inter2 * dy
#             grafiek.append(inter)
#         elif ix % 1 == 0:
#             y1 = int(ij)
#             y2 = y1 + 1
#             dy = abs(ij - y1)
#             inter = amplis[int(ix)][y1] * (1 - dy) + amplis[int(ix)][y2] * dy
#             grafiek.append(inter)
#         elif ij % 1 == 0:
#             x1 = int(ix)
#             x2 = x1 + 1
#             dx = abs(ix - x1)
#             inter = amplis[x1][int(ij)] * (1 - dx) + dx * amplis[x2][int(ij)]
#             grafiek.append(inter)
#     tot = (tot + grafiek) / 360
# w = np.linspace(0, int(len(amplis)/2) + 0.01, num=1000)
# w = w*resolution
# plt.plot((np.linspace(0, int(len(amplis)/2) + 0.01, num=len(tot)))*resolution,tot)
# plt.plot(w*resolution , abs(bessel.j0(2 * np.pi * w))*17-17)
# headere = titel = '--M=' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(1) + '_resolution=' + str(
#     resolution) + '_noise-x__pathloss_random_fase_groots'
# plt.title(headere, fontsize=8)
# plt.show()
# fig = go.Figure(data=go.Scatter(x=w*resolution, y=abs(bessel.j0(2 * np.pi * w))*17-17))
# fig.add_trace(go.Scatter(x=(np.linspace(0, int(len(amplis)/2) + 0.01, num=len(tot)))*resolution,y=tot))
# fig.show()




























































'''gemiddelde doorsnede'''
# tot = amplis[int(len(y)/2)][50:]
# for i in range(1, 36):
#     hoek = i*10
#     x_step = np.cos(hoek)
#     y_step = np.sin(hoek)
#     ix = 50
#     ij = 50
#     grafiek = [amplis[ix][ij]]
#     for j in range(50):
#         ix += x_step
#         ij += y_step
#         if ix % 1 != 0 and ij % 1 != 0:
#             x1 = int(ix)
#             x2 = x1 + 1
#             y1 = int(ij)
#             y2 = y1 + 1
#             dx = abs(ix - x1)
#             inter1 = amplis[x1][y1] * (1 - dx) + dx * amplis[x2][y1]
#             inter2 = amplis[x1][y2] * (1 - dx) + dx * amplis[x2][y2]
#             dy = abs(ij - y1)
#             inter = inter1 * (1 - dy) + inter2 * dy
#             grafiek.append(inter)
#         elif ix % 1 == 0:
#             y1 = int(ij)
#             y2 = y1 + 1
#             dy = abs(ij - y1)
#             inter = amplis[int(ix)][y1] * (1 - dy) + amplis[int(ix)][y2] * dy
#             grafiek.append(inter)
#         elif ij % 1 == 0:
#             x1 = int(ix)
#             x2 = x1 + 1
#             dx = abs(ix - x1)
#             inter = amplis[x1][int(ij)] * (1 - dx) + dx * amplis[x2][int(ij)]
#             grafiek.append(inter)
#     tot = (tot + grafiek) / 2
# plt.plot(tot)
# t = np.linspace(0, 50 + 0.01, num=1000)
# w = np.linspace(0, 50 + 0.01, num=1000)
# w = w/10
# plt.plot(t, abs(bessel.j0(2 * np.pi * w))*20-20)
# plt.title(header, fontsize=8)
# plt.show()







































'''volgende poging tot radiation patern'''
# t = np.linspace(-np.pi, np.pi + 0.01, num=M)
# Josfin = []
# for i in range(len(wH)):
#     Josfin.append(wH[i]*(t**i))
# plt.polar(t,abs(sum(Josfin)))
# plt.show()







































'''geomodel update 4/6'''
# '''definitions'''
# M = 128
# message_bits = np.array(
#     [1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1])
# signal_wave = QAM_generator.create_QAM_signal(message_bits, 64)
# # noise v:
# # noise = np.random.normal(0, np.sqrt(0.5), (M,len(signal_wave))) + 1j * np.random.normal(0, np.sqrt(0.5), (M,len(signal_wave)))
# # noise x:
# noise = None
# S = 100
# dM = 0.5
# resolution = 1
# titel = '--M=' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(1) + '_resolution=' + str(
#     resolution) + '_noise-x__met_random_fase_i_scatt_pathloss_gn_golfjes'
# header = '(' + datetime.datetime.now().strftime("%Y-%m-%d_%H:%M") + ')' + titel
# print(header)
#
# # place antennas (line @ x=0)
# y_setup = list(range(40000 - int(dM * 100 * M / 2), 40000 - int(dM * 100 * M / 2) + int(dM * 100 * M), int(dM * 100)))
# y_setup = [i * 0.010 for i in y_setup]
# x_setup = list([0 for i in y_setup])
# # # random scatt setup
# # # place scatterers (random)
# # for i in range(aantal_scatterers):
# #     x_setup.append(random.randint(100000, 700000) / 1000)
# #     y_setup.append(random.randint(0, 700000) / 1000)
# # # place UE
# # x_setup.append(450.3)
# # y_setup.append(400.6)
# # random_phases = np.random.random(S)
#
# '''fixed scatt setup'''
# # place scatterers (fixed)
# x_setup.extend(
#     [136.904, 324.208, 372.304, 212.753, 616.319, 513.373, 589.705, 525.047, 484.864, 538.594, 499.258, 110.835,
#      115.315, 236.064, 544.383, 66.021, 272.965, 669.449, 122.29, 566.642, 295.405, 114.352, 259.209, 612.662, 203.166,
#      90.857, 18.275, 206.37, 231.526, 216.672, 174.079, 242.721, 331.709, 239.248, 122.876, 433.624, 417.855, 585.446,
#      682.424, 651.79, 169.733, 284.347, 416.862, 168.557, 328.092, 28.119, 45.147, 617.275, 90.954, 646.08, 337.969,
#      471.871, 698.868, 546.794, 274.186, 387.491, 451.741, 88.846, 589.791, 18.122, 356.255, 54.018, 584.868, 337.57,
#      434.171, 333.598, 393.49, 269.702, 267.907, 510.373, 112.775, 119.559, 445.755, 519.162, 130.22, 588.997, 520.714,
#      454.781, 458.637, 642.786, 325.952, 57.881, 507.118, 247.208, 495.825, 671.144, 40.248, 323.388, 1.025, 221.4,
#      447.64, 327.338, 605.968, 371.518, 496.838, 227.601, 647.208, 622.315, 517.802, 63.759, 19.094, 385.701, 549.413,
#      570.511, 515.346, 235.257, 137.867, 638.515, 331.698, 680.446, 645.178, 304.417, 680.154, 110.715, 286.047,
#      486.166, 487.974, 135.729, 604.651, 568.487, 212.926, 17.506, 271.266, 219.229, 570.959, 596.891, 13.415, 684.413,
#      214.72, 563.859, 577.021, 249.689, 321.701, 10.718, 610.002, 353.747, 593.27, 392.984, 388.873, 380.876, 600.803,
#      263.679, 325.251, 60.873, 439.202, 400.512, 580.556, 391.437, 549.887, 86.23, 166.866, 515.734, 253.437, 152.785,
#      489.748, 694.288, 532.801, 317.6, 50.193, 685.889, 560.875, 161.76, 422.744, 364.383, 554.391, 447.738, 129.043,
#      577.847, 689.983, 8.836, 428.706, 335.81, 105.527, 97.203, 571.981, 671.844, 562.973, 221.606, 636.106, 110.035,
#      699.176, 277.163, 222.081, 325.943, 285.411, 636.263, 197.87, 416.336, 67.464, 415.67, 291.013, 33.061, 8.918,
#      49.858, 328.564, 54.573, 4.344, 50.347, 51.743, 496.179, 367.074, 64.579, 333.207, 656.409, 27.387, 47.638,
#      532.379, 165.86, 215.765, 91.726, 135.333, 228.438, 604.363, 134.16, 72.727, 633.675, 272.935, 563.061, 104.248,
#      635.887, 2.446, 535.386, 438.3, 194.888, 42.854, 409.752, 329.598, 360.081, 490.211, 231.422, 337.353, 201.797,
#      661.326, 40.502, 372.725, 205.558, 554.416, 625.857, 90.783, 596.917, 566.918, 124.526, 550.8, 338.193, 42.292,
#      88.566, 573.769, 68.553, 112.874, 97.028, 466.31, 200.83, 18.976, 545.632, 45.346, 0.094, 282.81, 447.611, 316.319,
#      560.398, 235.53, 240.622, 566.873, 289.45, 40.713, 28.413, 25.137, 458.19, 404.477, 323.798, 474.824, 215.766,
#      13.485, 462.984, 78.914, 118.746, 601.227, 43.007, 501.819, 471.749, 35.439, 87.112, 693.91, 502.595, 462.05,
#      172.686, 618.918, 484.401, 62.131, 439.691, 543.779, 322.187, 516.889, 159.758, 393.162, 678.431, 474.206, 348.753,
#      258.891, 671.065, 552.634, 441.636, 596.079, 98.259, 37.101, 488.444, 325.822, 626.88, 389.8, 548.068, 659.083,
#      146.503, 313.935, 30.201, 393.431, 455.945, 192.804, 125.254, 541.352, 12.559, 84.726, 587.429, 184.954, 401.679,
#      97.143, 651.125, 674.624, 209.206, 628.735, 671.423, 458.045, 249.327, 81.821, 144.69, 51.464, 30.813, 534.918,
#      228.721, 95.974, 175.725, 522.205, 351.513, 535.366, 624.434, 568.804, 296.052, 97.85, 237.518, 375.766, 682.837,
#      240.971, 81.808, 691.311, 617.623, 461.701, 545.279, 433.362, 318.413, 40.574, 627.943, 493.492, 59.65, 402.257,
#      474.253, 196.94, 48.395, 574.78, 225.859, 354.207, 47.021, 470.63, 308.343, 671.506, 496.394, 238.423, 119.999,
#      427.714, 89.063, 278.972, 574.778, 376.375, 607.685, 622.338, 235.663, 149.953, 69.949, 386.778, 297.638, 255.017,
#      387.466, 459.045, 635.096, 655.183, 338.452, 455.4, 137.018, 545.425, 449.75, 517.021, 43.893, 108.885, 152.785,
#      493.993, 537.661, 559.509, 358.183, 516.634, 107.621, 346.359, 435.643, 210.503, 313.497, 460.402, 427.947,
#      229.205, 595.543, 176.33, 280.388, 591.397, 486.547, 650.703, 440.446, 135.665, 245.497, 125.99, 591.799, 163.427,
#      363.518, 31.023, 386.795, 34.271, 157.464, 259.414, 649.807, 440.04, 654.22, 679.197, 624.405, 118.158, 259.204,
#      589.181, 261.432, 651.433, 454.975, 248.654, 409.516, 405.541, 362.911, 141.79, 646.825, 553.163, 176.27, 338.022,
#      174.474, 62.466, 80.166, 1.662, 541.685, 382.686, 652.131, 86.854, 648.679, 253.423, 614.786, 5.51, 460.175,
#      469.066, 58.409, 386.246, 463.714, 86.54, 460.672, 548.995, 63.607, 221.624, 493.55, 204.84, 679.582, 269.726,
#      347.996, 568.991, 698.238, 380.927, 696.539, 534.114, 76.426, 496.234, 433.766, 468.687, 269.405, 368.645, 342.771,
#      123.369, 362.986, 237.484, 39.134, 523.858, 563.845, 226.828, 152.131, 410.704, 465.316, 610.336, 1.643, 159.716,
#      269.198, 451.924, 274.02, 208.46, 463.127, 620.05, 82.754, 235.556, 545.612, 692.432, 525.942, 567.515, 628.756,
#      142.38, 416.931, 9.682, 355.944, 452.317, 213.84, 96.103, 28.68, 294.57, 202.264, 372.823, 26.168, 682.238,
#      636.673, 651.951, 611.198, 637.095, 668.506, 364.819, 244.448, 169.986, 302.057, 328.655, 137.511, 544.487, 42.146,
#      671.245, 598.855, 519.906, 165.888, 449.657, 478.559, 346.12, 312.175, 674.873, 397.358, 202.93, 149.896, 560.757,
#      669.873, 277.636, 429.665, 51.083, 64.401, 523.109, 494.169, 238.109, 278.305, 686.836, 525.911, 525.992, 530.726,
#      348.717, 698.055, 55.839, 582.527, 532.197, 632.384, 688.333, 584.233, 256.479, 451.483, 440.962, 459.016, 8.501,
#      37.502, 2.647, 625.91, 80.601, 534.618, 519.635, 642.368, 152.239, 491.556, 428.26, 132.554, 535.144, 506.652,
#      125.692, 332.832, 9.003, 378.662, 665.133, 327.107, 572.812, 491.72, 81.959, 441.653, 342.855, 7.299, 367.383,
#      627.269, 8.868, 223.148, 569.975, 211.76, 324.491, 193.638, 571.227, 457.913, 205.653, 445.799, 514.183, 519.01,
#      633.577, 376.101, 563.672, 340.407, 367.397, 95.848, 495.849, 20.059, 442.913, 677.953, 162.668, 24.494, 535.09,
#      88.732, 507.225, 441.898, 68.511, 143.923, 92.602, 221.153, 406.081, 175.983, 176.566, 97.574, 296.727, 249.642,
#      17.155, 656.574, 568.765, 589.541, 327.271, 428.389, 156.569, 429.165, 177.847, 647.341, 99.391, 653.927, 566.099,
#      388.814, 450.418, 298.141, 291.211, 177.135, 149.652, 365.211, 201.896, 383.144, 215.076, 150.205, 577.629,
#      333.259, 98.335, 434.655, 268.387, 94.523, 336.506, 663.641, 570.508, 520.647, 280.629, 62.942, 92.925, 189.531,
#      323.336, 519.824, 565.311, 158.403, 288.919, 203.967, 313.376, 204.614, 656.43, 204.489, 656.561, 600.304, 495.457,
#      236.736, 197.117, 320.082, 266.24, 554.2, 6.103, 244.102, 503.773, 430.264, 22.478, 344.352, 376.68, 519.669,
#      142.939, 480.018, 531.688, 436.421, 546.312, 239.544, 692.279, 117.822, 87.983, 146.069, 440.225, 453.301, 282.141,
#      676.628, 35.22, 625.437, 551.434, 276.971, 634.743, 33.651, 57.985, 394.06, 130.541, 562.422, 421.139, 111.001,
#      381.333, 193.494, 421.124, 433.224, 140.294, 674.34, 27.941, 491.561, 467.725, 493.485, 19.771, 27.666, 516.795,
#      248.895, 401.39, 429.439, 446.837, 277.137, 125.778, 207.169, 47.774, 333.502, 546.037, 564.353, 133.296, 454.95,
#      308.004, 237.793, 101.503, 181.689, 223.549, 176.617, 689.084, 249.535, 626.393, 487.154, 167.202, 320.73, 633.807,
#      464.109, 699.312, 631.309, 604.249, 33.871, 515.503, 80.52, 323.995, 192.843, 67.155, 13.507, 68.424, 389.838,
#      679.387, 89.367, 168.668, 498.603, 9.498, 206.07, 425.562, 76.794, 424.529, 44.945, 139.041, 474.713, 398.466,
#      323.289, 664.261, 534.917, 666.815, 110.289, 543.128, 450.485, 44.323, 640.996, 463.487, 313.09, 468.197, 137.509,
#      32.85, 523.862, 397.745, 227.004, 158.747, 385.42, 599.902, 400.779, 231.802, 560.686, 654.022, 307.869, 499.214,
#      87.033, 127.571, 484.315, 38.523, 445.737, 220.621, 625.33, 16.318, 24.76, 68.171, 108.338, 102.19, 664.794,
#      513.747, 365.313, 445.555, 678.058, 116.667, 264.229, 156.195, 561.312, 548.94, 577.315, 498.289, 312.723, 390.411,
#      221.441, 295.409, 160.44, 179.505, 114.77, 544.35, 200.441, 621.258, 85.22, 54.08, 510.711, 111.263, 9.019, 82.333,
#      627.064, 508.22, 574.094, 492.062, 305.345, 639.357, 407.679, 585.032, 626.526, 667.121, 238.953, 362.581, 130.56,
#      341.909, 17.85, 421.641, 77.899, 692.01, 504.924, 536.67, 499.769, 72.747, 502.766, 75.354, 84.953, 458.402,
#      54.036, 151.316, 329.756, 169.11, 553.856, 358.488, 215.333, 198.327, 674.727, 54.952, 341.97, 548.606, 361.305,
#      680.474, 293.118, 680.06, 28.598, 181.564, 593.949, 147.439, 398.383, 166.511, 285.656, 19.724, 401.01, 585.226,
#      223.169, 104.77, 418.563, 365.063, 214.693, 43.265, 394.913, 539.453, 372.103, 329.001, 626.524, 588.682, 569.43,
#      695.742, 650.405, 601.469, 587.919, 295.834, 43.625, 248.535, 642.28, 654.939, 621.497, 168.8, 117.214, 313.133,
#      251.267, 264.042, 664.738, 518.861, 275.06, 360.41, 524.216, 524.857, 482.086, 186.342, 201.422, 581.64, 357.524,
#      144.191, 69.787, 72.581, 34.855, 147.679, 19.97, 136.061, 477.243, 310.467, 538.869, 255.994, 33.232, 107.357,
#      656.498, 61.484, 161.413, 384.746, 339.392, 413.717, 97.307, 329.677, 569.769, 396.569, 307.58, 578.766, 198.618,
#      178.094, 453.233, 87.481, 350.801, 300.544, 333.179, 246.252, 46.208, 536.706, 116.112, 236.724, 114.908, 102.1,
#      403.057, 261.319])
# y_setup.extend(
#     [379.033, 672.871, 455.867, 680.98, 42.134, 188.184, 504.89, 634.655, 496.932, 623.65, 247.083, 405.661, 622.491,
#      674.211, 86.786, 350.438, 295.366, 460.69, 87.577, 676.61, 179.927, 493.366, 574.442, 574.976, 33.43, 279.476,
#      26.987, 479.001, 12.423, 340.564, 586.854, 78.247, 454.672, 177.2, 389.305, 693.428, 123.316, 592.967, 243.087,
#      301.146, 162.686, 330.611, 527.285, 397.695, 204.971, 683.649, 514.546, 179.83, 527.03, 644.308, 610.485, 517.692,
#      668.405, 247.895, 650.694, 370.607, 468.195, 644.474, 66.135, 578.946, 317.854, 331.506, 2.938, 365.347, 397.012,
#      189.649, 351.617, 282.849, 401.48, 422.254, 358.637, 287.527, 201.885, 534.421, 44.407, 611.717, 615.968, 450.467,
#      248.975, 273.296, 412.916, 668.351, 391.159, 575.022, 697.618, 250.063, 276.567, 190.568, 479.276, 357.103,
#      247.927, 174.511, 670.961, 445.223, 689.219, 543.402, 136.566, 430.415, 617.528, 301.942, 323.91, 558.82, 549.423,
#      305.65, 602.868, 327.84, 120.067, 391.551, 210.804, 35.33, 77.674, 277.867, 75.804, 114.333, 687.547, 414.774,
#      236.302, 173.579, 243.879, 76.618, 692.939, 177.783, 645.156, 162.495, 498.337, 484.882, 249.909, 0.711, 60.548,
#      600.432, 453.15, 399.295, 652.835, 535.07, 642.857, 298.112, 537.415, 409.941, 125.536, 253.23, 515.893, 169.161,
#      222.255, 695.336, 81.799, 326.909, 587.759, 79.285, 212.4, 404.79, 673.727, 209.2, 227.512, 245.297, 570.671,
#      651.903, 79.56, 321.161, 517.679, 319.292, 545.777, 222.357, 381.239, 522.329, 645.768, 422.09, 122.665, 256.376,
#      274.461, 210.604, 11.145, 454.262, 418.332, 614.248, 313.489, 343.883, 5.971, 211.166, 522.504, 103.409, 99.575,
#      119.153, 214.799, 6.18, 377.24, 356.881, 615.988, 255.747, 672.505, 358.376, 404.408, 83.711, 655.327, 109.08,
#      324.029, 429.56, 683.366, 566.195, 681.026, 286.642, 337.29, 451.697, 665.891, 11.395, 589.074, 509.933, 691.602,
#      338.413, 5.855, 543.778, 151.951, 422.031, 442.924, 70.074, 95.297, 603.647, 513.541, 329.0, 564.043, 632.274,
#      333.051, 417.54, 685.776, 685.387, 672.418, 403.283, 365.772, 527.438, 459.674, 618.45, 238.611, 18.642, 561.086,
#      106.523, 584.787, 243.109, 199.735, 170.417, 91.419, 328.411, 659.457, 138.692, 369.508, 493.629, 696.762, 135.578,
#      124.632, 625.847, 257.897, 76.164, 474.704, 224.14, 158.454, 120.834, 301.485, 365.632, 663.201, 428.086, 23.432,
#      188.455, 160.51, 639.933, 411.996, 425.464, 20.699, 137.854, 204.234, 82.259, 139.64, 256.857, 95.097, 278.059,
#      442.337, 610.335, 354.722, 169.793, 88.636, 398.601, 403.099, 247.207, 297.641, 361.797, 601.661, 412.736, 287.935,
#      388.207, 354.615, 467.562, 91.671, 317.675, 5.22, 546.958, 376.913, 292.864, 412.894, 341.552, 589.625, 683.455,
#      548.555, 273.375, 508.066, 286.43, 290.563, 218.282, 236.061, 640.923, 671.102, 382.945, 455.867, 117.961, 587.143,
#      45.198, 283.656, 625.75, 295.095, 32.268, 574.117, 78.412, 83.288, 255.547, 77.542, 331.729, 120.961, 257.22,
#      281.792, 542.58, 72.426, 699.335, 390.324, 575.764, 220.938, 645.482, 390.762, 420.104, 445.308, 422.458, 375.051,
#      12.944, 1.284, 197.622, 287.571, 21.117, 585.958, 361.325, 569.287, 172.38, 49.639, 110.89, 572.498, 110.322,
#      71.093, 164.27, 225.194, 390.711, 241.713, 670.169, 282.385, 227.257, 167.624, 572.737, 508.877, 179.737, 542.489,
#      299.881, 485.292, 342.351, 426.795, 420.921, 244.375, 138.856, 146.126, 505.455, 620.853, 698.542, 465.568,
#      518.723, 693.901, 279.365, 441.73, 641.033, 508.19, 590.668, 217.423, 242.385, 233.04, 264.126, 178.144, 313.869,
#      25.689, 63.96, 317.551, 189.522, 266.201, 337.021, 552.873, 399.102, 81.933, 588.723, 217.604, 353.474, 368.767,
#      573.271, 574.342, 29.681, 96.087, 76.105, 533.156, 161.447, 261.603, 154.78, 4.014, 125.576, 685.963, 173.883,
#      175.491, 294.369, 219.493, 209.778, 187.958, 590.472, 567.581, 315.81, 250.341, 185.713, 152.66, 490.621, 487.255,
#      674.074, 325.406, 203.521, 89.187, 344.601, 586.892, 40.293, 670.319, 94.169, 691.157, 77.85, 9.144, 151.599,
#      499.457, 181.051, 175.801, 69.329, 605.603, 31.039, 555.259, 54.798, 677.438, 123.852, 323.816, 658.617, 100.836,
#      588.684, 85.805, 676.345, 216.419, 91.81, 653.208, 260.716, 233.886, 518.327, 193.179, 580.948, 629.847, 649.552,
#      377.485, 461.47, 671.851, 347.296, 566.963, 7.269, 296.904, 512.672, 699.289, 236.318, 430.323, 254.619, 401.38,
#      234.203, 599.45, 54.813, 667.576, 170.736, 666.918, 446.696, 484.019, 220.415, 524.829, 650.434, 406.922, 464.303,
#      648.955, 219.873, 165.524, 388.819, 285.492, 339.886, 178.905, 388.693, 25.404, 227.41, 277.031, 2.179, 304.443,
#      365.354, 26.589, 81.233, 683.861, 468.41, 132.489, 372.229, 227.045, 613.419, 439.864, 431.27, 151.778, 407.153,
#      423.587, 321.873, 429.841, 289.826, 534.041, 71.045, 664.191, 568.8, 588.603, 609.669, 414.091, 398.59, 353.325,
#      642.232, 598.551, 641.154, 438.924, 457.433, 476.993, 3.516, 626.86, 277.667, 526.699, 662.568, 220.757, 13.956,
#      315.561, 199.543, 257.348, 570.886, 569.193, 503.752, 645.551, 261.713, 138.453, 251.815, 641.276, 420.998,
#      367.472, 213.933, 505.425, 478.826, 618.737, 84.676, 518.992, 61.545, 400.936, 109.091, 336.456, 616.477, 613.228,
#      628.439, 51.506, 516.635, 176.583, 262.667, 647.305, 542.458, 567.849, 164.832, 690.385, 398.428, 392.08, 154.69,
#      277.992, 691.458, 259.604, 338.931, 290.851, 34.903, 227.043, 37.821, 620.799, 341.729, 505.215, 93.689, 312.42,
#      406.645, 183.08, 534.457, 17.891, 296.079, 604.503, 460.578, 250.744, 1.187, 614.587, 526.034, 325.663, 412.263,
#      69.153, 318.731, 288.575, 331.601, 615.532, 691.539, 375.523, 259.617, 334.199, 365.063, 403.853, 288.016, 227.18,
#      199.978, 432.645, 594.095, 598.482, 450.012, 397.57, 43.755, 174.535, 493.791, 496.013, 262.961, 584.911, 44.731,
#      126.6, 25.924, 387.995, 626.333, 511.526, 326.147, 267.118, 555.579, 518.326, 169.681, 215.309, 73.13, 590.239,
#      251.118, 376.469, 104.71, 673.334, 455.786, 204.115, 451.908, 483.034, 696.651, 248.963, 510.048, 100.353, 594.959,
#      606.561, 299.865, 185.248, 433.199, 462.139, 189.405, 510.681, 637.618, 139.669, 279.819, 24.886, 573.645, 79.358,
#      541.197, 26.14, 167.643, 4.973, 499.77, 572.238, 43.604, 241.965, 488.882, 112.385, 215.375, 513.111, 601.035,
#      392.227, 126.215, 425.436, 432.649, 264.531, 596.101, 477.794, 142.671, 69.408, 538.077, 657.089, 123.505, 236.113,
#      55.033, 526.907, 452.199, 515.517, 542.594, 463.98, 577.251, 236.88, 232.652, 591.296, 67.925, 311.334, 491.839,
#      366.169, 419.6, 648.651, 61.084, 345.916, 127.665, 182.819, 145.699, 594.986, 415.486, 214.448, 266.579, 234.294,
#      98.067, 591.626, 259.93, 578.894, 666.208, 24.531, 200.317, 611.611, 402.054, 55.641, 639.078, 438.677, 696.168,
#      347.291, 186.57, 289.453, 76.392, 361.514, 450.209, 296.281, 642.921, 427.9, 255.155, 370.034, 528.403, 430.76,
#      652.924, 604.128, 463.518, 127.647, 101.106, 5.306, 16.512, 432.963, 323.501, 307.036, 663.089, 132.679, 200.948,
#      489.765, 410.46, 219.36, 402.406, 679.422, 115.289, 387.936, 226.686, 580.627, 357.337, 637.371, 274.783, 518.625,
#      328.152, 94.184, 579.439, 686.824, 377.449, 88.837, 570.82, 531.459, 119.388, 207.512, 696.68, 668.176, 308.43,
#      124.058, 465.204, 414.581, 93.088, 359.083, 103.52, 331.486, 511.771, 203.223, 418.745, 474.226, 25.203, 338.822,
#      676.44, 575.479, 479.964, 227.907, 666.351, 433.131, 581.641, 0.74, 414.752, 558.96, 345.206, 179.388, 350.544,
#      541.547, 60.693, 416.726, 630.949, 163.756, 247.959, 593.454, 601.335, 171.198, 506.955, 358.644, 503.247, 122.846,
#      435.054, 656.795, 75.284, 40.506, 303.291, 635.08, 407.682, 533.631, 4.482, 357.788, 440.869, 646.69, 117.445,
#      217.118, 268.667, 439.498, 440.381, 163.107, 46.658, 625.538, 82.437, 673.081, 246.818, 274.749, 539.186, 422.519,
#      320.578, 612.736, 295.54, 157.775, 254.45, 278.485, 356.627, 468.356, 314.242, 140.312, 526.852, 115.408, 358.416,
#      164.696, 466.19, 343.57, 190.226, 73.626, 591.026, 306.666, 105.166, 599.374, 433.018, 511.643, 425.292, 431.143,
#      57.027, 31.216, 105.378, 210.894, 618.592, 42.89, 691.146, 599.061, 7.324, 327.25, 287.594, 655.648, 535.092,
#      424.668, 385.188, 273.684, 477.785, 543.363, 44.104, 104.879, 546.391, 519.753, 470.535, 160.682, 503.698, 170.607,
#      300.36, 20.448, 630.564, 35.45, 169.14, 668.574, 585.276, 672.214, 157.892, 235.547, 479.29, 356.535, 426.157,
#      295.532, 651.864, 50.638, 423.855, 384.811, 59.757, 74.069, 395.489, 665.722, 364.454, 675.94, 484.997, 610.04,
#      317.067, 265.523, 205.517, 290.653, 150.417, 269.099, 238.041, 576.853, 636.151, 537.983, 639.838, 273.692, 275.23,
#      272.056, 225.07, 219.352, 666.58, 425.324, 206.241, 137.564, 432.85, 454.144, 646.294, 295.266, 35.531, 523.965,
#      123.428, 559.091, 2.843, 264.27, 387.754, 427.313, 599.264, 165.599, 478.212, 235.026, 73.152, 377.291, 394.087,
#      507.458, 499.123, 465.485, 263.652, 356.482, 218.142, 0.226, 343.272, 473.894, 573.173, 325.75, 675.782, 274.672,
#      628.342, 322.077, 21.873, 142.144, 20.643, 548.869, 356.868, 148.416, 372.402, 495.626, 58.299, 651.793, 497.18,
#      211.462, 43.906, 214.642])
# random_phases = [0.05611822, 0.43566513, 0.83744167, 0.7805519, 0.58480271, 0.98632399, 0.21289288, 0.88825089, 0.89471252, 0.83427997,
#                  0.78845038, 0.3128224, 0.13673235, 0.70392962, 0.10676477,
#                  0.92804575, 0.77477041, 0.69204264, 0.30840359, 0.70426323,
#                  0.99239314, 0.12830945, 0.02303761, 0.59198878, 0.0139303,
#                  0.67193313, 0.42960773, 0.73948876, 0.10265943, 0.71412981,
#                  0.58715803, 0.64117483, 0.98987275, 0.52638028, 0.19009048,
#                  0.85406847, 0.99697084, 0.91986392, 0.69590401, 0.78741582,
#                  0.55262245, 0.66993345, 0.46476929, 0.07975967, 0.68366236,
#                  0.65341863, 0.99545799, 0.73923697, 0.49663295, 0.14540705,
#                  0.94225074, 0.91629562, 0.06163607, 0.31173731, 0.38404732,
#                  0.42920858, 0.08568909, 0.63929926, 0.69571079, 0.35679112,
#                  0.33732748, 0.93427738, 0.08720886, 0.07489865, 0.38708205,
#                  0.20333509, 0.30598261, 0.43755, 0.52126149, 0.12248786,
#                  0.82630353, 0.04486331, 0.67329838, 0.19651202, 0.81702925,
#                  0.40643033, 0.45756734, 0.3546435, 0.83290001, 0.64115585,
#                  0.4128956, 0.16231792, 0.55293031, 0.07936797, 0.57266972,
#                  0.43556995, 0.88779605, 0.38416812, 0.55177933, 0.80134576,
#                  0.96120955, 0.39598014, 0.55703053, 0.31715457, 0.2755024,
#                  0.27465744, 0.57144621, 0.03680888, 0.77858364, 0.6445758,
#                  0.48576065, 0.85279218, 0.71343879, 0.06143578, 0.79698416,
#                  0.70499022, 0.7346376, 0.9808139, 0.8419244, 0.60356538,
#                  0.14659023, 0.55406393, 0.51747776, 0.06492984, 0.97759453,
#                  0.88470716, 0.66790477, 0.86871431, 0.3098369, 0.01732207,
#                  0.832486, 0.02195267, 0.45787201, 0.25457237, 0.87317976,
#                  0.48113053, 0.07728467, 0.53516176, 0.87691402, 0.31901427,
#                  0.9606729, 0.87093124, 0.82599772, 0.31238568, 0.86188987,
#                  0.41232429, 0.51346025, 0.69290827, 0.589703, 0.11602877,
#                  0.9376607, 0.09355357, 0.82709098, 0.35494112, 0.8535295,
#                  0.20976736, 0.43236686, 0.31192189, 0.0583658, 0.60092217,
#                  0.81329817, 0.88703335, 0.24310225, 0.95820501, 0.41391461,
#                  0.8309761, 0.49493163, 0.91180181, 0.25513225, 0.04288238,
#                  0.00213658, 0.13087853, 0.62489146, 0.32371426, 0.32092686,
#                  0.62078732, 0.10494032, 0.52122615, 0.7044578, 0.93632871,
#                  0.9037106, 0.45444446, 0.57071333, 0.46483063, 0.69386835,
#                  0.70043527, 0.05344983, 0.78680448, 0.08645273, 0.80106818,
#                  0.82550493, 0.63075509, 0.06808681, 0.29092075, 0.24740294,
#                  0.12848159, 0.88660763, 0.98017541, 0.94921247, 0.96629287,
#                  0.93816554, 0.97465697, 0.11063612, 0.72420847, 0.11098571,
#                  0.72285507, 0.83547351, 0.60094248, 0.28714812, 0.73278494,
#                  0.857276, 0.29242465, 0.48172037, 0.24735069, 0.28198754,
#                  0.7659901, 0.61708581, 0.3613735, 0.31247919, 0.15172179,
#                  0.36109169, 0.82181439, 0.8820665, 0.26325453, 0.47604018,
#                  0.01715241, 0.11457832, 0.87180942, 0.92391596, 0.12604755,
#                  0.0154288, 0.0333111, 0.44527411, 0.83457362, 0.66590078,
#                  0.18068308, 0.44856497, 0.25636334, 0.95386726, 0.68062703,
#                  0.12190918, 0.21707271, 0.62101185, 0.83495504, 0.11588408,
#                  0.20640155, 0.88978372, 0.98453291, 0.80785746, 0.08982229,
#                  0.34786718, 0.23378679, 0.88423865, 0.6179368, 0.96592027,
#                  0.76899012, 0.06609793, 0.68894801, 0.41538421, 0.38487572,
#                  0.70489309, 0.81126274, 0.48585147, 0.45915551, 0.10114399,
#                  0.10895441, 0.88529921, 0.11736701, 0.63088306, 0.81568947,
#                  0.09062932, 0.00106475, 0.02809005, 0.14078203, 0.13141917,
#                  0.75838919, 0.91332812, 0.13895342, 0.61410345, 0.32567558,
#                  0.35655016, 0.25029589, 0.39117783, 0.04437546, 0.04992325,
#                  0.8946942, 0.59456985, 0.21362942, 0.56280241, 0.71469092,
#                  0.73335919, 0.26542184, 0.16973036, 0.25235402, 0.2688513,
#                  0.94527344, 0.09027511, 0.23025038, 0.20549277, 0.40235719,
#                  0.28249545, 0.06480564, 0.85117662, 0.94550364, 0.16250687,
#                  0.55976546, 0.30699317, 0.23435153, 0.02915379, 0.61969999,
#                  0.38458318, 0.78422174, 0.76516972, 0.23238107, 0.88784612,
#                  0.04542595, 0.92319375, 0.55200017, 0.06190055, 0.09290128,
#                  0.91389614, 0.0779164, 0.86325163, 0.38036505, 0.53532355,
#                  0.3342375, 0.64427826, 0.74732689, 0.6755753, 0.49869146,
#                  0.97704051, 0.43253489, 0.8519127, 0.87235818, 0.51242127,
#                  0.81040613, 0.78042298, 0.50744561, 0.88145647, 0.35865041,
#                  0.13974482, 0.93329779, 0.92599387, 0.96258815, 0.0621183,
#                  0.29128182, 0.24511147, 0.07127766, 0.76886231, 0.84594537,
#                  0.33681244, 0.65399569, 0.39017183, 0.77869056, 0.82948547,
#                  0.14085059, 0.890259, 0.60774298, 0.63867083, 0.06097369,
#                  0.75476028, 0.78400877, 0.76913773, 0.74738697, 0.26637277,
#                  0.02179153, 0.93286018, 0.70352748, 0.22910974, 0.8072704,
#                  0.60586787, 0.03828207, 0.29505837, 0.36617541, 0.79187773,
#                  0.60592106, 0.96204551, 0.10583225, 0.3580479, 0.69148724,
#                  0.09760451, 0.7581941, 0.84901651, 0.64277722, 0.24965145,
#                  0.26092441, 0.50821415, 0.57247826, 0.52401868, 0.58181735,
#                  0.52856102, 0.10293431, 0.37763806, 0.69900297, 0.31664085,
#                  0.84217329, 0.27563615, 0.76612871, 0.12964449, 0.92044335,
#                  0.96391533, 0.51248181, 0.49852073, 0.95636256, 0.51138358,
#                  0.2967324, 0.48251211, 0.71593555, 0.07290982, 0.25604541,
#                  0.89645711, 0.67102453, 0.54045457, 0.32209054, 0.31752937,
#                  0.86501375, 0.77783593, 0.1000935, 0.44627097, 0.65351275,
#                  0.68886045, 0.26337907, 0.74935341, 0.67293962, 0.72822559,
#                  0.35091786, 0.38834607, 0.26251485, 0.73681474, 0.97876088,
#                  0.62012634, 0.67017218, 0.73238011, 0.26732551, 0.60998608,
#                  0.09416289, 0.0110021, 0.59937587, 0.70054669, 0.86908333,
#                  0.34424995, 0.93067555, 0.0567276, 0.04695297, 0.35450995,
#                  0.77996842, 0.36385496, 0.76475693, 0.64965367, 0.44279724,
#                  0.38486247, 0.68087067, 0.4309681, 0.35455598, 0.80248598,
#                  0.09458051, 0.68946495, 0.96590717, 0.66792569, 0.61045951,
#                  0.45191071, 0.44436617, 0.04003207, 0.63754697, 0.54064487,
#                  0.21850368, 0.21898398, 0.04014468, 0.7034162, 0.88302645,
#                  0.98486437, 0.49786268, 0.51285835, 0.6612078, 0.56787794,
#                  0.50721287, 0.19623022, 0.85638691, 0.48618063, 0.18567521,
#                  0.88913021, 0.69431064, 0.93382358, 0.67276692, 0.54863178,
#                  0.10579433, 0.98286348, 0.35165917, 0.23448677, 0.29648935,
#                  0.10789598, 0.49998013, 0.9361374, 0.75317386, 0.43486342,
#                  0.80769953, 0.80769388, 0.21807574, 0.71065728, 0.3145199,
#                  0.79944788, 0.21436976, 0.35762031, 0.63259239, 0.75828958,
#                  0.30457232, 0.80409679, 0.12772526, 0.72852189, 0.28531995,
#                  0.53809075, 0.47077106, 0.89844192, 0.09151948, 0.295896,
#                  0.06608217, 0.30041084, 0.59264558, 0.18278274, 0.71481017,
#                  0.73349423, 0.63910004, 0.1805668, 0.42794294, 0.66640813,
#                  0.10011759, 0.8339105, 0.8899515, 0.0204903, 0.83082925,
#                  0.16167859, 0.1084775, 0.08764648, 0.04283319, 0.56168718,
#                  0.43839174, 0.15378577, 0.57894303, 0.83412371, 0.58554079,
#                  0.91285869, 0.45343813, 0.85329645, 0.14302656, 0.44988433,
#                  0.4867622, 0.75357062, 0.52176103, 0.5133726, 0.54499947,
#                  0.43504809, 0.96107981, 0.04417711, 0.0196092, 0.04109383,
#                  0.91570491, 0.12355498, 0.88152901, 0.93166203, 0.63297712,
#                  0.79772019, 0.97490328, 0.2464527, 0.51604591, 0.92894091,
#                  0.19861353, 0.20755704, 0.40625624, 0.149168, 0.65593418,
#                  0.63324095, 0.78998202, 0.75051485, 0.95123914, 0.98196199,
#                  0.10278053, 0.94190426, 0.39202465, 0.13520592, 0.22943996,
#                  0.94270704, 0.15075147, 0.09564103, 0.20092092, 0.85197965,
#                  0.03444406, 0.57425419, 0.57448874, 0.16407501, 0.15468137,
#                  0.25195424, 0.67207395, 0.800639, 0.04468875, 0.48668077,
#                  0.17931205, 0.68098846, 0.55465569, 0.9636188, 0.00599194,
#                  0.34384027, 0.57827374, 0.44672864, 0.01466208, 0.20334486,
#                  0.67275521, 0.76163738, 0.32195608, 0.76153517, 0.50600079,
#                  0.66014634, 0.85756731, 0.00880733, 0.53660297, 0.87123867,
#                  0.76698165, 0.37767577, 0.12434351, 0.70947366, 0.447271,
#                  0.50821025, 0.38097231, 0.18152706, 0.68665406, 0.23880804,
#                  0.96308565, 0.72520924, 0.1737433, 0.01994009, 0.1577575,
#                  0.18259209, 0.71655753, 0.64810776, 0.63843428, 0.68178466,
#                  0.753073, 0.69394075, 0.49173586, 0.32589758, 0.09060427,
#                  0.61753279, 0.78069734, 0.49450112, 0.25198521, 0.62895277,
#                  0.72597254, 0.15455332, 0.7629433, 0.64734588, 0.02746217,
#                  0.65400266, 0.61574595, 0.39878742, 0.87404372, 0.06047545,
#                  0.81364147, 0.22731861, 0.54995966, 0.5464821, 0.39880774,
#                  0.87581717, 0.7005408, 0.17580463, 0.09108557, 0.0336918,
#                  0.9846965, 0.80366572, 0.10035151, 0.79445293, 0.50296493,
#                  0.71829074, 0.5501811, 0.79924048, 0.91471644, 0.23099974,
#                  0.43072984, 0.48501412, 0.97965602, 0.88924545, 0.16575459,
#                  0.03751874, 0.69501708, 0.66029445, 0.81478184, 0.45586818,
#                  0.18003628, 0.06104158, 0.32815579, 0.88370892, 0.96455002,
#                  0.08106909, 0.84131613, 0.95851956, 0.47861126, 0.92377012,
#                  0.85697714, 0.82688812, 0.46059535, 0.38269515, 0.53414566,
#                  0.4760256, 0.48677947, 0.10277641, 0.77431705, 0.80602077,
#                  0.90776698, 0.62437249, 0.59837936, 0.92187428, 0.48972624,
#                  0.16347325, 0.93239288, 0.53436321, 0.03909544, 0.90356093,
#                  0.00774696, 0.21666649, 0.86130809, 0.42251302, 0.99055218,
#                  0.46499285, 0.99107892, 0.79661965, 0.61018298, 0.22696277,
#                  0.69064048, 0.17174502, 0.4961765, 0.44929922, 0.79849536,
#                  0.61248404, 0.86047777, 0.68834671, 0.17931166, 0.92406998,
#                  0.39958129, 0.93410612, 0.27276475, 0.75163789, 0.97138383,
#                  0.74627357, 0.17079248, 0.73871989, 0.19846399, 0.52292325,
#                  0.0415924, 0.26602402, 0.77551567, 0.84184039, 0.08523323,
#                  0.42592545, 0.72509303, 0.24813498, 0.09179675, 0.76155025,
#                  0.65764071, 0.67482113, 0.03272824, 0.35398294, 0.16924,
#                  0.04916538, 0.76769245, 0.06525553, 0.58112895, 0.41867716,
#                  0.04979241, 0.06988181, 0.05894481, 0.13637996, 0.50749872,
#                  0.00940988, 0.80220146, 0.49887682, 0.17726638, 0.09781269,
#                  0.57137226, 0.21282434, 0.27603366, 0.77620504, 0.53885572,
#                  0.98861534, 0.82557043, 0.5237719, 0.72022446, 0.22037382,
#                  0.47258302, 0.66282524, 0.72964467, 0.51333454, 0.07664327,
#                  0.37108997, 0.02126258, 0.04058917, 0.59714924, 0.62505442,
#                  0.52552823, 0.54585957, 0.93317525, 0.7100171, 0.93445153,
#                  0.82041482, 0.14225715, 0.97646703, 0.94574407, 0.58013258,
#                  0.51736752, 0.34482379, 0.26229635, 0.51470439, 0.85833731,
#                  0.24655619, 0.46533712, 0.60916171, 0.51632035, 0.18256433,
#                  0.7156256, 0.14056041, 0.47904028, 0.5763794, 0.18573646,
#                  0.52828844, 0.93624931, 0.42419151, 0.24382162, 0.10944037,
#                  0.37008104, 0.5616106, 0.27581531, 0.76099978, 0.66894628,
#                  0.8842965, 0.14958691, 0.77373654, 0.2517328, 0.26487687,
#                  0.55077701, 0.48165848, 0.85195934, 0.73442066, 0.42230052,
#                  0.87511656, 0.34075427, 0.4925237, 0.71458593, 0.97897412,
#                  0.69462974, 0.34151298, 0.35481361, 0.49598947, 0.47202382,
#                  0.09774096, 0.18349441, 0.94370245, 0.16848197, 0.08303336,
#                  0.64810464, 0.08522701, 0.96265614, 0.01826388, 0.26638955,
#                  0.42397384, 0.10592166, 0.57162147, 0.85385624, 0.38289491,
#                  0.86274392, 0.25124653, 0.4680087, 0.87085298, 0.01686595,
#                  0.62129529, 0.66308038, 0.33846333, 0.69674805, 0.79185675,
#                  0.30016012, 0.16582154, 0.34177384, 0.40474822, 0.49714666,
#                  0.80699811, 0.5563824, 0.37214899, 0.50430101, 0.73890402,
#                  0.0705279, 0.06801757, 0.13410333, 0.65426585, 0.26184745,
#                  0.64352034, 0.68305314, 0.04878884, 0.55690808, 0.56699659,
#                  0.0372055, 0.13669784, 0.11101834, 0.6909448, 0.06476246,
#                  0.97896648, 0.86929492, 0.90931257, 0.57458791, 0.46857193,
#                  0.47629876, 0.86039506, 0.51384766, 0.44522409, 0.5639341,
#                  0.35592567, 0.39538816, 0.03529208, 0.99023117, 0.10400348,
#                  0.51528757, 0.28200507, 0.94161392, 0.73880338, 0.48316527,
#                  0.07540438, 0.95638918, 0.14419264, 0.58273835, 0.47633381,
#                  0.73750443, 0.61880078, 0.90648933, 0.64564645, 0.06578072,
#                  0.75440533, 0.39847912, 0.10303061, 0.81765643, 0.4790099,
#                  0.95168607, 0.97719257, 0.64634273, 0.50895458, 0.77893902,
#                  0.85570102, 0.23378162, 0.33881269, 0.13095033, 0.93301721,
#                  0.62221854, 0.94964839, 0.41096772, 0.17313391, 0.88002917,
#                  0.98883134, 0.77868551, 0.28025805, 0.97088778, 0.57959198,
#                  0.05787205, 0.50273291, 0.58342041, 0.49323071, 0.73930361,
#                  0.32270789, 0.65256522, 0.74109516, 0.75797009, 0.86178508,
#                  0.31012871, 0.62488681, 0.03420799, 0.15500381, 0.69907781,
#                  0.69203918, 0.05427405, 0.78071248, 0.24478402, 0.0563356,
#                  0.6802985, 0.20879766, 0.05472069, 0.98882771, 0.84603348,
#                  0.37740309, 0.13827439, 0.09748393, 0.58234602, 0.81766767,
#                  0.39610266, 0.19033774, 0.164036, 0.55009339, 0.84050821,
#                  0.33580653, 0.29146687, 0.81807037, 0.73472149, 0.80353965,
#                  0.34402355, 0.59605975, 0.28211565, 0.98811327, 0.05237239,
#                  0.36194079, 0.2451181, 0.29940091, 0.98936832, 0.11020516,
#                  0.42140878, 0.86783424, 0.46474922, 0.78143151, 0.22720845]
#
# '''fixed UE setup'''     #    MO     RB       LB      LO       RO      RM      MM       MB      LM
# x_setup.append(365.751)  # 362.319, 595.7, 157.456, 75.149, 635.127, 545.75, 354.62, 365.751, 60.452
# y_setup.append(617.03)  # 177.642, 559.248, 607.732, 49.53, 99.452, 390.91, 403.956, 617.03, 396.547
#
# '''fixed UE setup'''
# # x_setup.extend([184.75, 362.147, 478.3])
# # y_setup.extend([148.16, 568.29, 400.6])
#
# '''plotting setup...'''
# plt.scatter(x_setup[:-1], y_setup[:-1])
# plt.scatter(x_setup[-1], y_setup[-1], color='red')
# plt.title(header)
# plt.show()
#
# # calculate distances (a: BS -> scatt; b: scatt -> UE)
# distances_a = []  # staat vast, dus moet niet op voorhand gegenereerd worden
# for m in range(M):
#     distances_a_i = []
#     for s in range(S):
#         z = s + 2
#         distances_a_i.append(np.sqrt((x_setup[m] - x_setup[-z]) ** 2 + (y_setup[m] - y_setup[-z]) ** 2))
#     distances_a.append(distances_a_i)
# # calc channel vector for UE @original place
# h = []
# for m in range(M):
#     phaseshifts = []
#     for s in range(S):
#         dist = distances_a[m][s] + np.sqrt(
#             (x_setup[-1] - x_setup[-(s + 2)]) ** 2 + (y_setup[-1] - y_setup[-(s + 2)]) ** 2)
#         phaseshifts.append(np.exp(-1j * (2 * np.pi * ((dist % 1) + random_phases[s]))) / (4 * np.pi * dist))
#     h.append(sum(phaseshifts))
# h = np.array(h)
# wH = h.conj().T
#
# '''raster'''
# y1 = list(range(-100, 105, 10))
# x1 = list(range(-100, 105, 10))
# y2 = list(range(-500, -100, 10))
# x2 = list(range(-500, -100, 10))
# y3 = list(range(110, 510, 10))
# x3 = list(range(110, 510, 10))
# y2.extend(y1)
# y2.extend(y3)
# x2.extend(x1)
# x2.extend(x3)
# y = [item * resolution / 10 + y_setup[-1] for item in y2]
# x = [item * resolution / 10 + x_setup[-1] for item in x2]
# '''centrale plaats antenne: x[int(len(x)/2)], y[int(len(y)/2)]'''
# # plt.scatter(x, y)
# # plt.scatter(x_setup[-1], y_setup[-1], color='red')
# # plt.title(header)
# # plt.show()
#
# ampl = np.zeros(shape=(len(x), len(y)))
# for a in range(len(x)):
#     for b in range(len(y)):
#         hdx = []
#         for m in range(M):
#             phaseshifts = []
#             for s in range(S):
#                 dist = distances_a[m][s] + np.sqrt((x[a] - x_setup[-(s + 2)]) ** 2 + (y[b] - y_setup[-(s + 2)]) ** 2)
#                 phaseshifts.append(
#                     np.exp(-1j * (2 * np.pi * ((dist % 1) + random_phases[s]))) / (4 * np.pi * dist))
#             hdx.append(sum(phaseshifts))
#         desired_signal = np.matmul(wH, hdx) / np.sqrt(M)
#         #                  * signal_wave
#         # sr = [cmath.polar(i) for i in desired_signal]
#         # amplitudes = [item[0] if int(item[1]) == 0 else -item[0] for item in sr]
#         # ratio_out_vs_rt_ampl = amplitudes[int(len(amplitudes) / 2) + 1] / signal_wave[int(len(signal_wave) / 2) + 1]
#         # if ratio_out_vs_rt_ampl < 0:(
#         #     ampl[a, b] = -270
#         # else:
#         ampl[a, b] = 20 * np.log10(abs(desired_signal))
#     print(a)
#
# # plt.plot(signal_wave.real)
# # plt.plot(amplitudes)
# # plt.title('--M=' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(1))
# # plt.show()
# # # fig = px.imshow(z=ampl, x=x, y=y, color_continuous_scale=px.colors.diverging.Portland)
# ma = max([max(i) for i in ampl])
# mi = -5
# fig = go.Figure(data=go.Heatmap(
#     z=ampl,
#     x=x,
#     y=y,
#     colorscale='Jet'
#     # zmin=mi,
#     # zmax=ma
# ))
#
# fig.add_trace(go.Scatter(
#     x=x_setup[M:-1],
#     y=y_setup[M:-1],
#     mode='markers',
#     name='scatterers',
#     marker_color='blue',
#     marker=dict(size=3)
# ))
#
# fig.add_trace(go.Scatter(
#     x=[x_setup[-1]],
#     y=[y_setup[-1]],
#     name='antenna',
#     mode='markers',
#     marker_color='red',
#     text=str(max([max(i) for i in ampl]))
# ))
# fig.add_trace(go.Scatter(
#     x=x_setup[:M],
#     y=y_setup[:M],
#     name='BS',
#     mode='markers',
#     marker_color='red',
#     marker=dict(size=3)
# ))
#
# fig.update_layout(autosize=False,
#                   width=850,
#                   height=800,
#                   title=header,
#                   font=dict(size=10))
#
# plotly.offline.plot(fig,
#                     filename='C:/Users/margo/OneDrive/Documenten/Masterproef/simulation/result plots/geomodel---' + '(' + datetime.datetime.now().strftime(
#                         "%Y-%m-%d_%H-%M") + ')' + titel + '.html')
# fig.show()

































'''surfaceplot'''
# ma = max([max(i) for i in ampl])
# amplis = [20 * np.log10(i / ma) for i in ampl]
# fig = go.Figure(data=go.Surface(
#     z=amplis,
#     x=x,
#     y=y,
#     colorscale='Jet'
# ))
# fig.update_layout(autosize=False,
#                   width=850,
#                   height=800,
#                   title=header,
#                   font=dict(size=10))
#
# plotly.offline.plot(fig,
#                     filename='./result plots/' + '(' + datetime.datetime.now().strftime(
#                         "%Y-%m-%d_%H-%M") + ')-geomodel-Surface-' + titel + '.html')
# fig.show()
















'''plot doorsnede'''
# # horizontal
# plt.plot(ampl[int(len(x)/2)].real)
# plt.title(header, fontsize=8)
# plt.show()
# # vertical
# plt.plot(ampl[:,int(len(y)/2)].real)
# plt.title(header, fontsize=8)
# plt.show()
# # diag (1st bisectrice)
# plt.plot([ampl[i][i].real for i in range(len(x))])
# plt.title(header, fontsize=8)
# plt.show()
# # diag (nt 1e bisectrice)
# plt.plot([ampl[i][len(x)-i-1].real for i in range(len(x))])
# plt.title(header, fontsize=8)
# plt.show()
# random richting
# tot = amplis[int(len(y)/2)][50:]
# for i in range(1, 36):
#     hoek = i*10
#     x_step = 1/np.cos(hoek)
#     y_step = 1/np.sin(hoek)
#     ix = 50
#     ij = 50
#     grafiek = []
#     for j in range(50):
#         ix += x_step
#         ij += y_step
#         x1 = int(ix)
#         x2 = x1+1
#         y1 = int(ij)
#         y2 = y1 + 1
#         dx = ix-x1
#         inter1 = amplis[x1][y1]*(1-dx)+dx*amplis[x2][y1]
#         inter2 = amplis[x1][y2] * (1 - dx) + dx * amplis[x2][y2]
#         dy = ij-x2
#         inter = inter1*(1-dy) + inter2 * dy
#         grafiek.append(inter)
#     tot = (tot + grafiek) / 2
    
    



























'''geo_model met random phaseshift (vast per scatterer), zonder pathloss'''
# '''definitions'''
# M = 32
# message_bits = np.array(
#     [1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1])
# signal_wave = QAM_generator.create_QAM_signal(message_bits, 64)
# # noise v:
# # noise = np.random.normal(0, np.sqrt(0.5), (M,len(signal_wave))) + 1j * np.random.normal(0, np.sqrt(0.5), (M,len(signal_wave)))
# # noise x:
# noise = None
# S = 1000
# dM = 0.5
# resolution = 0.1
# titel = '--M=' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(1) + '_resolution=' + str(
#     resolution) + '_noise-x__zonder_min_max_met_random_fase_i_scatt '
# header = '(' + datetime.datetime.now().strftime("%Y-%m-%d_%H:%M") + ')' + titel
# print(header)
#
# # place antennas (line @ x=0)
# y_setup = list(range(40000 - int(dM * 100 * M / 2), 40000 - int(dM * 100 * M / 2) + int(dM * 100 * M), int(dM * 100)))
# y_setup = [i * 0.010 for i in y_setup]
# x_setup = list([0 for i in y_setup])
# # # random scatt setup
# # # place scatterers (random)
# # for i in range(aantal_scatterers):
# #     x_setup.append(random.randint(100000, 700000) / 1000)
# #     y_setup.append(random.randint(0, 700000) / 1000)
# # # place UE
# # x_setup.append(450.3)
# # y_setup.append(400.6)
#
# '''fixed scatt setup'''
# # place scatterers (fixed)
# x_setup.extend(
#     [136.904, 324.208, 372.304, 212.753, 616.319, 513.373, 589.705, 525.047, 484.864, 538.594, 499.258, 110.835,
#      115.315, 236.064, 544.383, 66.021, 272.965, 669.449, 122.29, 566.642, 295.405, 114.352, 259.209, 612.662, 203.166,
#      90.857, 18.275, 206.37, 231.526, 216.672, 174.079, 242.721, 331.709, 239.248, 122.876, 433.624, 417.855, 585.446,
#      682.424, 651.79, 169.733, 284.347, 416.862, 168.557, 328.092, 28.119, 45.147, 617.275, 90.954, 646.08, 337.969,
#      471.871, 698.868, 546.794, 274.186, 387.491, 451.741, 88.846, 589.791, 18.122, 356.255, 54.018, 584.868, 337.57,
#      434.171, 333.598, 393.49, 269.702, 267.907, 510.373, 112.775, 119.559, 445.755, 519.162, 130.22, 588.997, 520.714,
#      454.781, 458.637, 642.786, 325.952, 57.881, 507.118, 247.208, 495.825, 671.144, 40.248, 323.388, 1.025, 221.4,
#      447.64, 327.338, 605.968, 371.518, 496.838, 227.601, 647.208, 622.315, 517.802, 63.759, 19.094, 385.701, 549.413,
#      570.511, 515.346, 235.257, 137.867, 638.515, 331.698, 680.446, 645.178, 304.417, 680.154, 110.715, 286.047,
#      486.166, 487.974, 135.729, 604.651, 568.487, 212.926, 17.506, 271.266, 219.229, 570.959, 596.891, 13.415, 684.413,
#      214.72, 563.859, 577.021, 249.689, 321.701, 10.718, 610.002, 353.747, 593.27, 392.984, 388.873, 380.876, 600.803,
#      263.679, 325.251, 60.873, 439.202, 400.512, 580.556, 391.437, 549.887, 86.23, 166.866, 515.734, 253.437, 152.785,
#      489.748, 694.288, 532.801, 317.6, 50.193, 685.889, 560.875, 161.76, 422.744, 364.383, 554.391, 447.738, 129.043,
#      577.847, 689.983, 8.836, 428.706, 335.81, 105.527, 97.203, 571.981, 671.844, 562.973, 221.606, 636.106, 110.035,
#      699.176, 277.163, 222.081, 325.943, 285.411, 636.263, 197.87, 416.336, 67.464, 415.67, 291.013, 33.061, 8.918,
#      49.858, 328.564, 54.573, 4.344, 50.347, 51.743, 496.179, 367.074, 64.579, 333.207, 656.409, 27.387, 47.638,
#      532.379, 165.86, 215.765, 91.726, 135.333, 228.438, 604.363, 134.16, 72.727, 633.675, 272.935, 563.061, 104.248,
#      635.887, 2.446, 535.386, 438.3, 194.888, 42.854, 409.752, 329.598, 360.081, 490.211, 231.422, 337.353, 201.797,
#      661.326, 40.502, 372.725, 205.558, 554.416, 625.857, 90.783, 596.917, 566.918, 124.526, 550.8, 338.193, 42.292,
#      88.566, 573.769, 68.553, 112.874, 97.028, 466.31, 200.83, 18.976, 545.632, 45.346, 0.094, 282.81, 447.611, 316.319,
#      560.398, 235.53, 240.622, 566.873, 289.45, 40.713, 28.413, 25.137, 458.19, 404.477, 323.798, 474.824, 215.766,
#      13.485, 462.984, 78.914, 118.746, 601.227, 43.007, 501.819, 471.749, 35.439, 87.112, 693.91, 502.595, 462.05,
#      172.686, 618.918, 484.401, 62.131, 439.691, 543.779, 322.187, 516.889, 159.758, 393.162, 678.431, 474.206, 348.753,
#      258.891, 671.065, 552.634, 441.636, 596.079, 98.259, 37.101, 488.444, 325.822, 626.88, 389.8, 548.068, 659.083,
#      146.503, 313.935, 30.201, 393.431, 455.945, 192.804, 125.254, 541.352, 12.559, 84.726, 587.429, 184.954, 401.679,
#      97.143, 651.125, 674.624, 209.206, 628.735, 671.423, 458.045, 249.327, 81.821, 144.69, 51.464, 30.813, 534.918,
#      228.721, 95.974, 175.725, 522.205, 351.513, 535.366, 624.434, 568.804, 296.052, 97.85, 237.518, 375.766, 682.837,
#      240.971, 81.808, 691.311, 617.623, 461.701, 545.279, 433.362, 318.413, 40.574, 627.943, 493.492, 59.65, 402.257,
#      474.253, 196.94, 48.395, 574.78, 225.859, 354.207, 47.021, 470.63, 308.343, 671.506, 496.394, 238.423, 119.999,
#      427.714, 89.063, 278.972, 574.778, 376.375, 607.685, 622.338, 235.663, 149.953, 69.949, 386.778, 297.638, 255.017,
#      387.466, 459.045, 635.096, 655.183, 338.452, 455.4, 137.018, 545.425, 449.75, 517.021, 43.893, 108.885, 152.785,
#      493.993, 537.661, 559.509, 358.183, 516.634, 107.621, 346.359, 435.643, 210.503, 313.497, 460.402, 427.947,
#      229.205, 595.543, 176.33, 280.388, 591.397, 486.547, 650.703, 440.446, 135.665, 245.497, 125.99, 591.799, 163.427,
#      363.518, 31.023, 386.795, 34.271, 157.464, 259.414, 649.807, 440.04, 654.22, 679.197, 624.405, 118.158, 259.204,
#      589.181, 261.432, 651.433, 454.975, 248.654, 409.516, 405.541, 362.911, 141.79, 646.825, 553.163, 176.27, 338.022,
#      174.474, 62.466, 80.166, 1.662, 541.685, 382.686, 652.131, 86.854, 648.679, 253.423, 614.786, 5.51, 460.175,
#      469.066, 58.409, 386.246, 463.714, 86.54, 460.672, 548.995, 63.607, 221.624, 493.55, 204.84, 679.582, 269.726,
#      347.996, 568.991, 698.238, 380.927, 696.539, 534.114, 76.426, 496.234, 433.766, 468.687, 269.405, 368.645, 342.771,
#      123.369, 362.986, 237.484, 39.134, 523.858, 563.845, 226.828, 152.131, 410.704, 465.316, 610.336, 1.643, 159.716,
#      269.198, 451.924, 274.02, 208.46, 463.127, 620.05, 82.754, 235.556, 545.612, 692.432, 525.942, 567.515, 628.756,
#      142.38, 416.931, 9.682, 355.944, 452.317, 213.84, 96.103, 28.68, 294.57, 202.264, 372.823, 26.168, 682.238,
#      636.673, 651.951, 611.198, 637.095, 668.506, 364.819, 244.448, 169.986, 302.057, 328.655, 137.511, 544.487, 42.146,
#      671.245, 598.855, 519.906, 165.888, 449.657, 478.559, 346.12, 312.175, 674.873, 397.358, 202.93, 149.896, 560.757,
#      669.873, 277.636, 429.665, 51.083, 64.401, 523.109, 494.169, 238.109, 278.305, 686.836, 525.911, 525.992, 530.726,
#      348.717, 698.055, 55.839, 582.527, 532.197, 632.384, 688.333, 584.233, 256.479, 451.483, 440.962, 459.016, 8.501,
#      37.502, 2.647, 625.91, 80.601, 534.618, 519.635, 642.368, 152.239, 491.556, 428.26, 132.554, 535.144, 506.652,
#      125.692, 332.832, 9.003, 378.662, 665.133, 327.107, 572.812, 491.72, 81.959, 441.653, 342.855, 7.299, 367.383,
#      627.269, 8.868, 223.148, 569.975, 211.76, 324.491, 193.638, 571.227, 457.913, 205.653, 445.799, 514.183, 519.01,
#      633.577, 376.101, 563.672, 340.407, 367.397, 95.848, 495.849, 20.059, 442.913, 677.953, 162.668, 24.494, 535.09,
#      88.732, 507.225, 441.898, 68.511, 143.923, 92.602, 221.153, 406.081, 175.983, 176.566, 97.574, 296.727, 249.642,
#      17.155, 656.574, 568.765, 589.541, 327.271, 428.389, 156.569, 429.165, 177.847, 647.341, 99.391, 653.927, 566.099,
#      388.814, 450.418, 298.141, 291.211, 177.135, 149.652, 365.211, 201.896, 383.144, 215.076, 150.205, 577.629,
#      333.259, 98.335, 434.655, 268.387, 94.523, 336.506, 663.641, 570.508, 520.647, 280.629, 62.942, 92.925, 189.531,
#      323.336, 519.824, 565.311, 158.403, 288.919, 203.967, 313.376, 204.614, 656.43, 204.489, 656.561, 600.304, 495.457,
#      236.736, 197.117, 320.082, 266.24, 554.2, 6.103, 244.102, 503.773, 430.264, 22.478, 344.352, 376.68, 519.669,
#      142.939, 480.018, 531.688, 436.421, 546.312, 239.544, 692.279, 117.822, 87.983, 146.069, 440.225, 453.301, 282.141,
#      676.628, 35.22, 625.437, 551.434, 276.971, 634.743, 33.651, 57.985, 394.06, 130.541, 562.422, 421.139, 111.001,
#      381.333, 193.494, 421.124, 433.224, 140.294, 674.34, 27.941, 491.561, 467.725, 493.485, 19.771, 27.666, 516.795,
#      248.895, 401.39, 429.439, 446.837, 277.137, 125.778, 207.169, 47.774, 333.502, 546.037, 564.353, 133.296, 454.95,
#      308.004, 237.793, 101.503, 181.689, 223.549, 176.617, 689.084, 249.535, 626.393, 487.154, 167.202, 320.73, 633.807,
#      464.109, 699.312, 631.309, 604.249, 33.871, 515.503, 80.52, 323.995, 192.843, 67.155, 13.507, 68.424, 389.838,
#      679.387, 89.367, 168.668, 498.603, 9.498, 206.07, 425.562, 76.794, 424.529, 44.945, 139.041, 474.713, 398.466,
#      323.289, 664.261, 534.917, 666.815, 110.289, 543.128, 450.485, 44.323, 640.996, 463.487, 313.09, 468.197, 137.509,
#      32.85, 523.862, 397.745, 227.004, 158.747, 385.42, 599.902, 400.779, 231.802, 560.686, 654.022, 307.869, 499.214,
#      87.033, 127.571, 484.315, 38.523, 445.737, 220.621, 625.33, 16.318, 24.76, 68.171, 108.338, 102.19, 664.794,
#      513.747, 365.313, 445.555, 678.058, 116.667, 264.229, 156.195, 561.312, 548.94, 577.315, 498.289, 312.723, 390.411,
#      221.441, 295.409, 160.44, 179.505, 114.77, 544.35, 200.441, 621.258, 85.22, 54.08, 510.711, 111.263, 9.019, 82.333,
#      627.064, 508.22, 574.094, 492.062, 305.345, 639.357, 407.679, 585.032, 626.526, 667.121, 238.953, 362.581, 130.56,
#      341.909, 17.85, 421.641, 77.899, 692.01, 504.924, 536.67, 499.769, 72.747, 502.766, 75.354, 84.953, 458.402,
#      54.036, 151.316, 329.756, 169.11, 553.856, 358.488, 215.333, 198.327, 674.727, 54.952, 341.97, 548.606, 361.305,
#      680.474, 293.118, 680.06, 28.598, 181.564, 593.949, 147.439, 398.383, 166.511, 285.656, 19.724, 401.01, 585.226,
#      223.169, 104.77, 418.563, 365.063, 214.693, 43.265, 394.913, 539.453, 372.103, 329.001, 626.524, 588.682, 569.43,
#      695.742, 650.405, 601.469, 587.919, 295.834, 43.625, 248.535, 642.28, 654.939, 621.497, 168.8, 117.214, 313.133,
#      251.267, 264.042, 664.738, 518.861, 275.06, 360.41, 524.216, 524.857, 482.086, 186.342, 201.422, 581.64, 357.524,
#      144.191, 69.787, 72.581, 34.855, 147.679, 19.97, 136.061, 477.243, 310.467, 538.869, 255.994, 33.232, 107.357,
#      656.498, 61.484, 161.413, 384.746, 339.392, 413.717, 97.307, 329.677, 569.769, 396.569, 307.58, 578.766, 198.618,
#      178.094, 453.233, 87.481, 350.801, 300.544, 333.179, 246.252, 46.208, 536.706, 116.112, 236.724, 114.908, 102.1,
#      403.057, 261.319])
# y_setup.extend(
#     [379.033, 672.871, 455.867, 680.98, 42.134, 188.184, 504.89, 634.655, 496.932, 623.65, 247.083, 405.661, 622.491,
#      674.211, 86.786, 350.438, 295.366, 460.69, 87.577, 676.61, 179.927, 493.366, 574.442, 574.976, 33.43, 279.476,
#      26.987, 479.001, 12.423, 340.564, 586.854, 78.247, 454.672, 177.2, 389.305, 693.428, 123.316, 592.967, 243.087,
#      301.146, 162.686, 330.611, 527.285, 397.695, 204.971, 683.649, 514.546, 179.83, 527.03, 644.308, 610.485, 517.692,
#      668.405, 247.895, 650.694, 370.607, 468.195, 644.474, 66.135, 578.946, 317.854, 331.506, 2.938, 365.347, 397.012,
#      189.649, 351.617, 282.849, 401.48, 422.254, 358.637, 287.527, 201.885, 534.421, 44.407, 611.717, 615.968, 450.467,
#      248.975, 273.296, 412.916, 668.351, 391.159, 575.022, 697.618, 250.063, 276.567, 190.568, 479.276, 357.103,
#      247.927, 174.511, 670.961, 445.223, 689.219, 543.402, 136.566, 430.415, 617.528, 301.942, 323.91, 558.82, 549.423,
#      305.65, 602.868, 327.84, 120.067, 391.551, 210.804, 35.33, 77.674, 277.867, 75.804, 114.333, 687.547, 414.774,
#      236.302, 173.579, 243.879, 76.618, 692.939, 177.783, 645.156, 162.495, 498.337, 484.882, 249.909, 0.711, 60.548,
#      600.432, 453.15, 399.295, 652.835, 535.07, 642.857, 298.112, 537.415, 409.941, 125.536, 253.23, 515.893, 169.161,
#      222.255, 695.336, 81.799, 326.909, 587.759, 79.285, 212.4, 404.79, 673.727, 209.2, 227.512, 245.297, 570.671,
#      651.903, 79.56, 321.161, 517.679, 319.292, 545.777, 222.357, 381.239, 522.329, 645.768, 422.09, 122.665, 256.376,
#      274.461, 210.604, 11.145, 454.262, 418.332, 614.248, 313.489, 343.883, 5.971, 211.166, 522.504, 103.409, 99.575,
#      119.153, 214.799, 6.18, 377.24, 356.881, 615.988, 255.747, 672.505, 358.376, 404.408, 83.711, 655.327, 109.08,
#      324.029, 429.56, 683.366, 566.195, 681.026, 286.642, 337.29, 451.697, 665.891, 11.395, 589.074, 509.933, 691.602,
#      338.413, 5.855, 543.778, 151.951, 422.031, 442.924, 70.074, 95.297, 603.647, 513.541, 329.0, 564.043, 632.274,
#      333.051, 417.54, 685.776, 685.387, 672.418, 403.283, 365.772, 527.438, 459.674, 618.45, 238.611, 18.642, 561.086,
#      106.523, 584.787, 243.109, 199.735, 170.417, 91.419, 328.411, 659.457, 138.692, 369.508, 493.629, 696.762, 135.578,
#      124.632, 625.847, 257.897, 76.164, 474.704, 224.14, 158.454, 120.834, 301.485, 365.632, 663.201, 428.086, 23.432,
#      188.455, 160.51, 639.933, 411.996, 425.464, 20.699, 137.854, 204.234, 82.259, 139.64, 256.857, 95.097, 278.059,
#      442.337, 610.335, 354.722, 169.793, 88.636, 398.601, 403.099, 247.207, 297.641, 361.797, 601.661, 412.736, 287.935,
#      388.207, 354.615, 467.562, 91.671, 317.675, 5.22, 546.958, 376.913, 292.864, 412.894, 341.552, 589.625, 683.455,
#      548.555, 273.375, 508.066, 286.43, 290.563, 218.282, 236.061, 640.923, 671.102, 382.945, 455.867, 117.961, 587.143,
#      45.198, 283.656, 625.75, 295.095, 32.268, 574.117, 78.412, 83.288, 255.547, 77.542, 331.729, 120.961, 257.22,
#      281.792, 542.58, 72.426, 699.335, 390.324, 575.764, 220.938, 645.482, 390.762, 420.104, 445.308, 422.458, 375.051,
#      12.944, 1.284, 197.622, 287.571, 21.117, 585.958, 361.325, 569.287, 172.38, 49.639, 110.89, 572.498, 110.322,
#      71.093, 164.27, 225.194, 390.711, 241.713, 670.169, 282.385, 227.257, 167.624, 572.737, 508.877, 179.737, 542.489,
#      299.881, 485.292, 342.351, 426.795, 420.921, 244.375, 138.856, 146.126, 505.455, 620.853, 698.542, 465.568,
#      518.723, 693.901, 279.365, 441.73, 641.033, 508.19, 590.668, 217.423, 242.385, 233.04, 264.126, 178.144, 313.869,
#      25.689, 63.96, 317.551, 189.522, 266.201, 337.021, 552.873, 399.102, 81.933, 588.723, 217.604, 353.474, 368.767,
#      573.271, 574.342, 29.681, 96.087, 76.105, 533.156, 161.447, 261.603, 154.78, 4.014, 125.576, 685.963, 173.883,
#      175.491, 294.369, 219.493, 209.778, 187.958, 590.472, 567.581, 315.81, 250.341, 185.713, 152.66, 490.621, 487.255,
#      674.074, 325.406, 203.521, 89.187, 344.601, 586.892, 40.293, 670.319, 94.169, 691.157, 77.85, 9.144, 151.599,
#      499.457, 181.051, 175.801, 69.329, 605.603, 31.039, 555.259, 54.798, 677.438, 123.852, 323.816, 658.617, 100.836,
#      588.684, 85.805, 676.345, 216.419, 91.81, 653.208, 260.716, 233.886, 518.327, 193.179, 580.948, 629.847, 649.552,
#      377.485, 461.47, 671.851, 347.296, 566.963, 7.269, 296.904, 512.672, 699.289, 236.318, 430.323, 254.619, 401.38,
#      234.203, 599.45, 54.813, 667.576, 170.736, 666.918, 446.696, 484.019, 220.415, 524.829, 650.434, 406.922, 464.303,
#      648.955, 219.873, 165.524, 388.819, 285.492, 339.886, 178.905, 388.693, 25.404, 227.41, 277.031, 2.179, 304.443,
#      365.354, 26.589, 81.233, 683.861, 468.41, 132.489, 372.229, 227.045, 613.419, 439.864, 431.27, 151.778, 407.153,
#      423.587, 321.873, 429.841, 289.826, 534.041, 71.045, 664.191, 568.8, 588.603, 609.669, 414.091, 398.59, 353.325,
#      642.232, 598.551, 641.154, 438.924, 457.433, 476.993, 3.516, 626.86, 277.667, 526.699, 662.568, 220.757, 13.956,
#      315.561, 199.543, 257.348, 570.886, 569.193, 503.752, 645.551, 261.713, 138.453, 251.815, 641.276, 420.998,
#      367.472, 213.933, 505.425, 478.826, 618.737, 84.676, 518.992, 61.545, 400.936, 109.091, 336.456, 616.477, 613.228,
#      628.439, 51.506, 516.635, 176.583, 262.667, 647.305, 542.458, 567.849, 164.832, 690.385, 398.428, 392.08, 154.69,
#      277.992, 691.458, 259.604, 338.931, 290.851, 34.903, 227.043, 37.821, 620.799, 341.729, 505.215, 93.689, 312.42,
#      406.645, 183.08, 534.457, 17.891, 296.079, 604.503, 460.578, 250.744, 1.187, 614.587, 526.034, 325.663, 412.263,
#      69.153, 318.731, 288.575, 331.601, 615.532, 691.539, 375.523, 259.617, 334.199, 365.063, 403.853, 288.016, 227.18,
#      199.978, 432.645, 594.095, 598.482, 450.012, 397.57, 43.755, 174.535, 493.791, 496.013, 262.961, 584.911, 44.731,
#      126.6, 25.924, 387.995, 626.333, 511.526, 326.147, 267.118, 555.579, 518.326, 169.681, 215.309, 73.13, 590.239,
#      251.118, 376.469, 104.71, 673.334, 455.786, 204.115, 451.908, 483.034, 696.651, 248.963, 510.048, 100.353, 594.959,
#      606.561, 299.865, 185.248, 433.199, 462.139, 189.405, 510.681, 637.618, 139.669, 279.819, 24.886, 573.645, 79.358,
#      541.197, 26.14, 167.643, 4.973, 499.77, 572.238, 43.604, 241.965, 488.882, 112.385, 215.375, 513.111, 601.035,
#      392.227, 126.215, 425.436, 432.649, 264.531, 596.101, 477.794, 142.671, 69.408, 538.077, 657.089, 123.505, 236.113,
#      55.033, 526.907, 452.199, 515.517, 542.594, 463.98, 577.251, 236.88, 232.652, 591.296, 67.925, 311.334, 491.839,
#      366.169, 419.6, 648.651, 61.084, 345.916, 127.665, 182.819, 145.699, 594.986, 415.486, 214.448, 266.579, 234.294,
#      98.067, 591.626, 259.93, 578.894, 666.208, 24.531, 200.317, 611.611, 402.054, 55.641, 639.078, 438.677, 696.168,
#      347.291, 186.57, 289.453, 76.392, 361.514, 450.209, 296.281, 642.921, 427.9, 255.155, 370.034, 528.403, 430.76,
#      652.924, 604.128, 463.518, 127.647, 101.106, 5.306, 16.512, 432.963, 323.501, 307.036, 663.089, 132.679, 200.948,
#      489.765, 410.46, 219.36, 402.406, 679.422, 115.289, 387.936, 226.686, 580.627, 357.337, 637.371, 274.783, 518.625,
#      328.152, 94.184, 579.439, 686.824, 377.449, 88.837, 570.82, 531.459, 119.388, 207.512, 696.68, 668.176, 308.43,
#      124.058, 465.204, 414.581, 93.088, 359.083, 103.52, 331.486, 511.771, 203.223, 418.745, 474.226, 25.203, 338.822,
#      676.44, 575.479, 479.964, 227.907, 666.351, 433.131, 581.641, 0.74, 414.752, 558.96, 345.206, 179.388, 350.544,
#      541.547, 60.693, 416.726, 630.949, 163.756, 247.959, 593.454, 601.335, 171.198, 506.955, 358.644, 503.247, 122.846,
#      435.054, 656.795, 75.284, 40.506, 303.291, 635.08, 407.682, 533.631, 4.482, 357.788, 440.869, 646.69, 117.445,
#      217.118, 268.667, 439.498, 440.381, 163.107, 46.658, 625.538, 82.437, 673.081, 246.818, 274.749, 539.186, 422.519,
#      320.578, 612.736, 295.54, 157.775, 254.45, 278.485, 356.627, 468.356, 314.242, 140.312, 526.852, 115.408, 358.416,
#      164.696, 466.19, 343.57, 190.226, 73.626, 591.026, 306.666, 105.166, 599.374, 433.018, 511.643, 425.292, 431.143,
#      57.027, 31.216, 105.378, 210.894, 618.592, 42.89, 691.146, 599.061, 7.324, 327.25, 287.594, 655.648, 535.092,
#      424.668, 385.188, 273.684, 477.785, 543.363, 44.104, 104.879, 546.391, 519.753, 470.535, 160.682, 503.698, 170.607,
#      300.36, 20.448, 630.564, 35.45, 169.14, 668.574, 585.276, 672.214, 157.892, 235.547, 479.29, 356.535, 426.157,
#      295.532, 651.864, 50.638, 423.855, 384.811, 59.757, 74.069, 395.489, 665.722, 364.454, 675.94, 484.997, 610.04,
#      317.067, 265.523, 205.517, 290.653, 150.417, 269.099, 238.041, 576.853, 636.151, 537.983, 639.838, 273.692, 275.23,
#      272.056, 225.07, 219.352, 666.58, 425.324, 206.241, 137.564, 432.85, 454.144, 646.294, 295.266, 35.531, 523.965,
#      123.428, 559.091, 2.843, 264.27, 387.754, 427.313, 599.264, 165.599, 478.212, 235.026, 73.152, 377.291, 394.087,
#      507.458, 499.123, 465.485, 263.652, 356.482, 218.142, 0.226, 343.272, 473.894, 573.173, 325.75, 675.782, 274.672,
#      628.342, 322.077, 21.873, 142.144, 20.643, 548.869, 356.868, 148.416, 372.402, 495.626, 58.299, 651.793, 497.18,
#      211.462, 43.906, 214.642])
# random_phases = np.random.random(S)
# '''fixed UE setup'''  # MO     RB       LB      LO       RO      RM      MM       MB      LM
# x_setup.append(362.319)  # 595.7, 157.456, 75.149, 635.127, 545.75, 354.62, 365.751, 60.452
# y_setup.append(177.642)  # 559.248, 607.732, 49.53, 99.452, 390.91, 403.956, 617.03, 396.547
#
# '''fixed UE setup'''
# # x_setup.extend([184.75, 362.147, 478.3])
# # y_setup.extend([148.16, 568.29, 400.6])
#
# '''plotting setup...'''
# plt.scatter(x_setup[:-1], y_setup[:-1])
# plt.scatter(x_setup[-1], y_setup[-1], color='red')
# plt.title(header)
# plt.show()
#
# # calculate distances (a: BS -> scatt; b: scatt -> UE)
# distances_a = []  # staat vast, dus moet niet op voorhand gegenereerd worden
# for m in range(M):
#     distances_a_i = []
#     for s in range(S):
#         z = s + 2
#         distances_a_i.append(np.sqrt((x_setup[m] - x_setup[-z]) ** 2 + (y_setup[m] - y_setup[-z]) ** 2))
#     distances_a.append(distances_a_i)
# # calc channel vector for UE @original place
# h = []
# for m in range(M):
#     phaseshifts = []
#     for s in range(S):
#         dist = distances_a[m][s] + np.sqrt(
#             (x_setup[-1] - x_setup[-(s + 2)]) ** 2 + (y_setup[-1] - y_setup[-(s + 2)]) ** 2)
#         phaseshifts.append(np.exp(-1j * (2 * np.pi * ((dist % 1) + random_phases[s]))))
#     h.append(sum(phaseshifts) / np.exp(np.pi))
# h = np.array(h)
# wH = h.conj().T
#
# '''raster'''
# y1 = list(range(-100, 105, 10))
# x1 = list(range(-100, 105, 10))
# y2 = list(range(-500, -100, 10))
# x2 = list(range(-500, -100, 10))
# y3 = list(range(110, 510, 10))
# x3 = list(range(110, 510, 10))
# y2.extend(y1)
# y2.extend(y3)
# x2.extend(x1)
# x2.extend(x3)
# y = [item * resolution / 10 + y_setup[-1] for item in y2]
# x = [item * resolution / 10 + x_setup[-1] for item in x2]
# '''centrale plaats antenne: x[int(len(x)/2)], y[int(len(y)/2)]'''
# # plt.scatter(x, y)
# # plt.scatter(x_setup[-1], y_setup[-1], color='red')
# # plt.title(header)
# # plt.show()
#
# ampl = np.zeros(shape=(len(x), len(y)))
# for a in range(len(x)):
#     for b in range(len(y)):
#         hdx = []
#         for m in range(M):
#             phaseshifts = []
#             for s in range(S):
#                 dist = distances_a[m][s] + np.sqrt((x[a] - x_setup[-(s + 2)]) ** 2 + (y[b] - y_setup[-(s + 2)]) ** 2)
#                 phaseshifts.append(np.exp(-1j * (2 * np.pi * ((dist % 1) + random_phases[s]))))
#             hdx.append(sum(phaseshifts) / np.exp(np.pi))
#         desired_signal = np.matmul(wH, hdx) / M * signal_wave
#         sr = [cmath.polar(i) for i in desired_signal]
#         amplitudes = [item[0] if int(item[1]) == 0 else -item[0] for item in sr]
#         ratio_out_vs_rt_ampl = amplitudes[int(len(amplitudes) / 2) + 1] / signal_wave[int(len(signal_wave) / 2) + 1]
#         if ratio_out_vs_rt_ampl < 0:
#             ampl[a, b] = -20
#         else:
#             ampl[a, b] = 20 * np.log10(ratio_out_vs_rt_ampl)
#     print(a)
#
# # plt.plot(signal_wave.real)
# # plt.plot(amplitudes)
# # plt.title('--M=' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(1))
# # plt.show()
# # # fig = px.imshow(z=ampl, x=x, y=y, color_continuous_scale=px.colors.diverging.Portland)
# ma = max([max(i) for i in ampl])
# mi = -5
# fig = go.Figure(data=go.Heatmap(
#     z=ampl,
#     x=x,
#     y=y,
#     colorscale='Jet'
#     # zmin=mi,
#     # zmax=ma
# ))
#
# fig.add_trace(go.Scatter(
#     x=x_setup[M:-1],
#     y=y_setup[M:-1],
#     mode='markers',
#     name='scatterers',
#     marker_color='blue',
#     marker=dict(size=3)
# ))
#
# fig.add_trace(go.Scatter(
#     x=[x_setup[-1]],
#     y=[y_setup[-1]],
#     name='antenna',
#     mode='markers',
#     marker_color='red',
#     text=str(max([max(i) for i in ampl]))
# ))
# fig.add_trace(go.Scatter(
#     x=x_setup[:M],
#     y=y_setup[:M],
#     name='BS',
#     mode='markers',
#     marker_color='red',
#     marker=dict(size=3)
# ))
#
# fig.update_layout(autosize=False,
#                   width=850,
#                   height=800,
#                   title=header,
#                   font=dict(size=10))
#
# plotly.offline.plot(fig,
#                     filename='C:/Users/margo/OneDrive/Documenten/Masterproef/simulation/result plots/geomodel---' + '(' + datetime.datetime.now().strftime(
#                         "%Y-%m-%d_%H:%M") + ')' + titel + '.html')
# fig.show()

'''geomodel met 'reflecties', maar gaan we toch niet doen, want dan moet ieder scatt ook eens via iedere muur gaan'''
# '''definitions'''
# M = 64
# message_bits = np.array(
#     [1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1])
# signal_wave = QAM_generator.create_QAM_signal(message_bits, 64)
# # noise v:
# # noise = np.random.normal(0, np.sqrt(0.5), (M,len(signal_wave))) + 1j * np.random.normal(0, np.sqrt(0.5), (M,len(signal_wave)))
# # noise x:
# noise = None
# S = 1000
# dM = 0.5
# resolution = 0.1
# titel = '--M=' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(1) + '_resolution=' + str(
#     resolution) + '_noise-x__zonder_min_max_met_random_fase_i_scatt '
# header = '(' + datetime.datetime.now().strftime("%Y-%m-%d_%H:%M") + ')' + titel
# print(header)
#
# # place antennas (line @ x=0)
# y_setup = list(range(40000 - int(dM * 100 * M / 2), 40000 - int(dM * 100 * M / 2) + int(dM * 100 * M), int(dM * 100)))
# y_setup = [i * 0.010 for i in y_setup]
# x_setup = list([0 for i in y_setup])
# # # random scatt setup
# # # place scatterers (random)
# # for i in range(aantal_scatterers):
# #     x_setup.append(random.randint(100000, 700000) / 1000)
# #     y_setup.append(random.randint(0, 700000) / 1000)
# # # place UE
# # x_setup.append(450.3)
# # y_setup.append(400.6)
#
# '''fixed scatt setup'''
# # place scatterers (fixed)
# x_setup.extend(
#     [136.904, 324.208, 372.304, 212.753, 616.319, 513.373, 589.705, 525.047, 484.864, 538.594, 499.258, 110.835,
#      115.315, 236.064, 544.383, 66.021, 272.965, 669.449, 122.29, 566.642, 295.405, 114.352, 259.209, 612.662, 203.166,
#      90.857, 18.275, 206.37, 231.526, 216.672, 174.079, 242.721, 331.709, 239.248, 122.876, 433.624, 417.855, 585.446,
#      682.424, 651.79, 169.733, 284.347, 416.862, 168.557, 328.092, 28.119, 45.147, 617.275, 90.954, 646.08, 337.969,
#      471.871, 698.868, 546.794, 274.186, 387.491, 451.741, 88.846, 589.791, 18.122, 356.255, 54.018, 584.868, 337.57,
#      434.171, 333.598, 393.49, 269.702, 267.907, 510.373, 112.775, 119.559, 445.755, 519.162, 130.22, 588.997, 520.714,
#      454.781, 458.637, 642.786, 325.952, 57.881, 507.118, 247.208, 495.825, 671.144, 40.248, 323.388, 1.025, 221.4,
#      447.64, 327.338, 605.968, 371.518, 496.838, 227.601, 647.208, 622.315, 517.802, 63.759, 19.094, 385.701, 549.413,
#      570.511, 515.346, 235.257, 137.867, 638.515, 331.698, 680.446, 645.178, 304.417, 680.154, 110.715, 286.047,
#      486.166, 487.974, 135.729, 604.651, 568.487, 212.926, 17.506, 271.266, 219.229, 570.959, 596.891, 13.415, 684.413,
#      214.72, 563.859, 577.021, 249.689, 321.701, 10.718, 610.002, 353.747, 593.27, 392.984, 388.873, 380.876, 600.803,
#      263.679, 325.251, 60.873, 439.202, 400.512, 580.556, 391.437, 549.887, 86.23, 166.866, 515.734, 253.437, 152.785,
#      489.748, 694.288, 532.801, 317.6, 50.193, 685.889, 560.875, 161.76, 422.744, 364.383, 554.391, 447.738, 129.043,
#      577.847, 689.983, 8.836, 428.706, 335.81, 105.527, 97.203, 571.981, 671.844, 562.973, 221.606, 636.106, 110.035,
#      699.176, 277.163, 222.081, 325.943, 285.411, 636.263, 197.87, 416.336, 67.464, 415.67, 291.013, 33.061, 8.918,
#      49.858, 328.564, 54.573, 4.344, 50.347, 51.743, 496.179, 367.074, 64.579, 333.207, 656.409, 27.387, 47.638,
#      532.379, 165.86, 215.765, 91.726, 135.333, 228.438, 604.363, 134.16, 72.727, 633.675, 272.935, 563.061, 104.248,
#      635.887, 2.446, 535.386, 438.3, 194.888, 42.854, 409.752, 329.598, 360.081, 490.211, 231.422, 337.353, 201.797,
#      661.326, 40.502, 372.725, 205.558, 554.416, 625.857, 90.783, 596.917, 566.918, 124.526, 550.8, 338.193, 42.292,
#      88.566, 573.769, 68.553, 112.874, 97.028, 466.31, 200.83, 18.976, 545.632, 45.346, 0.094, 282.81, 447.611, 316.319,
#      560.398, 235.53, 240.622, 566.873, 289.45, 40.713, 28.413, 25.137, 458.19, 404.477, 323.798, 474.824, 215.766,
#      13.485, 462.984, 78.914, 118.746, 601.227, 43.007, 501.819, 471.749, 35.439, 87.112, 693.91, 502.595, 462.05,
#      172.686, 618.918, 484.401, 62.131, 439.691, 543.779, 322.187, 516.889, 159.758, 393.162, 678.431, 474.206, 348.753,
#      258.891, 671.065, 552.634, 441.636, 596.079, 98.259, 37.101, 488.444, 325.822, 626.88, 389.8, 548.068, 659.083,
#      146.503, 313.935, 30.201, 393.431, 455.945, 192.804, 125.254, 541.352, 12.559, 84.726, 587.429, 184.954, 401.679,
#      97.143, 651.125, 674.624, 209.206, 628.735, 671.423, 458.045, 249.327, 81.821, 144.69, 51.464, 30.813, 534.918,
#      228.721, 95.974, 175.725, 522.205, 351.513, 535.366, 624.434, 568.804, 296.052, 97.85, 237.518, 375.766, 682.837,
#      240.971, 81.808, 691.311, 617.623, 461.701, 545.279, 433.362, 318.413, 40.574, 627.943, 493.492, 59.65, 402.257,
#      474.253, 196.94, 48.395, 574.78, 225.859, 354.207, 47.021, 470.63, 308.343, 671.506, 496.394, 238.423, 119.999,
#      427.714, 89.063, 278.972, 574.778, 376.375, 607.685, 622.338, 235.663, 149.953, 69.949, 386.778, 297.638, 255.017,
#      387.466, 459.045, 635.096, 655.183, 338.452, 455.4, 137.018, 545.425, 449.75, 517.021, 43.893, 108.885, 152.785,
#      493.993, 537.661, 559.509, 358.183, 516.634, 107.621, 346.359, 435.643, 210.503, 313.497, 460.402, 427.947,
#      229.205, 595.543, 176.33, 280.388, 591.397, 486.547, 650.703, 440.446, 135.665, 245.497, 125.99, 591.799, 163.427,
#      363.518, 31.023, 386.795, 34.271, 157.464, 259.414, 649.807, 440.04, 654.22, 679.197, 624.405, 118.158, 259.204,
#      589.181, 261.432, 651.433, 454.975, 248.654, 409.516, 405.541, 362.911, 141.79, 646.825, 553.163, 176.27, 338.022,
#      174.474, 62.466, 80.166, 1.662, 541.685, 382.686, 652.131, 86.854, 648.679, 253.423, 614.786, 5.51, 460.175,
#      469.066, 58.409, 386.246, 463.714, 86.54, 460.672, 548.995, 63.607, 221.624, 493.55, 204.84, 679.582, 269.726,
#      347.996, 568.991, 698.238, 380.927, 696.539, 534.114, 76.426, 496.234, 433.766, 468.687, 269.405, 368.645, 342.771,
#      123.369, 362.986, 237.484, 39.134, 523.858, 563.845, 226.828, 152.131, 410.704, 465.316, 610.336, 1.643, 159.716,
#      269.198, 451.924, 274.02, 208.46, 463.127, 620.05, 82.754, 235.556, 545.612, 692.432, 525.942, 567.515, 628.756,
#      142.38, 416.931, 9.682, 355.944, 452.317, 213.84, 96.103, 28.68, 294.57, 202.264, 372.823, 26.168, 682.238,
#      636.673, 651.951, 611.198, 637.095, 668.506, 364.819, 244.448, 169.986, 302.057, 328.655, 137.511, 544.487, 42.146,
#      671.245, 598.855, 519.906, 165.888, 449.657, 478.559, 346.12, 312.175, 674.873, 397.358, 202.93, 149.896, 560.757,
#      669.873, 277.636, 429.665, 51.083, 64.401, 523.109, 494.169, 238.109, 278.305, 686.836, 525.911, 525.992, 530.726,
#      348.717, 698.055, 55.839, 582.527, 532.197, 632.384, 688.333, 584.233, 256.479, 451.483, 440.962, 459.016, 8.501,
#      37.502, 2.647, 625.91, 80.601, 534.618, 519.635, 642.368, 152.239, 491.556, 428.26, 132.554, 535.144, 506.652,
#      125.692, 332.832, 9.003, 378.662, 665.133, 327.107, 572.812, 491.72, 81.959, 441.653, 342.855, 7.299, 367.383,
#      627.269, 8.868, 223.148, 569.975, 211.76, 324.491, 193.638, 571.227, 457.913, 205.653, 445.799, 514.183, 519.01,
#      633.577, 376.101, 563.672, 340.407, 367.397, 95.848, 495.849, 20.059, 442.913, 677.953, 162.668, 24.494, 535.09,
#      88.732, 507.225, 441.898, 68.511, 143.923, 92.602, 221.153, 406.081, 175.983, 176.566, 97.574, 296.727, 249.642,
#      17.155, 656.574, 568.765, 589.541, 327.271, 428.389, 156.569, 429.165, 177.847, 647.341, 99.391, 653.927, 566.099,
#      388.814, 450.418, 298.141, 291.211, 177.135, 149.652, 365.211, 201.896, 383.144, 215.076, 150.205, 577.629,
#      333.259, 98.335, 434.655, 268.387, 94.523, 336.506, 663.641, 570.508, 520.647, 280.629, 62.942, 92.925, 189.531,
#      323.336, 519.824, 565.311, 158.403, 288.919, 203.967, 313.376, 204.614, 656.43, 204.489, 656.561, 600.304, 495.457,
#      236.736, 197.117, 320.082, 266.24, 554.2, 6.103, 244.102, 503.773, 430.264, 22.478, 344.352, 376.68, 519.669,
#      142.939, 480.018, 531.688, 436.421, 546.312, 239.544, 692.279, 117.822, 87.983, 146.069, 440.225, 453.301, 282.141,
#      676.628, 35.22, 625.437, 551.434, 276.971, 634.743, 33.651, 57.985, 394.06, 130.541, 562.422, 421.139, 111.001,
#      381.333, 193.494, 421.124, 433.224, 140.294, 674.34, 27.941, 491.561, 467.725, 493.485, 19.771, 27.666, 516.795,
#      248.895, 401.39, 429.439, 446.837, 277.137, 125.778, 207.169, 47.774, 333.502, 546.037, 564.353, 133.296, 454.95,
#      308.004, 237.793, 101.503, 181.689, 223.549, 176.617, 689.084, 249.535, 626.393, 487.154, 167.202, 320.73, 633.807,
#      464.109, 699.312, 631.309, 604.249, 33.871, 515.503, 80.52, 323.995, 192.843, 67.155, 13.507, 68.424, 389.838,
#      679.387, 89.367, 168.668, 498.603, 9.498, 206.07, 425.562, 76.794, 424.529, 44.945, 139.041, 474.713, 398.466,
#      323.289, 664.261, 534.917, 666.815, 110.289, 543.128, 450.485, 44.323, 640.996, 463.487, 313.09, 468.197, 137.509,
#      32.85, 523.862, 397.745, 227.004, 158.747, 385.42, 599.902, 400.779, 231.802, 560.686, 654.022, 307.869, 499.214,
#      87.033, 127.571, 484.315, 38.523, 445.737, 220.621, 625.33, 16.318, 24.76, 68.171, 108.338, 102.19, 664.794,
#      513.747, 365.313, 445.555, 678.058, 116.667, 264.229, 156.195, 561.312, 548.94, 577.315, 498.289, 312.723, 390.411,
#      221.441, 295.409, 160.44, 179.505, 114.77, 544.35, 200.441, 621.258, 85.22, 54.08, 510.711, 111.263, 9.019, 82.333,
#      627.064, 508.22, 574.094, 492.062, 305.345, 639.357, 407.679, 585.032, 626.526, 667.121, 238.953, 362.581, 130.56,
#      341.909, 17.85, 421.641, 77.899, 692.01, 504.924, 536.67, 499.769, 72.747, 502.766, 75.354, 84.953, 458.402,
#      54.036, 151.316, 329.756, 169.11, 553.856, 358.488, 215.333, 198.327, 674.727, 54.952, 341.97, 548.606, 361.305,
#      680.474, 293.118, 680.06, 28.598, 181.564, 593.949, 147.439, 398.383, 166.511, 285.656, 19.724, 401.01, 585.226,
#      223.169, 104.77, 418.563, 365.063, 214.693, 43.265, 394.913, 539.453, 372.103, 329.001, 626.524, 588.682, 569.43,
#      695.742, 650.405, 601.469, 587.919, 295.834, 43.625, 248.535, 642.28, 654.939, 621.497, 168.8, 117.214, 313.133,
#      251.267, 264.042, 664.738, 518.861, 275.06, 360.41, 524.216, 524.857, 482.086, 186.342, 201.422, 581.64, 357.524,
#      144.191, 69.787, 72.581, 34.855, 147.679, 19.97, 136.061, 477.243, 310.467, 538.869, 255.994, 33.232, 107.357,
#      656.498, 61.484, 161.413, 384.746, 339.392, 413.717, 97.307, 329.677, 569.769, 396.569, 307.58, 578.766, 198.618,
#      178.094, 453.233, 87.481, 350.801, 300.544, 333.179, 246.252, 46.208, 536.706, 116.112, 236.724, 114.908, 102.1,
#      403.057, 261.319])
# y_setup.extend(
#     [379.033, 672.871, 455.867, 680.98, 42.134, 188.184, 504.89, 634.655, 496.932, 623.65, 247.083, 405.661, 622.491,
#      674.211, 86.786, 350.438, 295.366, 460.69, 87.577, 676.61, 179.927, 493.366, 574.442, 574.976, 33.43, 279.476,
#      26.987, 479.001, 12.423, 340.564, 586.854, 78.247, 454.672, 177.2, 389.305, 693.428, 123.316, 592.967, 243.087,
#      301.146, 162.686, 330.611, 527.285, 397.695, 204.971, 683.649, 514.546, 179.83, 527.03, 644.308, 610.485, 517.692,
#      668.405, 247.895, 650.694, 370.607, 468.195, 644.474, 66.135, 578.946, 317.854, 331.506, 2.938, 365.347, 397.012,
#      189.649, 351.617, 282.849, 401.48, 422.254, 358.637, 287.527, 201.885, 534.421, 44.407, 611.717, 615.968, 450.467,
#      248.975, 273.296, 412.916, 668.351, 391.159, 575.022, 697.618, 250.063, 276.567, 190.568, 479.276, 357.103,
#      247.927, 174.511, 670.961, 445.223, 689.219, 543.402, 136.566, 430.415, 617.528, 301.942, 323.91, 558.82, 549.423,
#      305.65, 602.868, 327.84, 120.067, 391.551, 210.804, 35.33, 77.674, 277.867, 75.804, 114.333, 687.547, 414.774,
#      236.302, 173.579, 243.879, 76.618, 692.939, 177.783, 645.156, 162.495, 498.337, 484.882, 249.909, 0.711, 60.548,
#      600.432, 453.15, 399.295, 652.835, 535.07, 642.857, 298.112, 537.415, 409.941, 125.536, 253.23, 515.893, 169.161,
#      222.255, 695.336, 81.799, 326.909, 587.759, 79.285, 212.4, 404.79, 673.727, 209.2, 227.512, 245.297, 570.671,
#      651.903, 79.56, 321.161, 517.679, 319.292, 545.777, 222.357, 381.239, 522.329, 645.768, 422.09, 122.665, 256.376,
#      274.461, 210.604, 11.145, 454.262, 418.332, 614.248, 313.489, 343.883, 5.971, 211.166, 522.504, 103.409, 99.575,
#      119.153, 214.799, 6.18, 377.24, 356.881, 615.988, 255.747, 672.505, 358.376, 404.408, 83.711, 655.327, 109.08,
#      324.029, 429.56, 683.366, 566.195, 681.026, 286.642, 337.29, 451.697, 665.891, 11.395, 589.074, 509.933, 691.602,
#      338.413, 5.855, 543.778, 151.951, 422.031, 442.924, 70.074, 95.297, 603.647, 513.541, 329.0, 564.043, 632.274,
#      333.051, 417.54, 685.776, 685.387, 672.418, 403.283, 365.772, 527.438, 459.674, 618.45, 238.611, 18.642, 561.086,
#      106.523, 584.787, 243.109, 199.735, 170.417, 91.419, 328.411, 659.457, 138.692, 369.508, 493.629, 696.762, 135.578,
#      124.632, 625.847, 257.897, 76.164, 474.704, 224.14, 158.454, 120.834, 301.485, 365.632, 663.201, 428.086, 23.432,
#      188.455, 160.51, 639.933, 411.996, 425.464, 20.699, 137.854, 204.234, 82.259, 139.64, 256.857, 95.097, 278.059,
#      442.337, 610.335, 354.722, 169.793, 88.636, 398.601, 403.099, 247.207, 297.641, 361.797, 601.661, 412.736, 287.935,
#      388.207, 354.615, 467.562, 91.671, 317.675, 5.22, 546.958, 376.913, 292.864, 412.894, 341.552, 589.625, 683.455,
#      548.555, 273.375, 508.066, 286.43, 290.563, 218.282, 236.061, 640.923, 671.102, 382.945, 455.867, 117.961, 587.143,
#      45.198, 283.656, 625.75, 295.095, 32.268, 574.117, 78.412, 83.288, 255.547, 77.542, 331.729, 120.961, 257.22,
#      281.792, 542.58, 72.426, 699.335, 390.324, 575.764, 220.938, 645.482, 390.762, 420.104, 445.308, 422.458, 375.051,
#      12.944, 1.284, 197.622, 287.571, 21.117, 585.958, 361.325, 569.287, 172.38, 49.639, 110.89, 572.498, 110.322,
#      71.093, 164.27, 225.194, 390.711, 241.713, 670.169, 282.385, 227.257, 167.624, 572.737, 508.877, 179.737, 542.489,
#      299.881, 485.292, 342.351, 426.795, 420.921, 244.375, 138.856, 146.126, 505.455, 620.853, 698.542, 465.568,
#      518.723, 693.901, 279.365, 441.73, 641.033, 508.19, 590.668, 217.423, 242.385, 233.04, 264.126, 178.144, 313.869,
#      25.689, 63.96, 317.551, 189.522, 266.201, 337.021, 552.873, 399.102, 81.933, 588.723, 217.604, 353.474, 368.767,
#      573.271, 574.342, 29.681, 96.087, 76.105, 533.156, 161.447, 261.603, 154.78, 4.014, 125.576, 685.963, 173.883,
#      175.491, 294.369, 219.493, 209.778, 187.958, 590.472, 567.581, 315.81, 250.341, 185.713, 152.66, 490.621, 487.255,
#      674.074, 325.406, 203.521, 89.187, 344.601, 586.892, 40.293, 670.319, 94.169, 691.157, 77.85, 9.144, 151.599,
#      499.457, 181.051, 175.801, 69.329, 605.603, 31.039, 555.259, 54.798, 677.438, 123.852, 323.816, 658.617, 100.836,
#      588.684, 85.805, 676.345, 216.419, 91.81, 653.208, 260.716, 233.886, 518.327, 193.179, 580.948, 629.847, 649.552,
#      377.485, 461.47, 671.851, 347.296, 566.963, 7.269, 296.904, 512.672, 699.289, 236.318, 430.323, 254.619, 401.38,
#      234.203, 599.45, 54.813, 667.576, 170.736, 666.918, 446.696, 484.019, 220.415, 524.829, 650.434, 406.922, 464.303,
#      648.955, 219.873, 165.524, 388.819, 285.492, 339.886, 178.905, 388.693, 25.404, 227.41, 277.031, 2.179, 304.443,
#      365.354, 26.589, 81.233, 683.861, 468.41, 132.489, 372.229, 227.045, 613.419, 439.864, 431.27, 151.778, 407.153,
#      423.587, 321.873, 429.841, 289.826, 534.041, 71.045, 664.191, 568.8, 588.603, 609.669, 414.091, 398.59, 353.325,
#      642.232, 598.551, 641.154, 438.924, 457.433, 476.993, 3.516, 626.86, 277.667, 526.699, 662.568, 220.757, 13.956,
#      315.561, 199.543, 257.348, 570.886, 569.193, 503.752, 645.551, 261.713, 138.453, 251.815, 641.276, 420.998,
#      367.472, 213.933, 505.425, 478.826, 618.737, 84.676, 518.992, 61.545, 400.936, 109.091, 336.456, 616.477, 613.228,
#      628.439, 51.506, 516.635, 176.583, 262.667, 647.305, 542.458, 567.849, 164.832, 690.385, 398.428, 392.08, 154.69,
#      277.992, 691.458, 259.604, 338.931, 290.851, 34.903, 227.043, 37.821, 620.799, 341.729, 505.215, 93.689, 312.42,
#      406.645, 183.08, 534.457, 17.891, 296.079, 604.503, 460.578, 250.744, 1.187, 614.587, 526.034, 325.663, 412.263,
#      69.153, 318.731, 288.575, 331.601, 615.532, 691.539, 375.523, 259.617, 334.199, 365.063, 403.853, 288.016, 227.18,
#      199.978, 432.645, 594.095, 598.482, 450.012, 397.57, 43.755, 174.535, 493.791, 496.013, 262.961, 584.911, 44.731,
#      126.6, 25.924, 387.995, 626.333, 511.526, 326.147, 267.118, 555.579, 518.326, 169.681, 215.309, 73.13, 590.239,
#      251.118, 376.469, 104.71, 673.334, 455.786, 204.115, 451.908, 483.034, 696.651, 248.963, 510.048, 100.353, 594.959,
#      606.561, 299.865, 185.248, 433.199, 462.139, 189.405, 510.681, 637.618, 139.669, 279.819, 24.886, 573.645, 79.358,
#      541.197, 26.14, 167.643, 4.973, 499.77, 572.238, 43.604, 241.965, 488.882, 112.385, 215.375, 513.111, 601.035,
#      392.227, 126.215, 425.436, 432.649, 264.531, 596.101, 477.794, 142.671, 69.408, 538.077, 657.089, 123.505, 236.113,
#      55.033, 526.907, 452.199, 515.517, 542.594, 463.98, 577.251, 236.88, 232.652, 591.296, 67.925, 311.334, 491.839,
#      366.169, 419.6, 648.651, 61.084, 345.916, 127.665, 182.819, 145.699, 594.986, 415.486, 214.448, 266.579, 234.294,
#      98.067, 591.626, 259.93, 578.894, 666.208, 24.531, 200.317, 611.611, 402.054, 55.641, 639.078, 438.677, 696.168,
#      347.291, 186.57, 289.453, 76.392, 361.514, 450.209, 296.281, 642.921, 427.9, 255.155, 370.034, 528.403, 430.76,
#      652.924, 604.128, 463.518, 127.647, 101.106, 5.306, 16.512, 432.963, 323.501, 307.036, 663.089, 132.679, 200.948,
#      489.765, 410.46, 219.36, 402.406, 679.422, 115.289, 387.936, 226.686, 580.627, 357.337, 637.371, 274.783, 518.625,
#      328.152, 94.184, 579.439, 686.824, 377.449, 88.837, 570.82, 531.459, 119.388, 207.512, 696.68, 668.176, 308.43,
#      124.058, 465.204, 414.581, 93.088, 359.083, 103.52, 331.486, 511.771, 203.223, 418.745, 474.226, 25.203, 338.822,
#      676.44, 575.479, 479.964, 227.907, 666.351, 433.131, 581.641, 0.74, 414.752, 558.96, 345.206, 179.388, 350.544,
#      541.547, 60.693, 416.726, 630.949, 163.756, 247.959, 593.454, 601.335, 171.198, 506.955, 358.644, 503.247, 122.846,
#      435.054, 656.795, 75.284, 40.506, 303.291, 635.08, 407.682, 533.631, 4.482, 357.788, 440.869, 646.69, 117.445,
#      217.118, 268.667, 439.498, 440.381, 163.107, 46.658, 625.538, 82.437, 673.081, 246.818, 274.749, 539.186, 422.519,
#      320.578, 612.736, 295.54, 157.775, 254.45, 278.485, 356.627, 468.356, 314.242, 140.312, 526.852, 115.408, 358.416,
#      164.696, 466.19, 343.57, 190.226, 73.626, 591.026, 306.666, 105.166, 599.374, 433.018, 511.643, 425.292, 431.143,
#      57.027, 31.216, 105.378, 210.894, 618.592, 42.89, 691.146, 599.061, 7.324, 327.25, 287.594, 655.648, 535.092,
#      424.668, 385.188, 273.684, 477.785, 543.363, 44.104, 104.879, 546.391, 519.753, 470.535, 160.682, 503.698, 170.607,
#      300.36, 20.448, 630.564, 35.45, 169.14, 668.574, 585.276, 672.214, 157.892, 235.547, 479.29, 356.535, 426.157,
#      295.532, 651.864, 50.638, 423.855, 384.811, 59.757, 74.069, 395.489, 665.722, 364.454, 675.94, 484.997, 610.04,
#      317.067, 265.523, 205.517, 290.653, 150.417, 269.099, 238.041, 576.853, 636.151, 537.983, 639.838, 273.692, 275.23,
#      272.056, 225.07, 219.352, 666.58, 425.324, 206.241, 137.564, 432.85, 454.144, 646.294, 295.266, 35.531, 523.965,
#      123.428, 559.091, 2.843, 264.27, 387.754, 427.313, 599.264, 165.599, 478.212, 235.026, 73.152, 377.291, 394.087,
#      507.458, 499.123, 465.485, 263.652, 356.482, 218.142, 0.226, 343.272, 473.894, 573.173, 325.75, 675.782, 274.672,
#      628.342, 322.077, 21.873, 142.144, 20.643, 548.869, 356.868, 148.416, 372.402, 495.626, 58.299, 651.793, 497.18,
#      211.462, 43.906, 214.642])
# '''fixed UE setup'''  # MO     RB       LB      LO       RO      RM      MM       MB      LM
# x_setup.append(362.319)  # 595.7, 157.456, 75.149, 635.127, 545.75, 354.62, 365.751, 60.452
# y_setup.append(177.642)  # 559.248, 607.732, 49.53, 99.452, 390.91, 403.956, 617.03, 396.547
#
# '''fixed UE setup'''
# # x_setup.extend([184.75, 362.147, 478.3])
# # y_setup.extend([148.16, 568.29, 400.6])
#
# '''plotting setup...'''
# plt.scatter(x_setup[:-1], y_setup[:-1])
# plt.scatter(x_setup[-1], y_setup[-1], color='red')
# plt.title(header)
# plt.show()
#
# # calculate distances (a: BS -> scatt; b: scatt -> UE)
# distances_a = []  # staat vast, dus moet niet op voorhand gegenereerd worden
# for m in range(M):
#     distances_a_i = []
#     for s in range(S):
#         z = s + 2
#         distances_a_i.append(np.sqrt((x_setup[m] - x_setup[-z]) ** 2 + (y_setup[m] - y_setup[-z]) ** 2))
#     distances_a.append(distances_a_i)
# # calc channel vector for UE @original place
# h = []
# for m in range(M):
#     phaseshifts = []
#     for s in range(S):
#         dist = distances_a[m][s] + np.sqrt(
#             (x_setup[-1] - x_setup[-(s + 2)]) ** 2 + (y_setup[-1] - y_setup[-(s + 2)]) ** 2)
#         phaseshifts.append(np.exp(1j * (2 * np.pi * (dist % 1) + np.random.random(1) * 2 * np.pi)))
#     # refl. wall N
#     dist = np.sqrt((1400 - y_setup[m] - y_setup[-1]) ** 2 + x_setup[-1] ** 2)
#     phaseshifts.append(np.exp(1j * 2 * np.pi * (dist % 1)))
#     # refl. wall S
#     dist = np.sqrt((y_setup[m] + y_setup[-1]) ** 2 + x_setup[-1] ** 2)
#     phaseshifts.append(np.exp(1j * 2 * np.pi * (dist % 1)))
#     # refl. wall E
#     dist = np.sqrt((y_setup[m] - y_setup[-1]) ** 2 + (1600 - x_setup[-1]) ** 2)
#     phaseshifts.append(np.exp(1j * 2 * np.pi * (dist % 1)))
#     h.append(sum(phaseshifts))
#     # refl. wall W bestaat n: achter antenna
# h = np.array(h)
# wH = h.conj().T
#
# '''raster'''
# y1 = list(range(-100, 105, 10))
# x1 = list(range(-100, 105, 10))
# y2 = list(range(-500, -100, 10))
# x2 = list(range(-500, -100, 10))
# y3 = list(range(110, 510, 10))
# x3 = list(range(110, 510, 10))
# y2.extend(y1)
# y2.extend(y3)
# x2.extend(x1)
# x2.extend(x3)
# y = [item * resolution / 10 + y_setup[-1] for item in y2]
# x = [item * resolution / 10 + x_setup[-1] for item in x2]
# '''centrale plaats antenne: x[int(len(x)/2)], y[int(len(y)/2)]'''
# # plt.scatter(x, y)
# # plt.scatter(x_setup[-1], y_setup[-1], color='red')
# # plt.title(header)
# # plt.show()
#
# amplitudes = []
# ampl = np.zeros(shape=(len(x), len(y))) * 1j
# for a in range(1):
#     for b in range(1):
#         hdx = []
#         for m in range(M):
#             phaseshifts = []
#             for s in range(S):
#                 dist = distances_a[m][s] + np.sqrt((x[a] - x_setup[-(s + 2)]) ** 2 + (y[b] - y_setup[-(s + 2)]) ** 2)
#                 phaseshifts.append(np.exp(1j * (2 * np.pi * (dist % 1) + np.random.random(1) * 2 * np.pi)))
#             hdx.append(sum(phaseshifts))
#         desired_signal = np.matmul(wH, hdx) / (M * S) * signal_wave
#         sr = [cmath.polar(i) for i in desired_signal]
#         amplitudes = [item[0] if int(item[1]) == 0 else -item[0] for item in sr]
#         ratio_out_vs_rt_ampl = amplitudes[np.where(max(signal_wave) == signal_wave)[0][0]] / signal_wave[
#             np.where(max(signal_wave) == signal_wave)[0][0]]
#         if ratio_out_vs_rt_ampl < 0:
#             ampl[a, b] = -100
#         else:
#             ampl[a, b] = 20 * np.log10(ratio_out_vs_rt_ampl)
#     print(a)
#
# plt.plot(signal_wave.real)
# plt.plot(amplitudes)
# plt.title('--M=' + str(M) + '_S=' + str(S) + '_dM=' + str(dM) + '_K=' + str(1))
# plt.show()
# # fig = px.imshow(z=ampl, x=x, y=y, color_continuous_scale=px.colors.diverging.Portland)
# ma = max([max(i) for i in ampl])
# mi = -5
# fig = go.Figure(data=go.Heatmap(
#     z=ampl.real,
#     x=x,
#     y=y,
#     colorscale='Jet'
#     # zmin=mi,
#     # zmax=ma
# ))
# fig.add_trace(go.Scatter(
#     x=x_setup[M:-3],
#     y=y_setup[M:-3],
#     mode='markers',
#     name='scatterers',
#     marker_color='blue',
#     marker=dict(size=3)
# ))
# fig.add_trace(go.Scatter(
#     x=[x_setup[-1]],
#     y=[y_setup[-1]],
#     name='antenna',
#     mode='markers',
#     marker_color='red',
#     text=str(max([max(i) for i in ampl]))
# ))
# fig.add_trace(go.Scatter(
#     x=x_setup[:M],
#     y=y_setup[:M],
#     name='BS',
#     mode='markers',
#     marker_color='red',
#     marker=dict(size=3)
# ))
# # fig.add_shape(
# #         type="rect",
# #         name = 'walls',
# #         x0=-7,
# #         y0=-7,
# #         x1=707,
# #         y1=707,
# #         line=dict(
# #             color="RoyalBlue",
# #             width=7
# #         )
# #     )
# fig.update_layout(autosize=False,
#                   width=850,
#                   height=800,
#                   title=header,
#                   font=dict(size=10))
#
# plotly.offline.plot(fig,
#                     filename='C:/Users/margo/OneDrive/Documenten/Masterproef/simulation/result plots/geomodel---' + '(' + datetime.datetime.now().strftime(
#                         "%d-%m-%Y_%H-%M") + ')' + titel + '.html')
# fig.show()

























'''vb sommatie v 3 lijsten'''
# ethernet_devices = [2,3,651,416,1]
# usb_devices = [352,15,126,3,11]
# jos = [32,23,211, 35, 1]
# all_devices = [sum(pair) for pair in zip(ethernet_devices, usb_devices, jos)]
# # MO: lijst1 + lijst2 plakt hij gwn achtereen, den onnozelaar



















'''geo model uit brol opgevist dus geen idee welke versie'''
# M = 2
# a = np.array([1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1])
# s = QAM_generator.create_QAM_signal(a, 64)
# noise = np.random.normal(0, np.sqrt(0.5), len(s)) + 1j * np.random.normal(0, np.sqrt(0.5), len(s))
# aantal_scatterers = 1000
# dist_between_BS_ant = 0.5
# resolution = 0.01
# titel = '--M=' + str(M) + '_scatt=' + str(aantal_scatterers) + '_dist-BS-antennas=' + str(
#     dist_between_BS_ant) + '_resolution=' + str(resolution) + '_noise-x__zonder_min_max'
# header = '(' + datetime.datetime.now().strftime("%Y-%m-%d_%H:%M") + ')' + titel
# print(header)
# # place antennas (line @ x=0)
# y_setup = list(range(4000 - int(M / 2), 4000 - int(M / 2) + int(dist_between_BS_ant * 10 * M), int(dist_between_BS_ant * 10)))
# y_setup = [i * 0.10 for i in y_setup]
# x_setup = list([0 for i in y_setup])
# # # random scatt setup
# # # place scatterers (random)
# # for i in range(aantal_scatterers):
# #     x_setup.append(random.randint(100000, 700000) / 1000)
# #     y_setup.append(random.randint(0, 700000) / 1000)
# # # place UE
# # x_setup.append(450.3)
# # y_setup.append(400.6)
# # fixed scatt setup
# x_setup.extend([281.062, 626.684, 562.62, 579.471, 208.285, 690.277, 293.243, 513.707, 507.254, 166.815, 661.411, 441.793, 693.324, 446.107, 388.934, 342.869, 614.232, 337.542, 574.243, 347.897, 313.528, 342.383, 333.716, 159.18, 695.068, 196.376, 333.714, 233.883, 122.415, 256.936, 607.621, 285.498, 177.566, 237.904, 171.847, 355.869, 247.899, 593.18, 345.595, 178.747, 310.219, 490.47, 185.268, 500.487, 664.966, 632.054, 437.436, 206.151, 361.217, 493.125, 211.581, 340.351, 403.561, 607.775, 578.967, 244.713, 345.605, 174.334, 100.064, 139.366, 244.902, 179.192, 358.482, 687.93, 120.032, 168.469, 597.173, 298.547, 250.987, 114.826, 480.657, 437.323, 523.365, 133.052, 413.767, 588.689, 115.112, 111.552, 663.742, 207.176, 353.572, 129.085, 130.503, 419.036, 268.183, 251.541, 176.038, 686.883, 505.348, 205.401, 684.113, 511.571, 603.329, 660.126, 670.484, 343.904, 201.54, 155.446, 412.437, 356.816, 173.43, 479.834, 380.809, 654.446, 530.941, 186.993, 396.005, 200.206, 136.737, 436.056, 310.574, 410.448, 689.879, 588.915, 151.681, 531.457, 633.965, 683.005, 699.15, 555.39, 338.356, 222.779, 665.531, 565.273, 555.803, 608.482, 143.587, 551.188, 465.149, 317.834, 238.234, 137.681, 314.514, 350.296, 234.525, 213.849, 201.588, 642.759, 685.903, 482.484, 251.624, 215.553, 687.025, 110.794, 346.406, 121.966, 523.737, 342.931, 589.571, 547.53, 346.802, 686.924, 140.835, 623.355, 488.29, 217.071, 425.435, 422.279, 444.634, 119.699, 692.058, 266.332, 289.173, 107.046, 133.459, 236.138, 417.519, 372.806, 414.709, 186.556, 685.557, 658.891, 237.243, 540.975, 440.211, 157.46, 561.903, 562.929, 416.696, 583.078, 232.709, 458.503, 443.881, 637.825, 208.692, 353.004, 179.736, 539.653, 136.705, 227.649, 202.994, 205.466, 195.673, 395.483, 539.148, 549.044, 670.215, 471.559, 161.259, 353.455, 289.194, 307.45, 212.797, 392.365, 496.308, 428.642, 380.254, 265.535, 675.842, 662.877, 488.479, 398.656, 149.757, 482.448, 251.566, 459.552, 350.937, 664.112, 650.372, 105.807, 607.333, 344.61, 624.895, 349.945, 254.798, 413.498, 114.224, 494.695, 675.292, 194.467, 169.103, 211.421, 425.659, 583.314, 201.038, 516.212, 581.844, 435.095, 294.425, 498.369, 497.206, 333.656, 143.223, 567.462, 480.547, 300.954, 185.943, 128.56, 124.841, 644.666, 244.121, 608.983, 353.688, 114.26, 659.702, 432.436, 530.093, 278.96, 121.881, 659.126, 138.318, 643.968, 171.75, 223.389, 433.347, 143.019, 347.935, 602.682, 669.198, 570.543, 244.745, 687.685, 637.24, 533.86, 383.256, 625.258, 498.024, 530.02, 188.459, 276.387, 286.531, 665.589, 318.15, 224.704, 541.49, 178.605, 129.706, 324.68, 645.298, 630.068, 301.298, 200.661, 663.624, 667.347, 690.598, 443.746, 445.961, 376.013, 410.198, 524.785, 595.524, 293.756, 621.9, 536.563, 486.674, 557.414, 160.888, 254.489, 257.831, 169.947, 195.181, 344.326, 288.926, 652.444, 112.758, 123.881, 309.353, 172.703, 490.659, 510.608, 215.304, 485.234, 305.759, 387.898, 240.646, 632.175, 518.984, 309.134, 588.222, 641.498, 302.828, 400.785, 569.623, 281.019, 215.165, 563.618, 328.303, 572.357, 393.191, 391.347, 120.288, 659.652, 310.932, 660.08, 417.169, 646.8, 167.672, 479.132, 156.422, 648.873, 312.819, 253.861, 335.565, 370.941, 556.67, 447.963, 398.676, 476.273, 679.023, 243.157, 203.695, 136.641, 162.938, 615.802, 683.967, 518.321, 145.05, 179.276, 231.073, 407.183, 460.007, 217.651, 320.322, 671.991, 524.276, 282.404, 117.414, 598.136, 119.925, 146.7, 171.111, 665.998, 295.722, 368.118, 181.661, 365.58, 227.131, 394.847, 513.002, 109.558, 663.735, 467.002, 337.78, 684.583, 656.044, 343.117, 282.315, 604.804, 603.78, 173.204, 667.57, 229.141, 215.935, 184.091, 138.719, 204.109, 462.324, 529.637, 511.006, 607.25, 628.11, 438.566, 341.125, 366.814, 567.288, 118.933, 420.073, 649.637, 640.129, 365.617, 515.928, 389.222, 199.887, 546.965, 560.831, 121.812, 297.675, 144.295, 253.249, 191.165, 509.027, 675.872, 619.892, 643.439, 474.109, 517.173, 698.636, 446.126, 455.2, 367.74, 173.498, 492.161, 293.452, 671.508, 142.297, 256.642, 315.801, 412.633, 688.751, 237.465, 395.791, 290.866, 328.062, 582.447, 473.694, 142.624, 350.203, 644.419, 692.014, 501.85, 189.718, 418.411, 690.001, 136.958, 558.566, 337.945, 485.725, 599.567, 666.031, 316.296, 263.905, 616.923, 244.275, 658.37, 638.66, 625.658, 623.387, 188.022, 514.955, 243.77, 379.573, 525.587, 564.949, 447.115, 273.791, 221.044, 281.356, 636.792, 575.782, 356.322, 603.811, 309.86, 178.985, 542.196, 699.827, 527.971, 426.112, 615.812, 286.994, 496.202, 493.473, 422.564, 378.653, 471.523, 131.545, 536.45, 348.278, 425.655, 680.4, 243.666, 611.644, 439.987, 595.48, 158.141, 382.443, 300.894, 332.411, 578.154, 586.847, 518.781, 387.324, 533.109, 147.831, 688.982, 426.605, 114.882, 457.042, 568.182, 185.232, 457.796, 189.045, 245.684, 632.01, 192.806, 570.613, 284.114, 270.98, 388.564, 482.826, 590.691, 178.409, 287.26, 303.269, 420.38, 154.065, 325.94, 397.835, 153.407, 622.059, 557.633, 190.66, 149.813, 231.978, 169.548, 236.559, 318.129, 384.697, 651.295, 639.874, 221.329, 300.033, 170.315, 347.317, 350.289, 498.327, 157.395, 349.4, 281.06, 506.376, 284.909, 547.806, 219.649, 632.646, 480.714, 142.242, 532.958, 474.065, 569.78, 126.513, 371.52, 225.045, 412.3, 697.379, 659.528, 509.195, 179.565, 125.846, 216.863, 326.356, 649.709, 262.332, 113.972, 685.138, 253.226, 605.626, 280.859, 549.164, 301.431, 263.891, 470.028, 103.297, 534.92, 392.732, 607.077, 604.512, 572.212, 445.412, 258.539, 407.927, 307.139, 117.195, 472.31, 505.528, 539.784, 534.451, 502.87, 168.555, 364.887, 414.581, 456.54, 444.149, 262.996, 349.179, 185.774, 631.001, 529.375, 656.968, 481.708, 484.888, 414.008, 124.279, 148.859, 484.622, 416.423, 523.989, 604.077, 117.457, 244.607, 592.6, 480.969, 596.72, 195.635, 153.577, 421.723, 338.327, 480.485, 220.466, 263.416, 484.957, 295.367, 197.177, 428.112, 500.145, 382.255, 135.403, 481.708, 385.318, 187.72, 421.181, 608.192, 152.749, 253.619, 444.221, 524.177, 563.794, 225.251, 272.882, 175.659, 206.626, 521.084, 175.077, 674.958, 303.166, 498.357, 408.286, 453.159, 402.46, 688.825, 128.735, 270.68, 422.76, 462.1, 311.055, 586.334, 341.001, 339.29, 457.687, 465.993, 397.454, 368.852, 699.564, 513.549, 215.596, 387.693, 137.64, 536.734, 440.258, 688.796, 265.897, 303.118, 229.878, 595.797, 312.819, 475.693, 649.837, 260.137, 617.973, 698.588, 379.282, 422.99, 408.621, 239.268, 649.922, 395.528, 148.887, 549.452, 653.844, 249.609, 170.341, 470.379, 613.294, 365.464, 528.313, 155.558, 521.893, 155.222, 481.16, 145.378, 183.122, 334.854, 176.363, 338.306, 621.053, 409.112, 298.535, 395.519, 279.91, 189.124, 571.674, 431.599, 496.087, 392.591, 587.669, 547.536, 110.947, 324.046, 177.738, 508.366, 260.384, 241.872, 308.217, 136.94, 307.369, 553.167, 554.914, 192.419, 420.415, 294.107, 217.589, 692.023, 473.032, 105.323, 606.55, 639.627, 435.706, 170.91, 459.022, 250.66, 501.261, 366.466, 377.171, 429.418, 564.94, 229.695, 546.64, 561.047, 181.901, 626.526, 147.102, 660.029, 349.311, 660.247, 430.769, 360.323, 313.614, 628.757, 311.015, 128.184, 415.379, 646.721, 281.951, 360.501, 290.347, 517.757, 664.794, 681.265, 565.656, 698.674, 460.602, 152.034, 442.409, 275.837, 135.387, 129.218, 351.624, 383.082, 645.515, 289.407, 669.774, 262.511, 498.04, 172.254, 130.168, 450.653, 156.621, 116.443, 161.901, 397.044, 606.848, 639.945, 183.997, 280.839, 223.443, 261.847, 220.468, 594.236, 568.99, 434.57, 479.659, 219.229, 404.354, 650.625, 479.509, 209.164, 460.074, 308.001, 202.479, 465.538, 318.002, 414.398, 207.439, 517.465, 379.924, 406.289, 147.254, 432.013, 237.42, 504.671, 348.994, 323.333, 279.067, 114.095, 604.383, 648.459, 280.838, 404.158, 336.924, 336.62, 108.171, 380.216, 484.792, 467.784, 265.179, 462.757, 197.229, 486.306, 202.772, 340.053, 672.187, 235.696, 260.696, 158.054, 658.265, 138.417, 300.293, 642.366, 390.303, 400.184, 222.741, 389.636, 301.409, 265.682, 104.948, 687.524, 417.769, 291.218, 552.776, 553.046, 578.983, 108.877, 567.856, 373.813, 424.414, 243.171, 337.415, 431.634, 647.743, 678.324, 610.266, 381.86, 380.008, 623.539, 171.194, 546.794, 640.408, 634.213, 599.491, 186.692, 575.07, 530.216, 689.079, 550.012, 546.853, 194.003, 625.962, 682.644, 273.422, 596.562, 387.375, 477.353, 608.354, 119.266, 241.196, 137.307, 667.757, 513.438, 338.069, 299.775, 291.435, 613.412, 116.387, 179.952, 378.876, 271.696, 415.171, 236.227, 367.065, 509.557, 494.745, 423.239, 586.293, 246.697, 383.296, 686.45, 185.12, 255.65, 195.638, 166.39, 173.878, 152.838, 507.591, 123.391, 499.618, 157.904, 577.092, 304.116, 422.64, 250.424, 696.983, 414.85, 189.478, 364.887, 466.21, 119.485, 412.887, 586.218, 447.74, 183.552, 677.289, 223.45, 185.949, 533.777, 447.152, 564.584, 382.712, 426.871, 669.71, 378.592, 238.398, 522.739, 666.389, 337.268, 339.416, 447.222, 558.713, 571.564, 591.821, 554.211, 696.286, 128.969, 201.883, 409.106, 588.027, 470.924, 649.973, 522.456, 544.707, 561.075, 342.033, 336.406, 450.3])
# y_setup.extend([309.622, 41.497, 590.12, 607.585, 643.853, 568.515, 676.947, 337.533, 102.452, 319.196, 303.585, 36.036, 47.49, 306.554, 204.316, 150.153, 581.626, 177.356, 568.853, 11.763, 317.32, 522.371, 67.575, 279.964, 609.915, 379.256, 351.055, 78.342, 180.828, 234.483, 448.13, 493.362, 114.964, 627.848, 635.749, 673.636, 536.482, 627.144, 42.207, 298.907, 291.604, 43.256, 396.399, 613.853, 151.208, 520.581, 213.78, 587.97, 266.998, 6.949, 590.313, 75.494, 86.722, 97.891, 316.631, 335.961, 504.29, 568.34, 693.597, 43.606, 221.278, 75.126, 379.873, 388.62, 145.586, 594.967, 80.002, 401.744, 570.712, 33.507, 122.654, 457.233, 159.517, 435.405, 125.934, 166.519, 234.638, 453.441, 406.716, 292.116, 397.569, 217.853, 649.593, 4.858, 59.299, 373.233, 77.303, 313.532, 34.719, 603.315, 615.736, 352.164, 537.421, 28.048, 48.474, 607.895, 460.07, 321.066, 282.569, 494.39, 387.455, 258.518, 650.21, 84.92, 644.419, 693.725, 605.331, 337.444, 462.573, 165.631, 75.366, 454.714, 424.846, 447.722, 341.35, 625.452, 314.213, 33.051, 83.436, 523.636, 577.449, 660.846, 528.211, 174.652, 607.058, 124.651, 566.541, 229.936, 319.101, 306.412, 85.977, 587.564, 472.056, 370.043, 498.597, 64.316, 512.221, 385.441, 577.954, 215.903, 151.251, 51.253, 693.117, 81.005, 493.296, 611.41, 647.455, 554.668, 49.429, 406.145, 463.595, 33.528, 488.242, 674.321, 691.605, 140.373, 622.705, 283.802, 114.251, 434.348, 561.142, 684.95, 21.633, 564.581, 577.978, 404.883, 520.247, 136.367, 286.98, 412.5, 599.255, 337.11, 80.423, 294.758, 162.285, 637.777, 226.56, 191.172, 633.514, 350.562, 644.909, 366.707, 194.606, 37.128, 160.141, 347.429, 384.034, 200.658, 393.975, 427.263, 37.069, 691.046, 204.835, 134.603, 300.57, 23.004, 232.164, 447.989, 129.248, 493.83, 542.987, 78.971, 236.547, 219.346, 93.639, 231.467, 344.523, 589.362, 474.731, 494.777, 128.499, 239.386, 197.311, 453.567, 261.226, 604.405, 232.581, 493.139, 376.533, 351.92, 22.014, 242.484, 230.806, 105.438, 38.174, 457.302, 597.025, 476.049, 630.267, 445.201, 411.442, 522.127, 530.89, 410.671, 272.98, 644.199, 209.356, 15.205, 580.102, 80.413, 195.759, 188.185, 484.282, 241.804, 602.525, 204.729, 686.136, 79.258, 84.344, 497.932, 119.721, 67.345, 93.966, 105.97, 101.092, 412.535, 404.917, 656.757, 693.967, 163.579, 248.672, 619.807, 599.396, 197.893, 636.164, 56.374, 110.773, 86.746, 487.088, 442.434, 371.841, 303.043, 110.06, 282.735, 279.833, 559.13, 211.631, 26.278, 599.585, 361.187, 70.813, 513.594, 478.795, 240.045, 541.298, 84.043, 61.655, 640.262, 507.252, 48.218, 330.504, 585.613, 464.698, 662.56, 492.231, 519.683, 27.71, 175.15, 501.42, 353.157, 502.475, 254.178, 271.402, 265.131, 583.194, 517.668, 387.285, 660.632, 56.62, 125.687, 291.131, 674.06, 388.194, 81.442, 354.472, 432.506, 610.206, 168.861, 514.866, 344.262, 478.756, 71.052, 94.28, 540.426, 454.888, 202.671, 72.594, 155.99, 678.141, 63.028, 641.128, 698.145, 695.359, 282.584, 380.425, 166.224, 347.868, 654.145, 350.821, 662.717, 222.424, 14.992, 566.571, 437.687, 679.999, 57.275, 178.3, 168.169, 189.656, 641.014, 211.026, 301.612, 668.951, 614.781, 189.058, 43.39, 149.453, 496.865, 357.898, 300.394, 236.938, 174.04, 324.475, 679.098, 208.221, 167.84, 131.431, 242.786, 87.654, 334.525, 62.668, 123.376, 54.155, 533.718, 297.887, 247.788, 544.826, 223.462, 243.655, 38.212, 289.473, 81.604, 372.599, 496.048, 509.072, 448.468, 306.098, 471.42, 270.621, 300.98, 457.94, 635.363, 433.869, 405.093, 575.065, 7.565, 491.698, 110.209, 92.381, 29.158, 668.469, 31.275, 350.355, 459.198, 534.461, 417.166, 635.934, 462.82, 470.902, 631.685, 297.714, 439.96, 198.072, 287.621, 247.145, 317.915, 45.807, 6.941, 570.827, 617.0, 97.696, 566.353, 239.932, 342.639, 23.752, 85.596, 478.251, 182.493, 105.575, 329.537, 306.065, 567.311, 344.368, 435.264, 678.912, 415.861, 341.515, 609.749, 551.929, 521.07, 396.917, 209.884, 112.865, 295.861, 578.955, 96.445, 698.503, 448.976, 12.027, 569.104, 560.832, 396.559, 260.597, 680.248, 324.195, 576.07, 357.773, 338.462, 383.887, 307.084, 400.612, 113.252, 39.06, 178.65, 323.574, 11.312, 354.312, 98.134, 250.935, 37.389, 423.789, 216.029, 47.996, 366.295, 529.149, 104.774, 414.605, 4.272, 289.076, 92.59, 555.825, 171.885, 32.857, 585.654, 24.407, 646.933, 153.931, 637.848, 36.496, 529.137, 237.09, 673.122, 647.976, 100.021, 338.527, 221.345, 145.159, 304.875, 340.484, 538.353, 337.721, 526.58, 280.334, 283.386, 40.645, 49.784, 164.194, 565.714, 290.946, 619.681, 45.835, 192.779, 38.954, 121.185, 537.378, 674.473, 423.542, 298.244, 267.277, 458.909, 370.037, 39.377, 411.748, 585.923, 182.344, 39.074, 649.597, 362.767, 10.046, 196.579, 411.047, 144.845, 158.578, 646.17, 388.689, 113.203, 407.26, 333.547, 282.736, 64.983, 665.837, 169.483, 499.219, 391.283, 259.973, 186.096, 309.208, 330.081, 396.974, 82.97, 62.766, 175.165, 694.227, 328.964, 512.443, 649.051, 16.565, 432.019, 457.647, 610.419, 598.695, 664.526, 123.214, 344.362, 607.726, 504.793, 216.551, 358.169, 421.361, 144.199, 528.732, 490.922, 293.244, 632.62, 284.285, 222.411, 547.978, 589.583, 670.225, 674.441, 95.152, 403.159, 567.721, 573.905, 78.16, 239.605, 647.124, 466.818, 690.191, 42.073, 580.151, 141.267, 484.74, 337.831, 354.935, 660.176, 402.942, 0.823, 307.218, 673.443, 647.875, 69.407, 448.994, 38.418, 340.572, 159.05, 427.564, 183.438, 450.794, 363.89, 409.875, 529.659, 155.648, 344.385, 619.392, 165.511, 458.146, 646.35, 124.048, 365.984, 642.58, 80.513, 84.307, 298.916, 445.391, 574.708, 309.369, 264.77, 254.152, 682.015, 295.187, 686.607, 524.786, 505.424, 186.012, 498.718, 439.828, 602.156, 347.077, 193.546, 619.794, 521.621, 424.961, 453.926, 653.087, 669.602, 32.143, 479.123, 502.938, 332.998, 179.664, 554.335, 249.966, 510.899, 68.444, 534.879, 6.645, 203.481, 589.658, 325.197, 533.249, 366.188, 506.252, 675.632, 477.442, 458.908, 19.96, 498.681, 560.489, 42.001, 688.565, 629.939, 222.731, 274.854, 632.72, 519.49, 43.005, 689.368, 194.466, 362.994, 78.006, 203.299, 657.146, 181.224, 548.652, 28.255, 272.666, 487.909, 488.62, 239.265, 336.935, 695.498, 142.118, 31.022, 55.625, 690.277, 131.839, 249.052, 435.42, 153.525, 656.58, 373.454, 291.346, 261.675, 480.192, 15.008, 209.864, 420.3, 514.783, 651.124, 308.105, 547.887, 516.159, 207.111, 436.629, 604.441, 57.636, 625.214, 405.799, 463.403, 131.648, 305.976, 278.94, 592.752, 687.204, 52.932, 291.926, 461.642, 218.701, 5.834, 27.296, 245.443, 358.228, 285.634, 305.65, 603.391, 551.838, 698.939, 485.476, 529.542, 35.537, 454.491, 396.062, 1.344, 544.507, 390.86, 384.439, 538.664, 195.937, 156.389, 355.236, 473.471, 241.9, 165.601, 378.713, 291.006, 116.014, 588.006, 528.262, 541.483, 125.27, 305.821, 308.729, 259.972, 268.517, 575.361, 226.386, 613.002, 94.523, 74.819, 581.488, 517.508, 533.247, 201.738, 43.996, 201.82, 442.156, 403.544, 207.84, 109.754, 491.323, 91.581, 380.175, 184.811, 370.887, 259.533, 191.208, 162.988, 485.357, 687.087, 127.791, 83.409, 544.321, 59.404, 564.872, 476.233, 312.539, 237.956, 543.698, 620.556, 517.673, 382.196, 445.409, 478.536, 378.173, 80.432, 386.597, 9.732, 91.632, 217.485, 644.892, 554.815, 612.976, 501.096, 586.205, 644.949, 102.678, 275.479, 624.058, 404.256, 250.488, 529.405, 599.294, 637.772, 672.461, 209.135, 403.312, 681.965, 380.491, 159.154, 419.056, 289.686, 352.147, 474.58, 58.547, 289.854, 244.524, 128.847, 173.251, 185.442, 606.39, 107.21, 445.015, 255.805, 108.968, 494.214, 399.965, 533.867, 14.504, 649.659, 387.713, 226.146, 543.171, 489.651, 192.362, 268.46, 683.196, 525.37, 283.302, 324.795, 696.408, 432.927, 265.568, 246.452, 264.809, 620.252, 255.75, 394.45, 33.115, 391.264, 500.815, 657.721, 632.315, 263.093, 361.764, 62.391, 677.645, 397.825, 458.535, 419.069, 626.353, 354.065, 436.867, 29.761, 75.764, 337.199, 639.456, 477.028, 100.372, 158.105, 509.405, 374.895, 123.904, 48.841, 53.11, 78.189, 607.801, 552.845, 15.678, 307.098, 476.764, 364.347, 656.266, 79.65, 108.183, 115.455, 277.506, 396.329, 399.457, 64.591, 311.779, 478.56, 9.585, 21.339, 432.088, 134.091, 137.516, 335.053, 48.239, 304.44, 82.151, 218.047, 512.65, 76.545, 501.101, 53.525, 165.339, 627.804, 598.659, 200.989, 324.99, 290.437, 224.251, 340.854, 644.502, 515.362, 285.878, 537.433, 556.724, 97.402, 302.995, 202.125, 262.254, 437.045, 354.286, 51.652, 491.208, 108.86, 447.617, 245.651, 209.802, 389.767, 278.763, 249.467, 305.051, 73.656, 249.431, 271.923, 107.654, 270.681, 544.164, 87.011, 536.9, 678.882, 114.048, 352.617, 618.448, 465.524, 69.472, 191.628, 562.259, 91.481, 61.164, 423.114, 89.508, 531.427, 430.307, 43.133, 308.88, 195.97, 520.081, 373.642, 649.13, 426.715, 281.475, 65.61, 133.215, 528.543, 585.684, 95.79, 509.569, 621.299, 239.6, 133.506, 254.233, 1.075, 558.4, 630.741, 170.124, 114.015, 400.6])
# # plotting setup...
# plt.scatter(x_setup[:-1], y_setup[:-1])
# plt.scatter(x_setup[-1], y_setup[-1], color='red')
# plt.title(header)
# plt.show()
# #
# # calculate distances (a: BS -> scatt; b: scatt -> UE)
# distances_a = []  # staat vast, dus moet niet op voorhand gegenereerd worden
# distances_b = []  # verandert bij beweging van UE
# for i in range(aantal_scatterers):
#     z = i + 2
#     distances_a_i = []
#     for j in range(M):
#         distances_a_i.append(np.sqrt((x_setup[j] - x_setup[-z]) ** 2 + (y_setup[j] - y_setup[-z]) ** 2))
#     distances_a.append(distances_a_i)
# for i in range(aantal_scatterers):
#     distances_b.append(np.sqrt((x_setup[-1] - x_setup[-(i + 2)]) ** 2 + (y_setup[-1] - y_setup[-(i + 2)]) ** 2))
# # calc channel vector for UE @original place
# h = []
# for i in range(M):
#     strength = []
#     for j in range(aantal_scatterers):
#         dist = distances_a[j][i] + distances_b[j]
#         strength.append(np.exp(1j * 2 * np.pi * (dist%1)) / np.exp(np.pi))  # energieschaling is hier 1 op wortel M
#     h.append(sum(strength))
# h = np.array(h)
# wH = h.conj().T
#
# '''raster'''
# y1 = list(range(-100, 105, 10))
# x1 = list(range(-100, 105, 10))
# y2 = list(range(-500, -100, 10))
# x2 = list(range(-500, -100, 10))
# y3 = list(range(110, 510, 10))
# x3 = list(range(110, 510, 10))
# y2.extend(y1)
# y2.extend(y3)
# x2.extend(x1)
# x2.extend(x3)
# y = [item * resolution / 10 + y_setup[-1] for item in y2]
# x = [item * resolution / 10 + x_setup[-1] for item in x2]
# '''centrale plaats antenne: x[int(len(x)/2)], y[int(len(y)/2)]'''
# # plt.scatter(x, y)
# # plt.scatter(x_setup[-1], y_setup[-1], color='red')
# # plt.title(header)
# # plt.show()
#
# ampl = np.zeros(shape=(len(x), len(y)))
# for k in range(len(x)):
#     for l in range(len(y)):
#         for i in range(aantal_scatterers):
#             distances_b[i] = np.sqrt((x[k] - x_setup[-(i + 2)]) ** 2 + (y[l] - y_setup[-(i + 2)]) ** 2)
#         hdx = []
#         for i in range(M):
#             strength = []
#             for j in range(aantal_scatterers):
#                 dist = distances_a[j][i] + distances_b[j]
#                 strength.append(np.exp(1j * 2 * np.pi * (dist - int(dist))))  # energieschaling is hier 1 op wortel M
#             hdx.append(sum(strength) / np.exp(np.pi))
#         # noise v:
#         # ampl[k, l] = channel_calculation.calc_signal(s, M, hdx=hdx, weights_hermitian_wH=wH, calculation='valdB',
#         #                                              noise=noise)
#         # noise x:
#         ampl[k, l] = channel_calculation.calc_signal(s, M, hdx=hdx, weights_hermitian_wH=wH, calculation='valdB')
#     print(k)
# # fig = px.imshow(z=ampl, x=x, y=y, color_continuous_scale=px.colors.diverging.Portland)
# ma = max([max(l) for l in ampl])
# mi = -5
# fig = go.Figure(data=go.Heatmap(
#     z=ampl,
#     x=x,
#     y=y,
#     colorscale='Jet'
#     # zmin=mi,
#     # zmax=ma
# ))
#
# fig.add_trace(go.Scatter(
#     x=x_setup[:-1],
#     y=y_setup[:-1],
#     mode='markers',
#     name='scatterers',
#     marker_color='blue'
# ))
#
# fig.add_trace(go.Scatter(
#     x=[x_setup[-1]], y=[y_setup[-1]],
#     name='antenna',
#     mode='markers',
#     marker_color='red',
#     text=str(ma)
# ))
# fig.update_layout(autosize=False,
#                   width=850,
#                   height=800,
#                   title=header,
#                   font=dict(size = 10))
# plotly.offline.plot(fig,
#                     filename='C:/Users/margo/OneDrive/Documenten/Masterproef/simulation/result plots/geomodel---' + '(' + datetime.datetime.now().strftime("%d-%m-%Y_%H-%M") + ')' + titel + '.html')
# fig.show()




















'''channel_calculation.calc_signal -- toen er nog met golfjes gewerkt werd'''
# def calc_signal(signal_s, nr_antennas_M, hdx=None, distance_dx=None, weights_hermitian_wH=None, calculation=None, channel_h=None, noise=None):
#     if hdx is None:
#         hdx = hd(distance_dx, channel_h)        # channel if you move dx from the first channel
#     if weights_hermitian_wH is None:            # if weigth is not given: calculate
#         wH = channel_h.conj().T
#         kanaal = np.matmul(wH, hdx) / nr_antennas_M     # calculate channel weight
#     else:
#         kanaal = np.matmul(weights_hermitian_wH, hdx) / nr_antennas_M
#     yr = kanaal * signal_s                      # received signal
#     if noise is not None:
#         yr += noise / nr_antennas_M
#     sr = [cmath.polar(i) for i in yr]           # in polar coordinates
#     if calculation == 'valdB':                  # if value is val: calculate ratio Tx amplitude to Rx amplitude
#         amplitudes = [item[0] if int(item[1]) == 0 else -item[0] for item in sr]
#         ratio_out_vs_rt_ampl = amplitudes[int(len(amplitudes)/2)+1]/signal_s[int(len(signal_s)/2)+1]
#         if ratio_out_vs_rt_ampl < 0:
#             ratio_dB = -10
#         else:
#             ratio_dB = 20*np.log10(ratio_out_vs_rt_ampl)
#         return ratio_dB
#     elif calculation == 'p':                    # if value is p: calculate phase
#         phases = [item[1] for item in sr]
#         return phases
#     elif calculation == 'val':                  # if value is val: calculate ratio Tx amplitude to Rx amplitude
#         amplitudes = [item[0] if int(item[1]) == 0 else -item[0] for item in sr]
#         ratio_out_vs_rt_ampl = amplitudes[int(len(amplitudes)/2)+1]/signal_s[int(len(signal_s)/2)+1]
#         return ratio_out_vs_rt_ampl
#     elif calculation == 'a':                      # if value is a: calculate amplitude
#         amplitudes = [item[0] if int(item[1]) == 0 else -item[0] for item in sr]
#         return amplitudes
#     else:                                       # if value is not given: calculate phase
#         amplitudes = [item[0] if int(item[1]) == 0 else -item[0] for item in sr]
#         phases = [item[1] for item in sr]
#         ratio_out_vs_rt_ampl = amplitudes[int(len(amplitudes)/2)+1] / signal_s[int(len(signal_s)/2)+1]
#         return amplitudes, phases, ratio_out_vs_rt_ampl





















'''geomodel 5'''
# '''definitions'''
# M = 2
# message_bits = np.array([1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1])
# signal_wave = QAM_generator.create_QAM_signal(message_bits, 64)
# noise = np.random.normal(0, np.sqrt(0.5), len(signal_wave)) + 1j * np.random.normal(0, np.sqrt(0.5), len(signal_wave))
# S = 1000
# dM = 0.5
# resolution = 0.01
# titel = '--M=' + str(M) + '_scatt=' + str(S) + '_dist-BS-antennas=' + str(
#     dM) + '_resolution=' + str(resolution) + '_noise-v__zonder_min_max'
# header = '(' + datetime.datetime.now().strftime("%d-%m-%Y_%H:%M") + ')' + titel
# print(header)
#
# # place antennas (line @ x=0)
# y_setup = list(range(4000 - int(M / 2), 4000 - int(M / 2) + int(dM * 10 * M), int(dM * 10)))
# y_setup = [i * 0.10 for i in y_setup]
# x_setup = list([0 for i in y_setup])
# # # random scatt setup
# # # place scatterers (random)
# # for i in range(aantal_scatterers):
# #     x_setup.append(random.randint(100000, 700000) / 1000)
# #     y_setup.append(random.randint(0, 700000) / 1000)
# # # place UE
# # x_setup.append(450.3)
# # y_setup.append(400.6)
#
# '''fixed scatt setup'''
# x_setup.extend(
#     [281.062, 626.684, 562.62, 579.471, 208.285, 690.277, 293.243, 513.707, 507.254, 166.815, 661.411, 441.793, 693.324,
#      446.107, 388.934, 342.869, 614.232, 337.542, 574.243, 347.897, 313.528, 342.383, 333.716, 159.18, 695.068, 196.376,
#      333.714, 233.883, 122.415, 256.936, 607.621, 285.498, 177.566, 237.904, 171.847, 355.869, 247.899, 593.18, 345.595,
#      178.747, 310.219, 490.47, 185.268, 500.487, 664.966, 632.054, 437.436, 206.151, 361.217, 493.125, 211.581, 340.351,
#      403.561, 607.775, 578.967, 244.713, 345.605, 174.334, 100.064, 139.366, 244.902, 179.192, 358.482, 687.93, 120.032,
#      168.469, 597.173, 298.547, 250.987, 114.826, 480.657, 437.323, 523.365, 133.052, 413.767, 588.689, 115.112,
#      111.552, 663.742, 207.176, 353.572, 129.085, 130.503, 419.036, 268.183, 251.541, 176.038, 686.883, 505.348,
#      205.401, 684.113, 511.571, 603.329, 660.126, 670.484, 343.904, 201.54, 155.446, 412.437, 356.816, 173.43, 479.834,
#      380.809, 654.446, 530.941, 186.993, 396.005, 200.206, 136.737, 436.056, 310.574, 410.448, 689.879, 588.915,
#      151.681, 531.457, 633.965, 683.005, 699.15, 555.39, 338.356, 222.779, 665.531, 565.273, 555.803, 608.482, 143.587,
#      551.188, 465.149, 317.834, 238.234, 137.681, 314.514, 350.296, 234.525, 213.849, 201.588, 642.759, 685.903,
#      482.484, 251.624, 215.553, 687.025, 110.794, 346.406, 121.966, 523.737, 342.931, 589.571, 547.53, 346.802, 686.924,
#      140.835, 623.355, 488.29, 217.071, 425.435, 422.279, 444.634, 119.699, 692.058, 266.332, 289.173, 107.046, 133.459,
#      236.138, 417.519, 372.806, 414.709, 186.556, 685.557, 658.891, 237.243, 540.975, 440.211, 157.46, 561.903, 562.929,
#      416.696, 583.078, 232.709, 458.503, 443.881, 637.825, 208.692, 353.004, 179.736, 539.653, 136.705, 227.649,
#      202.994, 205.466, 195.673, 395.483, 539.148, 549.044, 670.215, 471.559, 161.259, 353.455, 289.194, 307.45, 212.797,
#      392.365, 496.308, 428.642, 380.254, 265.535, 675.842, 662.877, 488.479, 398.656, 149.757, 482.448, 251.566,
#      459.552, 350.937, 664.112, 650.372, 105.807, 607.333, 344.61, 624.895, 349.945, 254.798, 413.498, 114.224, 494.695,
#      675.292, 194.467, 169.103, 211.421, 425.659, 583.314, 201.038, 516.212, 581.844, 435.095, 294.425, 498.369,
#      497.206, 333.656, 143.223, 567.462, 480.547, 300.954, 185.943, 128.56, 124.841, 644.666, 244.121, 608.983, 353.688,
#      114.26, 659.702, 432.436, 530.093, 278.96, 121.881, 659.126, 138.318, 643.968, 171.75, 223.389, 433.347, 143.019,
#      347.935, 602.682, 669.198, 570.543, 244.745, 687.685, 637.24, 533.86, 383.256, 625.258, 498.024, 530.02, 188.459,
#      276.387, 286.531, 665.589, 318.15, 224.704, 541.49, 178.605, 129.706, 324.68, 645.298, 630.068, 301.298, 200.661,
#      663.624, 667.347, 690.598, 443.746, 445.961, 376.013, 410.198, 524.785, 595.524, 293.756, 621.9, 536.563, 486.674,
#      557.414, 160.888, 254.489, 257.831, 169.947, 195.181, 344.326, 288.926, 652.444, 112.758, 123.881, 309.353,
#      172.703, 490.659, 510.608, 215.304, 485.234, 305.759, 387.898, 240.646, 632.175, 518.984, 309.134, 588.222,
#      641.498, 302.828, 400.785, 569.623, 281.019, 215.165, 563.618, 328.303, 572.357, 393.191, 391.347, 120.288,
#      659.652, 310.932, 660.08, 417.169, 646.8, 167.672, 479.132, 156.422, 648.873, 312.819, 253.861, 335.565, 370.941,
#      556.67, 447.963, 398.676, 476.273, 679.023, 243.157, 203.695, 136.641, 162.938, 615.802, 683.967, 518.321, 145.05,
#      179.276, 231.073, 407.183, 460.007, 217.651, 320.322, 671.991, 524.276, 282.404, 117.414, 598.136, 119.925, 146.7,
#      171.111, 665.998, 295.722, 368.118, 181.661, 365.58, 227.131, 394.847, 513.002, 109.558, 663.735, 467.002, 337.78,
#      684.583, 656.044, 343.117, 282.315, 604.804, 603.78, 173.204, 667.57, 229.141, 215.935, 184.091, 138.719, 204.109,
#      462.324, 529.637, 511.006, 607.25, 628.11, 438.566, 341.125, 366.814, 567.288, 118.933, 420.073, 649.637, 640.129,
#      365.617, 515.928, 389.222, 199.887, 546.965, 560.831, 121.812, 297.675, 144.295, 253.249, 191.165, 509.027,
#      675.872, 619.892, 643.439, 474.109, 517.173, 698.636, 446.126, 455.2, 367.74, 173.498, 492.161, 293.452, 671.508,
#      142.297, 256.642, 315.801, 412.633, 688.751, 237.465, 395.791, 290.866, 328.062, 582.447, 473.694, 142.624,
#      350.203, 644.419, 692.014, 501.85, 189.718, 418.411, 690.001, 136.958, 558.566, 337.945, 485.725, 599.567, 666.031,
#      316.296, 263.905, 616.923, 244.275, 658.37, 638.66, 625.658, 623.387, 188.022, 514.955, 243.77, 379.573, 525.587,
#      564.949, 447.115, 273.791, 221.044, 281.356, 636.792, 575.782, 356.322, 603.811, 309.86, 178.985, 542.196, 699.827,
#      527.971, 426.112, 615.812, 286.994, 496.202, 493.473, 422.564, 378.653, 471.523, 131.545, 536.45, 348.278, 425.655,
#      680.4, 243.666, 611.644, 439.987, 595.48, 158.141, 382.443, 300.894, 332.411, 578.154, 586.847, 518.781, 387.324,
#      533.109, 147.831, 688.982, 426.605, 114.882, 457.042, 568.182, 185.232, 457.796, 189.045, 245.684, 632.01, 192.806,
#      570.613, 284.114, 270.98, 388.564, 482.826, 590.691, 178.409, 287.26, 303.269, 420.38, 154.065, 325.94, 397.835,
#      153.407, 622.059, 557.633, 190.66, 149.813, 231.978, 169.548, 236.559, 318.129, 384.697, 651.295, 639.874, 221.329,
#      300.033, 170.315, 347.317, 350.289, 498.327, 157.395, 349.4, 281.06, 506.376, 284.909, 547.806, 219.649, 632.646,
#      480.714, 142.242, 532.958, 474.065, 569.78, 126.513, 371.52, 225.045, 412.3, 697.379, 659.528, 509.195, 179.565,
#      125.846, 216.863, 326.356, 649.709, 262.332, 113.972, 685.138, 253.226, 605.626, 280.859, 549.164, 301.431,
#      263.891, 470.028, 103.297, 534.92, 392.732, 607.077, 604.512, 572.212, 445.412, 258.539, 407.927, 307.139, 117.195,
#      472.31, 505.528, 539.784, 534.451, 502.87, 168.555, 364.887, 414.581, 456.54, 444.149, 262.996, 349.179, 185.774,
#      631.001, 529.375, 656.968, 481.708, 484.888, 414.008, 124.279, 148.859, 484.622, 416.423, 523.989, 604.077,
#      117.457, 244.607, 592.6, 480.969, 596.72, 195.635, 153.577, 421.723, 338.327, 480.485, 220.466, 263.416, 484.957,
#      295.367, 197.177, 428.112, 500.145, 382.255, 135.403, 481.708, 385.318, 187.72, 421.181, 608.192, 152.749, 253.619,
#      444.221, 524.177, 563.794, 225.251, 272.882, 175.659, 206.626, 521.084, 175.077, 674.958, 303.166, 498.357,
#      408.286, 453.159, 402.46, 688.825, 128.735, 270.68, 422.76, 462.1, 311.055, 586.334, 341.001, 339.29, 457.687,
#      465.993, 397.454, 368.852, 699.564, 513.549, 215.596, 387.693, 137.64, 536.734, 440.258, 688.796, 265.897, 303.118,
#      229.878, 595.797, 312.819, 475.693, 649.837, 260.137, 617.973, 698.588, 379.282, 422.99, 408.621, 239.268, 649.922,
#      395.528, 148.887, 549.452, 653.844, 249.609, 170.341, 470.379, 613.294, 365.464, 528.313, 155.558, 521.893,
#      155.222, 481.16, 145.378, 183.122, 334.854, 176.363, 338.306, 621.053, 409.112, 298.535, 395.519, 279.91, 189.124,
#      571.674, 431.599, 496.087, 392.591, 587.669, 547.536, 110.947, 324.046, 177.738, 508.366, 260.384, 241.872,
#      308.217, 136.94, 307.369, 553.167, 554.914, 192.419, 420.415, 294.107, 217.589, 692.023, 473.032, 105.323, 606.55,
#      639.627, 435.706, 170.91, 459.022, 250.66, 501.261, 366.466, 377.171, 429.418, 564.94, 229.695, 546.64, 561.047,
#      181.901, 626.526, 147.102, 660.029, 349.311, 660.247, 430.769, 360.323, 313.614, 628.757, 311.015, 128.184,
#      415.379, 646.721, 281.951, 360.501, 290.347, 517.757, 664.794, 681.265, 565.656, 698.674, 460.602, 152.034,
#      442.409, 275.837, 135.387, 129.218, 351.624, 383.082, 645.515, 289.407, 669.774, 262.511, 498.04, 172.254, 130.168,
#      450.653, 156.621, 116.443, 161.901, 397.044, 606.848, 639.945, 183.997, 280.839, 223.443, 261.847, 220.468,
#      594.236, 568.99, 434.57, 479.659, 219.229, 404.354, 650.625, 479.509, 209.164, 460.074, 308.001, 202.479, 465.538,
#      318.002, 414.398, 207.439, 517.465, 379.924, 406.289, 147.254, 432.013, 237.42, 504.671, 348.994, 323.333, 279.067,
#      114.095, 604.383, 648.459, 280.838, 404.158, 336.924, 336.62, 108.171, 380.216, 484.792, 467.784, 265.179, 462.757,
#      197.229, 486.306, 202.772, 340.053, 672.187, 235.696, 260.696, 158.054, 658.265, 138.417, 300.293, 642.366,
#      390.303, 400.184, 222.741, 389.636, 301.409, 265.682, 104.948, 687.524, 417.769, 291.218, 552.776, 553.046,
#      578.983, 108.877, 567.856, 373.813, 424.414, 243.171, 337.415, 431.634, 647.743, 678.324, 610.266, 381.86, 380.008,
#      623.539, 171.194, 546.794, 640.408, 634.213, 599.491, 186.692, 575.07, 530.216, 689.079, 550.012, 546.853, 194.003,
#      625.962, 682.644, 273.422, 596.562, 387.375, 477.353, 608.354, 119.266, 241.196, 137.307, 667.757, 513.438,
#      338.069, 299.775, 291.435, 613.412, 116.387, 179.952, 378.876, 271.696, 415.171, 236.227, 367.065, 509.557,
#      494.745, 423.239, 586.293, 246.697, 383.296, 686.45, 185.12, 255.65, 195.638, 166.39, 173.878, 152.838, 507.591,
#      123.391, 499.618, 157.904, 577.092, 304.116, 422.64, 250.424, 696.983, 414.85, 189.478, 364.887, 466.21, 119.485,
#      412.887, 586.218, 447.74, 183.552, 677.289, 223.45, 185.949, 533.777, 447.152, 564.584, 382.712, 426.871, 669.71,
#      378.592, 238.398, 522.739, 666.389, 337.268, 339.416, 447.222, 558.713, 571.564, 591.821, 554.211, 696.286,
#      128.969, 201.883, 409.106, 588.027, 470.924, 649.973, 522.456, 544.707, 561.075, 342.033, 336.406, 478.3, 184.75,
#      362.147])
# y_setup.extend(
#     [309.622, 41.497, 590.12, 607.585, 643.853, 568.515, 676.947, 337.533, 102.452, 319.196, 303.585, 36.036, 47.49,
#      306.554, 204.316, 150.153, 581.626, 177.356, 568.853, 11.763, 317.32, 522.371, 67.575, 279.964, 609.915, 379.256,
#      351.055, 78.342, 180.828, 234.483, 448.13, 493.362, 114.964, 627.848, 635.749, 673.636, 536.482, 627.144, 42.207,
#      298.907, 291.604, 43.256, 396.399, 613.853, 151.208, 520.581, 213.78, 587.97, 266.998, 6.949, 590.313, 75.494,
#      86.722, 97.891, 316.631, 335.961, 504.29, 568.34, 693.597, 43.606, 221.278, 75.126, 379.873, 388.62, 145.586,
#      594.967, 80.002, 401.744, 570.712, 33.507, 122.654, 457.233, 159.517, 435.405, 125.934, 166.519, 234.638, 453.441,
#      406.716, 292.116, 397.569, 217.853, 649.593, 4.858, 59.299, 373.233, 77.303, 313.532, 34.719, 603.315, 615.736,
#      352.164, 537.421, 28.048, 48.474, 607.895, 460.07, 321.066, 282.569, 494.39, 387.455, 258.518, 650.21, 84.92,
#      644.419, 693.725, 605.331, 337.444, 462.573, 165.631, 75.366, 454.714, 424.846, 447.722, 341.35, 625.452, 314.213,
#      33.051, 83.436, 523.636, 577.449, 660.846, 528.211, 174.652, 607.058, 124.651, 566.541, 229.936, 319.101, 306.412,
#      85.977, 587.564, 472.056, 370.043, 498.597, 64.316, 512.221, 385.441, 577.954, 215.903, 151.251, 51.253, 693.117,
#      81.005, 493.296, 611.41, 647.455, 554.668, 49.429, 406.145, 463.595, 33.528, 488.242, 674.321, 691.605, 140.373,
#      622.705, 283.802, 114.251, 434.348, 561.142, 684.95, 21.633, 564.581, 577.978, 404.883, 520.247, 136.367, 286.98,
#      412.5, 599.255, 337.11, 80.423, 294.758, 162.285, 637.777, 226.56, 191.172, 633.514, 350.562, 644.909, 366.707,
#      194.606, 37.128, 160.141, 347.429, 384.034, 200.658, 393.975, 427.263, 37.069, 691.046, 204.835, 134.603, 300.57,
#      23.004, 232.164, 447.989, 129.248, 493.83, 542.987, 78.971, 236.547, 219.346, 93.639, 231.467, 344.523, 589.362,
#      474.731, 494.777, 128.499, 239.386, 197.311, 453.567, 261.226, 604.405, 232.581, 493.139, 376.533, 351.92, 22.014,
#      242.484, 230.806, 105.438, 38.174, 457.302, 597.025, 476.049, 630.267, 445.201, 411.442, 522.127, 530.89, 410.671,
#      272.98, 644.199, 209.356, 15.205, 580.102, 80.413, 195.759, 188.185, 484.282, 241.804, 602.525, 204.729, 686.136,
#      79.258, 84.344, 497.932, 119.721, 67.345, 93.966, 105.97, 101.092, 412.535, 404.917, 656.757, 693.967, 163.579,
#      248.672, 619.807, 599.396, 197.893, 636.164, 56.374, 110.773, 86.746, 487.088, 442.434, 371.841, 303.043, 110.06,
#      282.735, 279.833, 559.13, 211.631, 26.278, 599.585, 361.187, 70.813, 513.594, 478.795, 240.045, 541.298, 84.043,
#      61.655, 640.262, 507.252, 48.218, 330.504, 585.613, 464.698, 662.56, 492.231, 519.683, 27.71, 175.15, 501.42,
#      353.157, 502.475, 254.178, 271.402, 265.131, 583.194, 517.668, 387.285, 660.632, 56.62, 125.687, 291.131, 674.06,
#      388.194, 81.442, 354.472, 432.506, 610.206, 168.861, 514.866, 344.262, 478.756, 71.052, 94.28, 540.426, 454.888,
#      202.671, 72.594, 155.99, 678.141, 63.028, 641.128, 698.145, 695.359, 282.584, 380.425, 166.224, 347.868, 654.145,
#      350.821, 662.717, 222.424, 14.992, 566.571, 437.687, 679.999, 57.275, 178.3, 168.169, 189.656, 641.014, 211.026,
#      301.612, 668.951, 614.781, 189.058, 43.39, 149.453, 496.865, 357.898, 300.394, 236.938, 174.04, 324.475, 679.098,
#      208.221, 167.84, 131.431, 242.786, 87.654, 334.525, 62.668, 123.376, 54.155, 533.718, 297.887, 247.788, 544.826,
#      223.462, 243.655, 38.212, 289.473, 81.604, 372.599, 496.048, 509.072, 448.468, 306.098, 471.42, 270.621, 300.98,
#      457.94, 635.363, 433.869, 405.093, 575.065, 7.565, 491.698, 110.209, 92.381, 29.158, 668.469, 31.275, 350.355,
#      459.198, 534.461, 417.166, 635.934, 462.82, 470.902, 631.685, 297.714, 439.96, 198.072, 287.621, 247.145, 317.915,
#      45.807, 6.941, 570.827, 617.0, 97.696, 566.353, 239.932, 342.639, 23.752, 85.596, 478.251, 182.493, 105.575,
#      329.537, 306.065, 567.311, 344.368, 435.264, 678.912, 415.861, 341.515, 609.749, 551.929, 521.07, 396.917, 209.884,
#      112.865, 295.861, 578.955, 96.445, 698.503, 448.976, 12.027, 569.104, 560.832, 396.559, 260.597, 680.248, 324.195,
#      576.07, 357.773, 338.462, 383.887, 307.084, 400.612, 113.252, 39.06, 178.65, 323.574, 11.312, 354.312, 98.134,
#      250.935, 37.389, 423.789, 216.029, 47.996, 366.295, 529.149, 104.774, 414.605, 4.272, 289.076, 92.59, 555.825,
#      171.885, 32.857, 585.654, 24.407, 646.933, 153.931, 637.848, 36.496, 529.137, 237.09, 673.122, 647.976, 100.021,
#      338.527, 221.345, 145.159, 304.875, 340.484, 538.353, 337.721, 526.58, 280.334, 283.386, 40.645, 49.784, 164.194,
#      565.714, 290.946, 619.681, 45.835, 192.779, 38.954, 121.185, 537.378, 674.473, 423.542, 298.244, 267.277, 458.909,
#      370.037, 39.377, 411.748, 585.923, 182.344, 39.074, 649.597, 362.767, 10.046, 196.579, 411.047, 144.845, 158.578,
#      646.17, 388.689, 113.203, 407.26, 333.547, 282.736, 64.983, 665.837, 169.483, 499.219, 391.283, 259.973, 186.096,
#      309.208, 330.081, 396.974, 82.97, 62.766, 175.165, 694.227, 328.964, 512.443, 649.051, 16.565, 432.019, 457.647,
#      610.419, 598.695, 664.526, 123.214, 344.362, 607.726, 504.793, 216.551, 358.169, 421.361, 144.199, 528.732,
#      490.922, 293.244, 632.62, 284.285, 222.411, 547.978, 589.583, 670.225, 674.441, 95.152, 403.159, 567.721, 573.905,
#      78.16, 239.605, 647.124, 466.818, 690.191, 42.073, 580.151, 141.267, 484.74, 337.831, 354.935, 660.176, 402.942,
#      0.823, 307.218, 673.443, 647.875, 69.407, 448.994, 38.418, 340.572, 159.05, 427.564, 183.438, 450.794, 363.89,
#      409.875, 529.659, 155.648, 344.385, 619.392, 165.511, 458.146, 646.35, 124.048, 365.984, 642.58, 80.513, 84.307,
#      298.916, 445.391, 574.708, 309.369, 264.77, 254.152, 682.015, 295.187, 686.607, 524.786, 505.424, 186.012, 498.718,
#      439.828, 602.156, 347.077, 193.546, 619.794, 521.621, 424.961, 453.926, 653.087, 669.602, 32.143, 479.123, 502.938,
#      332.998, 179.664, 554.335, 249.966, 510.899, 68.444, 534.879, 6.645, 203.481, 589.658, 325.197, 533.249, 366.188,
#      506.252, 675.632, 477.442, 458.908, 19.96, 498.681, 560.489, 42.001, 688.565, 629.939, 222.731, 274.854, 632.72,
#      519.49, 43.005, 689.368, 194.466, 362.994, 78.006, 203.299, 657.146, 181.224, 548.652, 28.255, 272.666, 487.909,
#      488.62, 239.265, 336.935, 695.498, 142.118, 31.022, 55.625, 690.277, 131.839, 249.052, 435.42, 153.525, 656.58,
#      373.454, 291.346, 261.675, 480.192, 15.008, 209.864, 420.3, 514.783, 651.124, 308.105, 547.887, 516.159, 207.111,
#      436.629, 604.441, 57.636, 625.214, 405.799, 463.403, 131.648, 305.976, 278.94, 592.752, 687.204, 52.932, 291.926,
#      461.642, 218.701, 5.834, 27.296, 245.443, 358.228, 285.634, 305.65, 603.391, 551.838, 698.939, 485.476, 529.542,
#      35.537, 454.491, 396.062, 1.344, 544.507, 390.86, 384.439, 538.664, 195.937, 156.389, 355.236, 473.471, 241.9,
#      165.601, 378.713, 291.006, 116.014, 588.006, 528.262, 541.483, 125.27, 305.821, 308.729, 259.972, 268.517, 575.361,
#      226.386, 613.002, 94.523, 74.819, 581.488, 517.508, 533.247, 201.738, 43.996, 201.82, 442.156, 403.544, 207.84,
#      109.754, 491.323, 91.581, 380.175, 184.811, 370.887, 259.533, 191.208, 162.988, 485.357, 687.087, 127.791, 83.409,
#      544.321, 59.404, 564.872, 476.233, 312.539, 237.956, 543.698, 620.556, 517.673, 382.196, 445.409, 478.536, 378.173,
#      80.432, 386.597, 9.732, 91.632, 217.485, 644.892, 554.815, 612.976, 501.096, 586.205, 644.949, 102.678, 275.479,
#      624.058, 404.256, 250.488, 529.405, 599.294, 637.772, 672.461, 209.135, 403.312, 681.965, 380.491, 159.154,
#      419.056, 289.686, 352.147, 474.58, 58.547, 289.854, 244.524, 128.847, 173.251, 185.442, 606.39, 107.21, 445.015,
#      255.805, 108.968, 494.214, 399.965, 533.867, 14.504, 649.659, 387.713, 226.146, 543.171, 489.651, 192.362, 268.46,
#      683.196, 525.37, 283.302, 324.795, 696.408, 432.927, 265.568, 246.452, 264.809, 620.252, 255.75, 394.45, 33.115,
#      391.264, 500.815, 657.721, 632.315, 263.093, 361.764, 62.391, 677.645, 397.825, 458.535, 419.069, 626.353, 354.065,
#      436.867, 29.761, 75.764, 337.199, 639.456, 477.028, 100.372, 158.105, 509.405, 374.895, 123.904, 48.841, 53.11,
#      78.189, 607.801, 552.845, 15.678, 307.098, 476.764, 364.347, 656.266, 79.65, 108.183, 115.455, 277.506, 396.329,
#      399.457, 64.591, 311.779, 478.56, 9.585, 21.339, 432.088, 134.091, 137.516, 335.053, 48.239, 304.44, 82.151,
#      218.047, 512.65, 76.545, 501.101, 53.525, 165.339, 627.804, 598.659, 200.989, 324.99, 290.437, 224.251, 340.854,
#      644.502, 515.362, 285.878, 537.433, 556.724, 97.402, 302.995, 202.125, 262.254, 437.045, 354.286, 51.652, 491.208,
#      108.86, 447.617, 245.651, 209.802, 389.767, 278.763, 249.467, 305.051, 73.656, 249.431, 271.923, 107.654, 270.681,
#      544.164, 87.011, 536.9, 678.882, 114.048, 352.617, 618.448, 465.524, 69.472, 191.628, 562.259, 91.481, 61.164,
#      423.114, 89.508, 531.427, 430.307, 43.133, 308.88, 195.97, 520.081, 373.642, 649.13, 426.715, 281.475, 65.61,
#      133.215, 528.543, 585.684, 95.79, 509.569, 621.299, 239.6, 133.506, 254.233, 1.075, 558.4, 630.741, 170.124,
#      114.015, 400.6, 148.16, 568.29])
#
# '''plotting setup...'''
# plt.scatter(x_setup[:-1], y_setup[:-1])
# plt.scatter(x_setup[-1], y_setup[-1], color='red')
# plt.title(header)
# plt.show()
#
# # calculate distances (a: BS -> scatt; b: scatt -> UE)
# distances_a = []  # staat vast, dus moet niet op voorhand gegenereerd worden
# distances_b = []  # verandert bij beweging van UE
# for i in range(S):
#     z = i + 2
#     distances_a_i = []
#     for j in range(M):
#         distances_a_i.append(np.sqrt((x_setup[j] - x_setup[-z]) ** 2 + (y_setup[j] - y_setup[-z]) ** 2))
#     distances_a.append(distances_a_i)
# for i in range(S):
#     distances_b.append(np.sqrt((x_setup[-1] - x_setup[-(i + 2)]) ** 2 + (y_setup[-1] - y_setup[-(i + 2)]) ** 2))
# # calc channel vector for UE @original place
# h = []
# for i in range(M):
#     strength = []
#     for j in range(S):
#         dist = distances_a[j][i] + distances_b[j]
#         strength.append(np.exp(1j * 2 * np.pi * (dist - int(dist))) / np.exp(np.pi))  # energieschaling is hier 1 op wortel M
#     h.append(sum(strength))
# h = np.array(h)
# wH = h.conj().T
#
# '''raster'''
# y1 = list(range(-100, 105, 10))
# x1 = list(range(-100, 105, 10))
# y2 = list(range(-500, -100, 10))
# x2 = list(range(-500, -100, 10))
# y3 = list(range(110, 510, 10))
# x3 = list(range(110, 510, 10))
# y2.extend(y1)
# y2.extend(y3)
# x2.extend(x1)
# x2.extend(x3)
# y = [item * resolution / 10 + y_setup[-1] for item in y2]
# x = [item * resolution / 10 + x_setup[-1] for item in x2]
# '''centrale plaats antenne: x[int(len(x)/2)], y[int(len(y)/2)]'''
# # plt.scatter(x, y)
# # plt.scatter(x_setup[-1], y_setup[-1], color='red')
# # plt.title(header)
# # plt.show()
#
# ampl = np.zeros(shape=(len(x), len(y)))
# for k in range(len(x)):
#     for l in range(len(y)):
#         for i in range(S):
#             distances_b[i] = np.sqrt((x[k] - x_setup[-(i + 2)]) ** 2 + (y[l] - y_setup[-(i + 2)]) ** 2)
#         hdx = []
#         for i in range(M):
#             strength = []
#             for j in range(S):
#                 dist = distances_a[j][i] + distances_b[j]
#                 strength.append(np.exp(1j * 2 * np.pi * (dist - int(dist))))  # energieschaling is hier 1 op wortel M
#             hdx.append(sum(strength) / np.exp(np.pi))
#         # noise v:
#         ampl[k, l] = channel_calculation.calc_signal(signal_wave, M, hdx=hdx, weights_hermitian_wH=wH, calculation='valdB',
#                                                      noise=noise)
#         # noise x:
#         # ampl[k, l] = channel_calculation.calc_signal(s, M, hdx=hdx, weights_hermitian_wH=wH, calculation='valdB')
#     print(k)
# # fig = px.imshow(z=ampl, x=x, y=y, color_continuous_scale=px.colors.diverging.Portland)
# ma = max([max(l) for l in ampl])
# mi = -5
# fig = go.Figure(data=go.Heatmap(
#     z=ampl,
#     x=x,
#     y=y,
#     colorscale='Jet'
#     # zmin=mi,
#     # zmax=ma
# ))
#
# fig.add_trace(go.Scatter(
#     x=x_setup[:-1],
#     y=y_setup[:-1],
#     mode='markers',
#     name='scatterers',
#     marker_color='blue'
# ))
#
# fig.add_trace(go.Scatter(
#     x=[x_setup[-1]], y=[y_setup[-1]],
#     name='antenna',
#     mode='markers',
#     marker_color='red',
#     text=str(ma)
# ))
# fig.update_layout(autosize=False,
#                   width=850,
#                   height=800,
#                   title=header,
#                   font=dict(size = 10))
# plotly.offline.plot(fig,
#                     filename='C:/Users/margo/OneDrive/Documenten/Masterproef/simulation/result plots/geomodel---' + '(' + datetime.datetime.now().strftime("%d-%m-%Y_%H-%M") + ')' + titel + '.html')
# fig.show()



















'''FFT patern?'''
# dfghjk = np.fft.fft(abs(wH))
# dfghjk = np.append(dfghjk,dfghjk[0])
# lkjhgf = np.linspace(0,2*np.pi, M)
# lkjhgf = np.append(lkjhgf,lkjhgf[0])
# plt.polar(lkjhgf, dfghjk)
# plt.show()




















'''geomodel 4'''
# M = 2
# a = np.array([1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1])
# s = QAM_generator.create_QAM_signal(a, 64)
# noise = np.random.normal(0, np.sqrt(0.5), len(s)) + 1j * np.random.normal(0, np.sqrt(0.5), len(s))
# aantal_scatterers = 1000
# dist_between_BS_ant = 0.5
# resolution = 0.01
# titel = '--M=' + str(M) + '_scatt=' + str(aantal_scatterers) + '_dist-BS-antennas=' + str(
#     dist_between_BS_ant) + '_resolution=' + str(resolution) + '_noise-x__zonder_min_max'
# header = '(' + datetime.datetime.now().strftime("%d-%m-%Y_%H:%M") + ')' + titel
# print(header)
# # place antennas (line @ x=0)
# y_setup = list(range(4000 - int(M / 2), 4000 - int(M / 2) + int(dist_between_BS_ant * 10 * M), int(dist_between_BS_ant * 10)))
# y_setup = [i * 0.10 for i in y_setup]
# x_setup = list([0 for i in y_setup])
# # # random scatt setup
# # # place scatterers (random)
# # for i in range(aantal_scatterers):
# #     x_setup.append(random.randint(100000, 700000) / 1000)
# #     y_setup.append(random.randint(0, 700000) / 1000)
# # # place UE
# # x_setup.append(450.3)
# # y_setup.append(400.6)
# # fixed scatt setup
# x_setup.extend([281.062, 626.684, 562.62, 579.471, 208.285, 690.277, 293.243, 513.707, 507.254, 166.815, 661.411, 441.793, 693.324, 446.107, 388.934, 342.869, 614.232, 337.542, 574.243, 347.897, 313.528, 342.383, 333.716, 159.18, 695.068, 196.376, 333.714, 233.883, 122.415, 256.936, 607.621, 285.498, 177.566, 237.904, 171.847, 355.869, 247.899, 593.18, 345.595, 178.747, 310.219, 490.47, 185.268, 500.487, 664.966, 632.054, 437.436, 206.151, 361.217, 493.125, 211.581, 340.351, 403.561, 607.775, 578.967, 244.713, 345.605, 174.334, 100.064, 139.366, 244.902, 179.192, 358.482, 687.93, 120.032, 168.469, 597.173, 298.547, 250.987, 114.826, 480.657, 437.323, 523.365, 133.052, 413.767, 588.689, 115.112, 111.552, 663.742, 207.176, 353.572, 129.085, 130.503, 419.036, 268.183, 251.541, 176.038, 686.883, 505.348, 205.401, 684.113, 511.571, 603.329, 660.126, 670.484, 343.904, 201.54, 155.446, 412.437, 356.816, 173.43, 479.834, 380.809, 654.446, 530.941, 186.993, 396.005, 200.206, 136.737, 436.056, 310.574, 410.448, 689.879, 588.915, 151.681, 531.457, 633.965, 683.005, 699.15, 555.39, 338.356, 222.779, 665.531, 565.273, 555.803, 608.482, 143.587, 551.188, 465.149, 317.834, 238.234, 137.681, 314.514, 350.296, 234.525, 213.849, 201.588, 642.759, 685.903, 482.484, 251.624, 215.553, 687.025, 110.794, 346.406, 121.966, 523.737, 342.931, 589.571, 547.53, 346.802, 686.924, 140.835, 623.355, 488.29, 217.071, 425.435, 422.279, 444.634, 119.699, 692.058, 266.332, 289.173, 107.046, 133.459, 236.138, 417.519, 372.806, 414.709, 186.556, 685.557, 658.891, 237.243, 540.975, 440.211, 157.46, 561.903, 562.929, 416.696, 583.078, 232.709, 458.503, 443.881, 637.825, 208.692, 353.004, 179.736, 539.653, 136.705, 227.649, 202.994, 205.466, 195.673, 395.483, 539.148, 549.044, 670.215, 471.559, 161.259, 353.455, 289.194, 307.45, 212.797, 392.365, 496.308, 428.642, 380.254, 265.535, 675.842, 662.877, 488.479, 398.656, 149.757, 482.448, 251.566, 459.552, 350.937, 664.112, 650.372, 105.807, 607.333, 344.61, 624.895, 349.945, 254.798, 413.498, 114.224, 494.695, 675.292, 194.467, 169.103, 211.421, 425.659, 583.314, 201.038, 516.212, 581.844, 435.095, 294.425, 498.369, 497.206, 333.656, 143.223, 567.462, 480.547, 300.954, 185.943, 128.56, 124.841, 644.666, 244.121, 608.983, 353.688, 114.26, 659.702, 432.436, 530.093, 278.96, 121.881, 659.126, 138.318, 643.968, 171.75, 223.389, 433.347, 143.019, 347.935, 602.682, 669.198, 570.543, 244.745, 687.685, 637.24, 533.86, 383.256, 625.258, 498.024, 530.02, 188.459, 276.387, 286.531, 665.589, 318.15, 224.704, 541.49, 178.605, 129.706, 324.68, 645.298, 630.068, 301.298, 200.661, 663.624, 667.347, 690.598, 443.746, 445.961, 376.013, 410.198, 524.785, 595.524, 293.756, 621.9, 536.563, 486.674, 557.414, 160.888, 254.489, 257.831, 169.947, 195.181, 344.326, 288.926, 652.444, 112.758, 123.881, 309.353, 172.703, 490.659, 510.608, 215.304, 485.234, 305.759, 387.898, 240.646, 632.175, 518.984, 309.134, 588.222, 641.498, 302.828, 400.785, 569.623, 281.019, 215.165, 563.618, 328.303, 572.357, 393.191, 391.347, 120.288, 659.652, 310.932, 660.08, 417.169, 646.8, 167.672, 479.132, 156.422, 648.873, 312.819, 253.861, 335.565, 370.941, 556.67, 447.963, 398.676, 476.273, 679.023, 243.157, 203.695, 136.641, 162.938, 615.802, 683.967, 518.321, 145.05, 179.276, 231.073, 407.183, 460.007, 217.651, 320.322, 671.991, 524.276, 282.404, 117.414, 598.136, 119.925, 146.7, 171.111, 665.998, 295.722, 368.118, 181.661, 365.58, 227.131, 394.847, 513.002, 109.558, 663.735, 467.002, 337.78, 684.583, 656.044, 343.117, 282.315, 604.804, 603.78, 173.204, 667.57, 229.141, 215.935, 184.091, 138.719, 204.109, 462.324, 529.637, 511.006, 607.25, 628.11, 438.566, 341.125, 366.814, 567.288, 118.933, 420.073, 649.637, 640.129, 365.617, 515.928, 389.222, 199.887, 546.965, 560.831, 121.812, 297.675, 144.295, 253.249, 191.165, 509.027, 675.872, 619.892, 643.439, 474.109, 517.173, 698.636, 446.126, 455.2, 367.74, 173.498, 492.161, 293.452, 671.508, 142.297, 256.642, 315.801, 412.633, 688.751, 237.465, 395.791, 290.866, 328.062, 582.447, 473.694, 142.624, 350.203, 644.419, 692.014, 501.85, 189.718, 418.411, 690.001, 136.958, 558.566, 337.945, 485.725, 599.567, 666.031, 316.296, 263.905, 616.923, 244.275, 658.37, 638.66, 625.658, 623.387, 188.022, 514.955, 243.77, 379.573, 525.587, 564.949, 447.115, 273.791, 221.044, 281.356, 636.792, 575.782, 356.322, 603.811, 309.86, 178.985, 542.196, 699.827, 527.971, 426.112, 615.812, 286.994, 496.202, 493.473, 422.564, 378.653, 471.523, 131.545, 536.45, 348.278, 425.655, 680.4, 243.666, 611.644, 439.987, 595.48, 158.141, 382.443, 300.894, 332.411, 578.154, 586.847, 518.781, 387.324, 533.109, 147.831, 688.982, 426.605, 114.882, 457.042, 568.182, 185.232, 457.796, 189.045, 245.684, 632.01, 192.806, 570.613, 284.114, 270.98, 388.564, 482.826, 590.691, 178.409, 287.26, 303.269, 420.38, 154.065, 325.94, 397.835, 153.407, 622.059, 557.633, 190.66, 149.813, 231.978, 169.548, 236.559, 318.129, 384.697, 651.295, 639.874, 221.329, 300.033, 170.315, 347.317, 350.289, 498.327, 157.395, 349.4, 281.06, 506.376, 284.909, 547.806, 219.649, 632.646, 480.714, 142.242, 532.958, 474.065, 569.78, 126.513, 371.52, 225.045, 412.3, 697.379, 659.528, 509.195, 179.565, 125.846, 216.863, 326.356, 649.709, 262.332, 113.972, 685.138, 253.226, 605.626, 280.859, 549.164, 301.431, 263.891, 470.028, 103.297, 534.92, 392.732, 607.077, 604.512, 572.212, 445.412, 258.539, 407.927, 307.139, 117.195, 472.31, 505.528, 539.784, 534.451, 502.87, 168.555, 364.887, 414.581, 456.54, 444.149, 262.996, 349.179, 185.774, 631.001, 529.375, 656.968, 481.708, 484.888, 414.008, 124.279, 148.859, 484.622, 416.423, 523.989, 604.077, 117.457, 244.607, 592.6, 480.969, 596.72, 195.635, 153.577, 421.723, 338.327, 480.485, 220.466, 263.416, 484.957, 295.367, 197.177, 428.112, 500.145, 382.255, 135.403, 481.708, 385.318, 187.72, 421.181, 608.192, 152.749, 253.619, 444.221, 524.177, 563.794, 225.251, 272.882, 175.659, 206.626, 521.084, 175.077, 674.958, 303.166, 498.357, 408.286, 453.159, 402.46, 688.825, 128.735, 270.68, 422.76, 462.1, 311.055, 586.334, 341.001, 339.29, 457.687, 465.993, 397.454, 368.852, 699.564, 513.549, 215.596, 387.693, 137.64, 536.734, 440.258, 688.796, 265.897, 303.118, 229.878, 595.797, 312.819, 475.693, 649.837, 260.137, 617.973, 698.588, 379.282, 422.99, 408.621, 239.268, 649.922, 395.528, 148.887, 549.452, 653.844, 249.609, 170.341, 470.379, 613.294, 365.464, 528.313, 155.558, 521.893, 155.222, 481.16, 145.378, 183.122, 334.854, 176.363, 338.306, 621.053, 409.112, 298.535, 395.519, 279.91, 189.124, 571.674, 431.599, 496.087, 392.591, 587.669, 547.536, 110.947, 324.046, 177.738, 508.366, 260.384, 241.872, 308.217, 136.94, 307.369, 553.167, 554.914, 192.419, 420.415, 294.107, 217.589, 692.023, 473.032, 105.323, 606.55, 639.627, 435.706, 170.91, 459.022, 250.66, 501.261, 366.466, 377.171, 429.418, 564.94, 229.695, 546.64, 561.047, 181.901, 626.526, 147.102, 660.029, 349.311, 660.247, 430.769, 360.323, 313.614, 628.757, 311.015, 128.184, 415.379, 646.721, 281.951, 360.501, 290.347, 517.757, 664.794, 681.265, 565.656, 698.674, 460.602, 152.034, 442.409, 275.837, 135.387, 129.218, 351.624, 383.082, 645.515, 289.407, 669.774, 262.511, 498.04, 172.254, 130.168, 450.653, 156.621, 116.443, 161.901, 397.044, 606.848, 639.945, 183.997, 280.839, 223.443, 261.847, 220.468, 594.236, 568.99, 434.57, 479.659, 219.229, 404.354, 650.625, 479.509, 209.164, 460.074, 308.001, 202.479, 465.538, 318.002, 414.398, 207.439, 517.465, 379.924, 406.289, 147.254, 432.013, 237.42, 504.671, 348.994, 323.333, 279.067, 114.095, 604.383, 648.459, 280.838, 404.158, 336.924, 336.62, 108.171, 380.216, 484.792, 467.784, 265.179, 462.757, 197.229, 486.306, 202.772, 340.053, 672.187, 235.696, 260.696, 158.054, 658.265, 138.417, 300.293, 642.366, 390.303, 400.184, 222.741, 389.636, 301.409, 265.682, 104.948, 687.524, 417.769, 291.218, 552.776, 553.046, 578.983, 108.877, 567.856, 373.813, 424.414, 243.171, 337.415, 431.634, 647.743, 678.324, 610.266, 381.86, 380.008, 623.539, 171.194, 546.794, 640.408, 634.213, 599.491, 186.692, 575.07, 530.216, 689.079, 550.012, 546.853, 194.003, 625.962, 682.644, 273.422, 596.562, 387.375, 477.353, 608.354, 119.266, 241.196, 137.307, 667.757, 513.438, 338.069, 299.775, 291.435, 613.412, 116.387, 179.952, 378.876, 271.696, 415.171, 236.227, 367.065, 509.557, 494.745, 423.239, 586.293, 246.697, 383.296, 686.45, 185.12, 255.65, 195.638, 166.39, 173.878, 152.838, 507.591, 123.391, 499.618, 157.904, 577.092, 304.116, 422.64, 250.424, 696.983, 414.85, 189.478, 364.887, 466.21, 119.485, 412.887, 586.218, 447.74, 183.552, 677.289, 223.45, 185.949, 533.777, 447.152, 564.584, 382.712, 426.871, 669.71, 378.592, 238.398, 522.739, 666.389, 337.268, 339.416, 447.222, 558.713, 571.564, 591.821, 554.211, 696.286, 128.969, 201.883, 409.106, 588.027, 470.924, 649.973, 522.456, 544.707, 561.075, 342.033, 336.406, 450.3])
# y_setup.extend([309.622, 41.497, 590.12, 607.585, 643.853, 568.515, 676.947, 337.533, 102.452, 319.196, 303.585, 36.036, 47.49, 306.554, 204.316, 150.153, 581.626, 177.356, 568.853, 11.763, 317.32, 522.371, 67.575, 279.964, 609.915, 379.256, 351.055, 78.342, 180.828, 234.483, 448.13, 493.362, 114.964, 627.848, 635.749, 673.636, 536.482, 627.144, 42.207, 298.907, 291.604, 43.256, 396.399, 613.853, 151.208, 520.581, 213.78, 587.97, 266.998, 6.949, 590.313, 75.494, 86.722, 97.891, 316.631, 335.961, 504.29, 568.34, 693.597, 43.606, 221.278, 75.126, 379.873, 388.62, 145.586, 594.967, 80.002, 401.744, 570.712, 33.507, 122.654, 457.233, 159.517, 435.405, 125.934, 166.519, 234.638, 453.441, 406.716, 292.116, 397.569, 217.853, 649.593, 4.858, 59.299, 373.233, 77.303, 313.532, 34.719, 603.315, 615.736, 352.164, 537.421, 28.048, 48.474, 607.895, 460.07, 321.066, 282.569, 494.39, 387.455, 258.518, 650.21, 84.92, 644.419, 693.725, 605.331, 337.444, 462.573, 165.631, 75.366, 454.714, 424.846, 447.722, 341.35, 625.452, 314.213, 33.051, 83.436, 523.636, 577.449, 660.846, 528.211, 174.652, 607.058, 124.651, 566.541, 229.936, 319.101, 306.412, 85.977, 587.564, 472.056, 370.043, 498.597, 64.316, 512.221, 385.441, 577.954, 215.903, 151.251, 51.253, 693.117, 81.005, 493.296, 611.41, 647.455, 554.668, 49.429, 406.145, 463.595, 33.528, 488.242, 674.321, 691.605, 140.373, 622.705, 283.802, 114.251, 434.348, 561.142, 684.95, 21.633, 564.581, 577.978, 404.883, 520.247, 136.367, 286.98, 412.5, 599.255, 337.11, 80.423, 294.758, 162.285, 637.777, 226.56, 191.172, 633.514, 350.562, 644.909, 366.707, 194.606, 37.128, 160.141, 347.429, 384.034, 200.658, 393.975, 427.263, 37.069, 691.046, 204.835, 134.603, 300.57, 23.004, 232.164, 447.989, 129.248, 493.83, 542.987, 78.971, 236.547, 219.346, 93.639, 231.467, 344.523, 589.362, 474.731, 494.777, 128.499, 239.386, 197.311, 453.567, 261.226, 604.405, 232.581, 493.139, 376.533, 351.92, 22.014, 242.484, 230.806, 105.438, 38.174, 457.302, 597.025, 476.049, 630.267, 445.201, 411.442, 522.127, 530.89, 410.671, 272.98, 644.199, 209.356, 15.205, 580.102, 80.413, 195.759, 188.185, 484.282, 241.804, 602.525, 204.729, 686.136, 79.258, 84.344, 497.932, 119.721, 67.345, 93.966, 105.97, 101.092, 412.535, 404.917, 656.757, 693.967, 163.579, 248.672, 619.807, 599.396, 197.893, 636.164, 56.374, 110.773, 86.746, 487.088, 442.434, 371.841, 303.043, 110.06, 282.735, 279.833, 559.13, 211.631, 26.278, 599.585, 361.187, 70.813, 513.594, 478.795, 240.045, 541.298, 84.043, 61.655, 640.262, 507.252, 48.218, 330.504, 585.613, 464.698, 662.56, 492.231, 519.683, 27.71, 175.15, 501.42, 353.157, 502.475, 254.178, 271.402, 265.131, 583.194, 517.668, 387.285, 660.632, 56.62, 125.687, 291.131, 674.06, 388.194, 81.442, 354.472, 432.506, 610.206, 168.861, 514.866, 344.262, 478.756, 71.052, 94.28, 540.426, 454.888, 202.671, 72.594, 155.99, 678.141, 63.028, 641.128, 698.145, 695.359, 282.584, 380.425, 166.224, 347.868, 654.145, 350.821, 662.717, 222.424, 14.992, 566.571, 437.687, 679.999, 57.275, 178.3, 168.169, 189.656, 641.014, 211.026, 301.612, 668.951, 614.781, 189.058, 43.39, 149.453, 496.865, 357.898, 300.394, 236.938, 174.04, 324.475, 679.098, 208.221, 167.84, 131.431, 242.786, 87.654, 334.525, 62.668, 123.376, 54.155, 533.718, 297.887, 247.788, 544.826, 223.462, 243.655, 38.212, 289.473, 81.604, 372.599, 496.048, 509.072, 448.468, 306.098, 471.42, 270.621, 300.98, 457.94, 635.363, 433.869, 405.093, 575.065, 7.565, 491.698, 110.209, 92.381, 29.158, 668.469, 31.275, 350.355, 459.198, 534.461, 417.166, 635.934, 462.82, 470.902, 631.685, 297.714, 439.96, 198.072, 287.621, 247.145, 317.915, 45.807, 6.941, 570.827, 617.0, 97.696, 566.353, 239.932, 342.639, 23.752, 85.596, 478.251, 182.493, 105.575, 329.537, 306.065, 567.311, 344.368, 435.264, 678.912, 415.861, 341.515, 609.749, 551.929, 521.07, 396.917, 209.884, 112.865, 295.861, 578.955, 96.445, 698.503, 448.976, 12.027, 569.104, 560.832, 396.559, 260.597, 680.248, 324.195, 576.07, 357.773, 338.462, 383.887, 307.084, 400.612, 113.252, 39.06, 178.65, 323.574, 11.312, 354.312, 98.134, 250.935, 37.389, 423.789, 216.029, 47.996, 366.295, 529.149, 104.774, 414.605, 4.272, 289.076, 92.59, 555.825, 171.885, 32.857, 585.654, 24.407, 646.933, 153.931, 637.848, 36.496, 529.137, 237.09, 673.122, 647.976, 100.021, 338.527, 221.345, 145.159, 304.875, 340.484, 538.353, 337.721, 526.58, 280.334, 283.386, 40.645, 49.784, 164.194, 565.714, 290.946, 619.681, 45.835, 192.779, 38.954, 121.185, 537.378, 674.473, 423.542, 298.244, 267.277, 458.909, 370.037, 39.377, 411.748, 585.923, 182.344, 39.074, 649.597, 362.767, 10.046, 196.579, 411.047, 144.845, 158.578, 646.17, 388.689, 113.203, 407.26, 333.547, 282.736, 64.983, 665.837, 169.483, 499.219, 391.283, 259.973, 186.096, 309.208, 330.081, 396.974, 82.97, 62.766, 175.165, 694.227, 328.964, 512.443, 649.051, 16.565, 432.019, 457.647, 610.419, 598.695, 664.526, 123.214, 344.362, 607.726, 504.793, 216.551, 358.169, 421.361, 144.199, 528.732, 490.922, 293.244, 632.62, 284.285, 222.411, 547.978, 589.583, 670.225, 674.441, 95.152, 403.159, 567.721, 573.905, 78.16, 239.605, 647.124, 466.818, 690.191, 42.073, 580.151, 141.267, 484.74, 337.831, 354.935, 660.176, 402.942, 0.823, 307.218, 673.443, 647.875, 69.407, 448.994, 38.418, 340.572, 159.05, 427.564, 183.438, 450.794, 363.89, 409.875, 529.659, 155.648, 344.385, 619.392, 165.511, 458.146, 646.35, 124.048, 365.984, 642.58, 80.513, 84.307, 298.916, 445.391, 574.708, 309.369, 264.77, 254.152, 682.015, 295.187, 686.607, 524.786, 505.424, 186.012, 498.718, 439.828, 602.156, 347.077, 193.546, 619.794, 521.621, 424.961, 453.926, 653.087, 669.602, 32.143, 479.123, 502.938, 332.998, 179.664, 554.335, 249.966, 510.899, 68.444, 534.879, 6.645, 203.481, 589.658, 325.197, 533.249, 366.188, 506.252, 675.632, 477.442, 458.908, 19.96, 498.681, 560.489, 42.001, 688.565, 629.939, 222.731, 274.854, 632.72, 519.49, 43.005, 689.368, 194.466, 362.994, 78.006, 203.299, 657.146, 181.224, 548.652, 28.255, 272.666, 487.909, 488.62, 239.265, 336.935, 695.498, 142.118, 31.022, 55.625, 690.277, 131.839, 249.052, 435.42, 153.525, 656.58, 373.454, 291.346, 261.675, 480.192, 15.008, 209.864, 420.3, 514.783, 651.124, 308.105, 547.887, 516.159, 207.111, 436.629, 604.441, 57.636, 625.214, 405.799, 463.403, 131.648, 305.976, 278.94, 592.752, 687.204, 52.932, 291.926, 461.642, 218.701, 5.834, 27.296, 245.443, 358.228, 285.634, 305.65, 603.391, 551.838, 698.939, 485.476, 529.542, 35.537, 454.491, 396.062, 1.344, 544.507, 390.86, 384.439, 538.664, 195.937, 156.389, 355.236, 473.471, 241.9, 165.601, 378.713, 291.006, 116.014, 588.006, 528.262, 541.483, 125.27, 305.821, 308.729, 259.972, 268.517, 575.361, 226.386, 613.002, 94.523, 74.819, 581.488, 517.508, 533.247, 201.738, 43.996, 201.82, 442.156, 403.544, 207.84, 109.754, 491.323, 91.581, 380.175, 184.811, 370.887, 259.533, 191.208, 162.988, 485.357, 687.087, 127.791, 83.409, 544.321, 59.404, 564.872, 476.233, 312.539, 237.956, 543.698, 620.556, 517.673, 382.196, 445.409, 478.536, 378.173, 80.432, 386.597, 9.732, 91.632, 217.485, 644.892, 554.815, 612.976, 501.096, 586.205, 644.949, 102.678, 275.479, 624.058, 404.256, 250.488, 529.405, 599.294, 637.772, 672.461, 209.135, 403.312, 681.965, 380.491, 159.154, 419.056, 289.686, 352.147, 474.58, 58.547, 289.854, 244.524, 128.847, 173.251, 185.442, 606.39, 107.21, 445.015, 255.805, 108.968, 494.214, 399.965, 533.867, 14.504, 649.659, 387.713, 226.146, 543.171, 489.651, 192.362, 268.46, 683.196, 525.37, 283.302, 324.795, 696.408, 432.927, 265.568, 246.452, 264.809, 620.252, 255.75, 394.45, 33.115, 391.264, 500.815, 657.721, 632.315, 263.093, 361.764, 62.391, 677.645, 397.825, 458.535, 419.069, 626.353, 354.065, 436.867, 29.761, 75.764, 337.199, 639.456, 477.028, 100.372, 158.105, 509.405, 374.895, 123.904, 48.841, 53.11, 78.189, 607.801, 552.845, 15.678, 307.098, 476.764, 364.347, 656.266, 79.65, 108.183, 115.455, 277.506, 396.329, 399.457, 64.591, 311.779, 478.56, 9.585, 21.339, 432.088, 134.091, 137.516, 335.053, 48.239, 304.44, 82.151, 218.047, 512.65, 76.545, 501.101, 53.525, 165.339, 627.804, 598.659, 200.989, 324.99, 290.437, 224.251, 340.854, 644.502, 515.362, 285.878, 537.433, 556.724, 97.402, 302.995, 202.125, 262.254, 437.045, 354.286, 51.652, 491.208, 108.86, 447.617, 245.651, 209.802, 389.767, 278.763, 249.467, 305.051, 73.656, 249.431, 271.923, 107.654, 270.681, 544.164, 87.011, 536.9, 678.882, 114.048, 352.617, 618.448, 465.524, 69.472, 191.628, 562.259, 91.481, 61.164, 423.114, 89.508, 531.427, 430.307, 43.133, 308.88, 195.97, 520.081, 373.642, 649.13, 426.715, 281.475, 65.61, 133.215, 528.543, 585.684, 95.79, 509.569, 621.299, 239.6, 133.506, 254.233, 1.075, 558.4, 630.741, 170.124, 114.015, 400.6])
# # plotting setup...
# plt.scatter(x_setup[:-1], y_setup[:-1])
# plt.scatter(x_setup[-1], y_setup[-1], color='red')
# plt.title(header)
# plt.show()
# #
# # # calculate distances (a: BS -> scatt; b: scatt -> UE)
# # distances_a = []  # staat vast, dus moet niet op voorhand gegenereerd worden
# # distances_b = []  # verandert bij beweging van UE
# # for i in range(aantal_scatterers):
# #     z = i + 2
# #     distances_a_i = []
# #     for j in range(M):
# #         distances_a_i.append(np.sqrt((x_setup[j] - x_setup[-z]) ** 2 + (y_setup[j] - y_setup[-z]) ** 2))
# #     distances_a.append(distances_a_i)
# # for i in range(aantal_scatterers):
# #     distances_b.append(np.sqrt((x_setup[-1] - x_setup[-(i + 2)]) ** 2 + (y_setup[-1] - y_setup[-(i + 2)]) ** 2))
# # # calc channel vector for UE @original place
# # h = []
# # for i in range(M):
# #     strength = []
# #     for j in range(aantal_scatterers):
# #         dist = distances_a[j][i] + distances_b[j]
# #         strength.append(np.exp(1j * 2 * np.pi * (dist - int(dist))) / np.exp(np.pi))  # energieschaling is hier 1 op wortel M
# #     h.append(sum(strength))
# # h = np.array(h)
# # wH = h.conj().T
# #
# # '''raster'''
# # y1 = list(range(-100, 105, 10))
# # x1 = list(range(-100, 105, 10))
# # y2 = list(range(-500, -100, 10))
# # x2 = list(range(-500, -100, 10))
# # y3 = list(range(110, 510, 10))
# # x3 = list(range(110, 510, 10))
# # y2.extend(y1)
# # y2.extend(y3)
# # x2.extend(x1)
# # x2.extend(x3)
# # y = [item * resolution / 10 + y_setup[-1] for item in y2]
# # x = [item * resolution / 10 + x_setup[-1] for item in x2]
# # '''centrale plaats antenne: x[int(len(x)/2)], y[int(len(y)/2)]'''
# # # plt.scatter(x, y)
# # # plt.scatter(x_setup[-1], y_setup[-1], color='red')
# # # plt.title(header)
# # # plt.show()
# #
# # ampl = np.zeros(shape=(len(x), len(y)))
# # for k in range(len(x)):
# #     for l in range(len(y)):
# #         for i in range(aantal_scatterers):
# #             distances_b[i] = np.sqrt((x[k] - x_setup[-(i + 2)]) ** 2 + (y[l] - y_setup[-(i + 2)]) ** 2)
# #         hdx = []
# #         for i in range(M):
# #             strength = []
# #             for j in range(aantal_scatterers):
# #                 dist = distances_a[j][i] + distances_b[j]
# #                 strength.append(np.exp(1j * 2 * np.pi * (dist - int(dist))))  # energieschaling is hier 1 op wortel M
# #             hdx.append(sum(strength) / np.exp(np.pi))
# #         # noise v:
# #         # ampl[k, l] = channel_calculation.calc_signal(s, M, hdx=hdx, weights_hermitian_wH=wH, calculation='valdB',
# #         #                                              noise=noise)
# #         # noise x:
# #         ampl[k, l] = channel_calculation.calc_signal(s, M, hdx=hdx, weights_hermitian_wH=wH, calculation='valdB')
# #     print(k)
# # # fig = px.imshow(z=ampl, x=x, y=y, color_continuous_scale=px.colors.diverging.Portland)
# # ma = max([max(l) for l in ampl])
# # mi = -5
# # fig = go.Figure(data=go.Heatmap(
# #     z=ampl,
# #     x=x,
# #     y=y,
# #     colorscale='Jet'
# #     # zmin=mi,
# #     # zmax=ma
# # ))
# #
# # fig.add_trace(go.Scatter(
# #     x=x_setup[:-1],
# #     y=y_setup[:-1],
# #     mode='markers',
# #     name='scatterers',
# #     marker_color='blue'
# # ))
# #
# # fig.add_trace(go.Scatter(
# #     x=[x_setup[-1]], y=[y_setup[-1]],
# #     name='antenna',
# #     mode='markers',
# #     marker_color='red',
# #     text=str(ma)
# # ))
# # fig.update_layout(autosize=False,
# #                   width=850,
# #                   height=800,
# #                   title=header,
# #                   font=dict(size = 10))
# # plotly.offline.plot(fig,
# #                     filename='C:/Users/margo/OneDrive/Documenten/Masterproef/simulation/result plots/geomodel---' + '(' + datetime.datetime.now().strftime("%d-%m-%Y_%H-%M") + ')' + titel + '.html')
# # fig.show()
#
#
#
#











'''tests QAM-generator'''
# M = 1000000
# dx = 0.179049311
# x = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0])
# s = QAM_generator.create_QAM_signal(x, 64)
# noise = np.random.normal(0, np.sqrt(0.5), len(s)) + 1j * np.random.normal(0, np.sqrt(0.5), len(s))
# h = np.random.normal(0, np.sqrt(0.5), M) + 1j * np.random.normal(0, np.sqrt(0.5), M)
# header = 'M=' + str(M) + '; #dx=' + str(dx) + '   (' + datetime.datetime.now().strftime(
#     "%d-%m-%Y %H:%M") + ')'
# wH = h.conj().T
# hdx = hd(dx, h)
# kanaal = np.matmul(wH, hdx)/M
# yr = kanaal * s + noise/M
# sr = [cmath.polar(i) for i in yr]
# amplitudes = [item[0] if int(item[1]) == 0 else -item[0] for item in sr]
# phases = [item[1] for item in sr]
# plt.plot(s.real)
# plt.plot(amplitudes)
# plt.title('amplitudes' + header)
# plt.show()

# plt.plot(phases)
# plt.title('phases' + header)
# plt.show()


















'''geo model 3 (leesbaar)'''
# M = 100
# a = np.array([1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0])
# s = QPSK_generator.create_QPSK_signal(a)
# aantal_scatterers = 4000
# header = 'M=' + str(M) + '; #scatt=' + str(aantal_scatterers) + '   (' + datetime.datetime.now().strftime(
#     "%d-%m-%Y %H:%M") + ')'
# # place antennas (line @x=0)
# y_setup = list(range(4000 - int(M / 2), 4000 - int(M / 2) + M, 1))
# y_setup = [i * 0.10 for i in y_setup]
# x_setup = list([0 for i in y_setup])
# # place scatterers (random)
# for i in range(aantal_scatterers):
#     x_setup.append(random.randint(100000, 700000) / 1000)
#     y_setup.append(random.randint(0, 700000) / 1000)
# # place UE
# x_setup.append(450.3)
# y_setup.append(400.6)
# # plot setup
# plt.scatter(x_setup[:-1], y_setup[:-1])
# plt.scatter(x_setup[-1], y_setup[-1], color='red')
# plt.title(header)
# plt.show()
#
# # calculate distances (a: BS -> scatt; b: scatt -> UE)
# distances_a = []  # staat vast, dus moet niet op voorhand gegenereerd worden
# distances_b = []  # verandert bij beweging van UE
# for i in range(aantal_scatterers):
#     z = i + 2
#     distances_a_i = []
#     for j in range(M):
#         dist_a = np.sqrt((x_setup[j] - x_setup[-z]) ** 2 + (y_setup[j] - y_setup[-z]) ** 2)
#         distances_a_i.append(dist_a)
#     distances_a.append(distances_a_i)
# for i in range(aantal_scatterers):
#     z = i + 2
#     dist_b = np.sqrt((x_setup[-1] - x_setup[-z]) ** 2 + (y_setup[-1] - y_setup[-z]) ** 2)
#     distances_b.append(dist_b)
# # calc channel vector for UE @original place
# h = []
# for i in range(M):
#     strength = []
#     for j in range(aantal_scatterers):
#         dist = distances_a[j][i] + distances_b[j]
#         distverschil = dist - int(dist)
#         expo = 2 * np.pi * distverschil
#         strength.append((1/np.exp(np.pi)) * np.exp(1j * expo))  # energieschaling is hier 1 op wortel M
#     h.append(sum(strength))
# h = np.array(h)
# wH = h.conj().T
# '''raster'''
# y1 = list(range(-100, 105, 10))
# x1 = list(range(-100, 105, 10))
# y2 = list(range(-1000, -100, 10))
# x2 = list(range(-1000, -100, 10))
# y3 = list(range(110, 1010, 10))
# x3 = list(range(110, 1010, 10))
# y2.extend(y1)
# y2.extend(y3)
# x2.extend(x1)
# x2.extend(x3)
# y = [item/10 + y_setup[-1] for item in y2]
# x = [item/10 + x_setup[-1] for item in x2]
# '''centrale plaats antenne: x[int(len(x)/2)], y[int(len(y)/2)]'''
# # plt.scatter(x, y)
# # plt.scatter(x_setup[-1], y_setup[-1], color='red')
# # plt.title(header)
# # plt.show()
# ampl = np.zeros(shape=(len(x), len(y)))
#
# for k in range(len(x)):
#     for l in range(len(y)):
#         for i in range(aantal_scatterers):
#             z = i + 2
#             dist_b = np.sqrt((x[k] - x_setup[-z]) ** 2 + (y[l] - y_setup[-z]) ** 2)
#             distances_b[i] = dist_b
#         hdx = []
#         for i in range(M):
#             strength = []
#             for j in range(aantal_scatterers):
#                 dist = distances_a[j][i] + distances_b[j]
#                 distverschil = dist - int(dist)
#                 expo = 2 * np.pi * distverschil
#                 strength.append((1/np.exp(np.pi)) * np.exp(1j * expo))  # energieschaling is hier 1 op wortel M
#             hdx.append(sum(strength))
#         hdx = np.array(hdx)
#         # plt.hist(h.real, bins=100)
#         # plt.title(header + '(' + str(k) + ',' + str(l) + ')')
#         # plt.show()
#         val = channel_calculation.calc_signal(s, M, hdx=hdx, weights_hermitian_wH=wH, calculation='val')
#         ampl[k, l] = val
#     print(k)
#
# # fig = px.imshow(z=ampl, x=x, y=y, color_continuous_scale=px.colors.diverging.Portland)
# fig = go.Figure(data=go.Heatmap(
#     z=ampl,
#     x=x,
#     y=y
# ))
#
# fig.add_trace(go.Scatter(
#     x=x_setup[:-1],
#     y=y_setup[:-1],
#     mode='markers',
#     name='scatterers',
#     marker_color='blue'
# ))
#
# fig.add_trace(go.Scatter(
#     x=[x_setup[-1]], y=[y_setup[-1]],
#     name='antenna',
#     mode='markers',
#     marker_color='red'
# ))
# fig.update_layout(title=header)
# plotly.offline.plot(fig,
#                     filename='C:/Users/margo/OneDrive/Documenten/Masterproef/simulation/result plots/geomodel---M-' + str(
#                         M) + '-#scatt=' + str(aantal_scatterers) + '(' + datetime.datetime.now().strftime(
#                         "%d-%m-%Y_%H-%M") + ').html')











'''geometrische methode2'''
# y_setup = list(range(4000 - int(M / 2), 4000 - int(M / 2) + M * 1, 1))
# y_setup = [i * 0.10 for i in y_setup]
# x_setup = list([0 for i in y_setup])
# for i in range(aantal_scatterers):
#     x_setup.append(random.randint(100000, 800000) / 1000)
#     y_setup.append(random.randint(0, 800000) / 1000)
# x_setup.append(450.3)
# y_setup.append(400.6)
# plt.scatter(x_setup[:-1], y_setup[:-1])
# plt.scatter(x_setup[-1], y_setup[-1], color='red')
# plt.title(header)
# plt.show()
#
# distances_a = []  # staat vast, dus moet niet op voorhand gegenereerd worden
# distances_b = []  # verandert bij beweging van UE
# for i in range(aantal_scatterers):
#     z = i + 2
#     distances_a_i = []
#     for j in range(M):
#         dist_a = np.sqrt((x_setup[j] - x_setup[-z]) ** 2 + (y_setup[j] - y_setup[-z]) ** 2)
#         distances_a_i.append(dist_a)
#     distances_a.append(distances_a_i)
# for i in range(aantal_scatterers):
#     z = i + 2
#     dist_b = np.sqrt((x_setup[-1] - x_setup[-z]) ** 2 + (y_setup[-1] - y_setup[-z]) ** 2)
#     distances_b.append(dist_b)
#
# h = []
# for i in range(M):
#     strength = []
#     for j in range(aantal_scatterers):
#         dist = distances_a[j][i]+distances_b[j]
#         distverschil = dist - int(dist)
#         expo = 2*np.pi*(distverschil)
#         strength.append((1/np.exp(np.pi)) * np.exp(1j*expo))
#     h.append(sum(strength))
# h = np.array(h)
# plt.hist(h.real, bins=100)
# plt.title(header)
# plt.show()
# wH = h.conj().T
# hdx = hd(dx, h)
# kanaal = np.matmul(wH, hdx)/M
# yr = kanaal * s
# sr = [cmath.polar(i) for i in yr]
# amplitudes = [item[0] if int(item[1]) == 0 else -item[0] for item in sr]
# phases = [item[1] for item in sr]
# plt.plot(s.real)
# plt.plot(amplitudes)
# plt.title(header)
# plt.show()














'''geometrische methode1'''
# y_setup = list(range(4000 - int(M / 2), 4000 - int(M / 2) + M * 1, 1))
# y_setup = [i * 0.10 for i in y_setup]
# x_setup = list([0 for i in y_setup])
# for i in range(aantal_scatterers):
#     x_setup.append(random.randint(100000, 800000) / 1000)
#     y_setup.append(random.randint(0, 800000) / 1000)
# x_setup.append(450.3)
# y_setup.append(400.6)
# plt.scatter(x_setup[:-1], y_setup[:-1])
# plt.scatter(x_setup[-1], y_setup[-1], color='red')
# plt.title(header)
# plt.show()
#
# distances_a_i = [0 for i in range(M)]
# distances_a = []
# distances_b = [0 for i in range(M)]
# for i in range(aantal_scatterers):
#     z = i+2
#     for j in range(M):
#         dist_a = np.sqrt((x_setup[j] - x_setup[-z]) ** 2 + (y_setup[j] - y_setup[-z]) ** 2)
#         distances_a_i[j] = dist_a
#     distances_a.append(distances_a_i)
#
# for i in range(aantal_scatterers):
#     z = i + 2
#     dist_b = np.sqrt((x_setup[-1] - x_setup[-z]) ** 2 + (y_setup[-1] - y_setup[-z]) ** 2)
#     distances_b[i] = dist_b
#
# amplitudes = [1/np.sqrt(M) for i in range(M)]
# h = []
# for i in range(M):
#     strength = []
#     for j in range(aantal_scatterers):
#         dist = distances_a[j][i]+distances_b[j]
#         distverschil = dist - int(dist)
#         expo = 2*np.pi*(distverschil)
#         strength.append(amplitudes[i] * np.exp(1j*expo))
#     h.append(sum(strength))
# h = np.array(h)
# plt.hist(h.real, bins=100)
# plt.title(header)
# plt.show()
# wH = h.conj().T
# amplitudes = channel_calculation.calc_signal(dx, s, M, wH, calculation = 'a')
# plt.plot(s.real)
# plt.plot(amplitudes)
# plt.title(header)
# plt.show()










'''brolletje'''
# d = 0.0325
# d_lambda = d/lamda
# h = np.random.normal(0, np.sqrt(0.5), M) + 1j * np.random.normal(0, np.sqrt(0.5), M)
# q = np.linalg.norm(h)




'''brolletje'''
# a=[1,1,0,2,2,3]
# b = [5,12,6,12,1]
# c = [4,6,9,5]
# a.extend(b)
# a.extend(c)
# print(a)











'''amplitude calc'''
# dx = 0.01
# h = np.random.normal(0, np.sqrt(0.5), M) + 1j * np.random.normal(0, np.sqrt(0.5), M)
# wH = h.conj().T
# hdx = hd(dx, h)
# kanaal = np.matmul(wH, hdx) / M
# yr = kanaal * s
# sr = [cmath.polar(i) for i in yr]
# amplitudes = [item[0] if int(item[1]) == 0 else -item[0] for item in sr]
# phases = [item[1] for item in sr]
# plt.plot(s.real)
# plt.plot(amplitudes)
# plt.show()

# plt.plot(phases)
# plt.show()










'''basis kanaal met goede CSI'''
# M = 1000
# dx = 0.2
# x = np.array([1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0])
# s = QPSK_generator.create_QPSK_signal(x)
# f_c = 6 * 10 ** 9
# h = np.random.normal(0, np.sqrt(0.5), M) + 1j * np.random.normal(0, np.sqrt(0.5), M)
# hH = h.conj().T
# kanaal = np.matmul(hH, h)/M
# yr = kanaal * s
# sr = [cmath.polar(i) for i in yr]
# amplitudes = [item[0] for item in sr]
# phases = [item[1] for item in sr]
# plt.plot(s.real)
# plt.plot(amplitudes)
# plt.show()
#
# plt.plot(phases)
# plt.show()
#









'''random attempt to plot phase shift'''
# n = 16
# h = np.random.normal(0, 0.5, M) + 1j * np.random.normal(0, 0.5, M)
# for i in range(n):
#     hdx = hd(dx, h)
#     plt.subplot(np.sqrt(n), np.sqrt(n), i+1)
#     plt.scatter(h.real, h.imag, marker='.')
#     plt.scatter(hdx.real, hdx.imag, marker='.')
#     plt.title(i)
#     dx += 0.07
# plt.show()
# plt.hist(h.real, bins=100)
# plt.show()


# h = np.random.normal(0, 0.1, int(M / 2)) + 1j * np.random.normal(0, 0.1, int(M / 2))
# for i in range(len(h)):
#     if h[i].real > 0:
#         Re = h[i].real + 1
#     else:
#         Re = h[i].real - 1
#     if h[i].imag > 0:
#         Im = h[i].imag + 1
#     else:
#         Im = h[i].imag - 1
#     h[i] = Re + 1j * Im
# x = np.array([1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1])
# s = QPSK_generator.create_QPSK_signal(x)
# hH = h.conj().T
# kanaal = np.matmul(hH, h)/M
# yr = kanaal * s
# print(atan(kanaal.imag / kanaal.real))
# t = []
# for i in range(len(s)):
#     t.append(cmath.polar(s[i]))
# print(t[50])
# print(t)
# plt.plot(t)
# # plt.plot(yr.real)
#
# hdx = hd(dx, h)
# hdxH = hdx.conj().T
# kanaal2 = np.matmul(hdxH, h)/M
# yr2 = kanaal2 * s
# print(atan(kanaal2.imag / kanaal2.real))
# plt.plot(yr2)
#
# # kanaal3 = (np.matmul(hdxH, h).real/M - 1j*0.4)
# # yr3 = kanaal3*s
# # print(atan(kanaal3.imag / kanaal3.real))
#
# q = signal.find_peaks(yr)[0]
# r = signal.find_peaks(yr2)[0]
# # p = signal.find_peaks(yr3)[0]
# print(q)
# print(r)
# # print(p)
# # plt.plot(yr3)
#
# # plt.scatter(q, yr[q].real, marker = 'o')
# # plt.scatter(r, yr2[r].real, marker = 'x')
# plt.show()










'''Al wat hieronder staat was brol'''
# h = rand(int(n / 2)) + 1j * rand(int(n / 2))
# # plt.hist(h.real, bins=50) # => normal distribution (the bigger M, the better)
# # x = np.linspace(0,2,100) # plot rho
# # ro = rho(dx)
# # plt.plot(x,ro, 'r')
# hdx = hd(dx, h)
# hc = h.conj().T
# plt.plot(h.real)
# plt.plot(hdx.real)
# plt.show()
# plt.plot(h.imag)
# plt.plot(hdx.imag)
# plt.show()
# '''plt.scatter(h.real, h.imag)
# plt.scatter(hdx.real, hdx.imag, marker='x')
# plt.scatter(hc.real, hc.imag, marker='^')
# plt.show()'''
# print(h)
# print(hdx)
# yr = hdx.conj().T * h * s.T
# print(yr)
# y = np.array([0 if abs(i) < 0.6 else 1 for i in yr])
# # y = np.array([round(abs(i)) for i in yr])
# print(s)
# print(y)







'''h = 0
hdx = 0
eind = [0.5 for i in range(len(s))]
for x in range(M):
    h = rand(int(n / 2)) + 1j * rand(int(n / 2))
    hdx = hd(dx, h)
    hc = h.conj().T
    yr = hdx.conj().T * h * s.T
    y = np.array([0 if abs(i) < 0.8 else 1 for i in yr])
    for i in range(len(y)):
        eind[i] = (eind[i]+y[i])/2
plt.plot(h.real)
plt.plot(hdx.real)
plt.show()
print(eind)
end = np.array([0 if abs(i) < 0.75 else 1 for i in eind])
print(s)
print(end)'''

# h = rand(int(n / 2)) + 1j * rand(int(n / 2))
# # plt.hist(h.real, bins=50) # => normal distribution (the bigger M, the better)
# # x = np.linspace(0,2,100) # plot rho
# # ro = rho(dx)
# # plt.plot(x,ro, 'r')
# hdx = hd(dx, h)
# hc = h.conj().T
# plt.plot(h.real)
# plt.plot(hdx.real)
# plt.show()
# plt.plot(h.imag)
# plt.plot(hdx.imag)
# plt.show()
# '''plt.scatter(h.real, h.imag)
# plt.scatter(hdx.real, hdx.imag, marker='x')
# plt.scatter(hc.real, hc.imag, marker='^')
# plt.show()'''
# print(h)
# print(hdx)
# pr = h.conj().T * h * p.T
# sr = h.conj().T * hdx * s.T
# print(abs(pr/p))
# print(abs(sr/s))
# print(np.around(abs(sr*p/pr)))
# y = np.array([0 if abs(i) < 0.6 else 1 for i in pr])
# # y = np.array([round(abs(i)) for i in yr])
# print(s)
# print(y)


